"""
HRMS Desktop Application - H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±
Frontend & Backend 100% Python v·ªõi CustomTkinter GUI
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import json
import os
import sys
from PIL import Image, ImageTk
import threading
import webbrowser

# Import business logic
try:
    from models_streamlit import *
    from utils_streamlit import *
except ImportError:
    print("‚ö†Ô∏è Business logic modules not found. Creating mock data...")

# Set appearance
ctk.set_appearance_mode("light")  # "light" or "dark"
ctk.set_default_color_theme("blue")  # "blue", "green", "dark-blue"

class HRMSDesktop:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("üè¢ HRMS - H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±")
        self.root.geometry("1400x900")
        self.root.resizable(True, True)
        
        # Center window
        self.center_window()
        
        # Initialize database
        self.init_database()
        
        # Session state
        self.current_user = None
        self.is_logged_in = False
        
        # Create main container
        self.main_container = ctk.CTkFrame(self.root)
        self.main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Show login screen
        self.show_login_screen()
        
    def center_window(self):
        """Center window on screen"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def init_database(self):
        """Initialize SQLite database"""
        try:
            self.conn = sqlite3.connect('hrms_desktop.db', check_same_thread=False)
            self.cursor = self.conn.cursor()
            
            # Create tables if not exist
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employee_code TEXT UNIQUE NOT NULL,
                    full_name TEXT NOT NULL,
                    birth_date DATE,
                    gender TEXT,
                    ethnicity TEXT DEFAULT 'Kinh',
                    religion TEXT DEFAULT 'Kh√¥ng',
                    hometown TEXT,
                    position TEXT,
                    department TEXT,
                    party_date DATE,
                    political_theory TEXT,
                    education_level TEXT,
                    major TEXT,
                    institution TEXT,
                    current_salary REAL,
                    salary_grade TEXT,
                    phone TEXT,
                    email TEXT,
                    start_date DATE,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Insert default admin user
            try:
                self.cursor.execute(
                    "INSERT INTO users (username, password) VALUES (?, ?)",
                    ("admin", "admin123")
                )
                self.conn.commit()
            except sqlite3.IntegrityError:
                pass  # User already exists
                
            # Insert sample employees if none exist
            self.cursor.execute("SELECT COUNT(*) FROM employees")
            if self.cursor.fetchone()[0] == 0:
                self.insert_sample_data()
                
        except Exception as e:
            messagebox.showerror("Database Error", f"L·ªói k·∫øt n·ªëi database: {str(e)}")
    
    def insert_sample_data(self):
        """Insert sample employee data"""
        sample_employees = [
            ("NV001", "Nguy·ªÖn VƒÉn A", "1985-06-15", "Nam", "Kinh", "Kh√¥ng", "H√† N·ªôi", 
             "Chuy√™n vi√™n ch√≠nh", "Ph√≤ng TCHC", "2010-05-10", "Trung c·∫•p", "Th·∫°c sƒ© Lu·∫≠t", 
             "Lu·∫≠t", "ƒêH Lu·∫≠t H√† N·ªôi", 7320000, "A2/3.45", "0901234567", "nguyenvana@company.vn", "2008-08-01"),
            ("NV002", "Tr·∫ßn Th·ªã B", "1990-03-20", "N·ªØ", "Kinh", "Kh√¥ng", "H√† N·ªôi",
             "Chuy√™n vi√™n", "Ph√≤ng TCKT", "2015-08-15", "S∆° c·∫•p", "C·ª≠ nh√¢n T√†i ch√≠nh",
             "T√†i ch√≠nh", "ƒêH Kinh t·∫ø Qu·ªëc d√¢n", 5781000, "A1/2.67", "0907654321", "tranthib@company.vn", "2012-03-01"),
            ("NV003", "L√™ VƒÉn C", "1978-12-10", "Nam", "Kinh", "Ph·∫≠t gi√°o", "H·∫£i Ph√≤ng",
             "Tr∆∞·ªüng ph√≤ng", "Ph√≤ng Kinh doanh", "2005-01-20", "Cao c·∫•p", "C·ª≠ nh√¢n Kinh t·∫ø",
             "Kinh t·∫ø", "ƒêH Th∆∞∆°ng m·∫°i", 9200000, "A3/4.2", "0912345678", "levanc@company.vn", "2000-06-01")
        ]
        
        for emp in sample_employees:
            try:
                self.cursor.execute('''
                    INSERT INTO employees (employee_code, full_name, birth_date, gender, ethnicity, 
                    religion, hometown, position, department, party_date, political_theory, 
                    education_level, major, institution, current_salary, salary_grade, phone, email, start_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', emp)
            except sqlite3.IntegrityError:
                pass  # Employee already exists
                
        self.conn.commit()
        
    def show_login_screen(self):
        """Show login interface"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Login frame
        login_frame = ctk.CTkFrame(self.main_container, width=400, height=500)
        login_frame.place(relx=0.5, rely=0.5, anchor="center")
        
        # Title
        title = ctk.CTkLabel(login_frame, text="üè¢ HRMS Desktop", 
                           font=ctk.CTkFont(size=32, weight="bold"))
        title.pack(pady=30)
        
        subtitle = ctk.CTkLabel(login_frame, text="H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±\n100% Python Desktop Application",
                              font=ctk.CTkFont(size=14))
        subtitle.pack(pady=10)
        
        # Login form
        self.username_entry = ctk.CTkEntry(login_frame, placeholder_text="üë§ T√™n ƒëƒÉng nh·∫≠p", width=300)
        self.username_entry.pack(pady=20)
        self.username_entry.insert(0, "admin")  # Default username
        
        self.password_entry = ctk.CTkEntry(login_frame, placeholder_text="üîí M·∫≠t kh·∫©u", 
                                         show="*", width=300)
        self.password_entry.pack(pady=10)
        self.password_entry.insert(0, "admin123")  # Default password
        
        # Login button
        login_btn = ctk.CTkButton(login_frame, text="üöÄ ƒêƒÉng nh·∫≠p", 
                                command=self.handle_login, width=300, height=40,
                                font=ctk.CTkFont(size=16, weight="bold"))
        login_btn.pack(pady=30)
        
        # Info panel
        info_frame = ctk.CTkFrame(login_frame, fg_color="transparent")
        info_frame.pack(pady=20, fill="x")
        
        info_label = ctk.CTkLabel(info_frame, text="üìã T√†i kho·∫£n m·∫∑c ƒë·ªãnh:",
                                font=ctk.CTkFont(size=12, weight="bold"))
        info_label.pack()
        
        credentials = ctk.CTkLabel(info_frame, text="‚Ä¢ T√™n ƒëƒÉng nh·∫≠p: admin\n‚Ä¢ M·∫≠t kh·∫©u: admin123",
                                 font=ctk.CTkFont(size=11))
        credentials.pack(pady=5)
        
        # Bind Enter key
        self.password_entry.bind("<Return>", lambda e: self.handle_login())
        
    def handle_login(self):
        """Handle user login"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
            
        # Check credentials
        self.cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", 
                          (username, password))
        user = self.cursor.fetchone()
        
        if user:
            self.current_user = username
            self.is_logged_in = True
            self.show_dashboard()
        else:
            messagebox.showerror("L·ªói ƒëƒÉng nh·∫≠p", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
    
    def show_dashboard(self):
        """Show main dashboard"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Create header
        self.create_header()
        
        # Create main content area
        content_frame = ctk.CTkFrame(self.main_container)
        content_frame.pack(fill="both", expand=True, pady=10)
        
        # Create sidebar navigation
        self.create_sidebar(content_frame)
        
        # Create main content
        self.main_content = ctk.CTkFrame(content_frame)
        self.main_content.pack(side="right", fill="both", expand=True, padx=(10, 0))
        
        # Show initial dashboard content
        self.show_home_dashboard()
    
    def create_header(self):
        """Create header with user info and logout"""
        header = ctk.CTkFrame(self.main_container, height=60)
        header.pack(fill="x", pady=(0, 10))
        
        # Welcome message
        welcome = ctk.CTkLabel(header, text=f"üëã Xin ch√†o, {self.current_user}!", 
                             font=ctk.CTkFont(size=18, weight="bold"))
        welcome.pack(side="left", padx=20, pady=15)
        
        # Logout button
        logout_btn = ctk.CTkButton(header, text="üö™ ƒêƒÉng xu·∫•t", 
                                 command=self.handle_logout, width=120)
        logout_btn.pack(side="right", padx=20, pady=15)
        
    def create_sidebar(self, parent):
        """Create navigation sidebar"""
        sidebar = ctk.CTkFrame(parent, width=280)
        sidebar.pack(side="left", fill="y", padx=(0, 10))
        sidebar.pack_propagate(False)
        
        # Navigation title
        nav_title = ctk.CTkLabel(sidebar, text="üß≠ Ch·ª©c nƒÉng ch√≠nh", 
                               font=ctk.CTkFont(size=16, weight="bold"))
        nav_title.pack(pady=20)
        
        # Navigation buttons
        nav_buttons = [
            ("üè† Trang ch·ªß", self.show_home_dashboard),
            ("üë• Tra c·ª©u nh√¢n s·ª±", self.show_employee_search),
            ("üí∞ N√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", self.show_salary_management),
            ("‚è∞ Theo d√µi ngh·ªâ h∆∞u", self.show_retirement_tracking),
            ("üìã Ki·ªÉm tra quy ho·∫°ch", self.show_planning_check),
            ("üíº Qu√° tr√¨nh c√¥ng t√°c", self.show_work_history),
            ("üìÑ H·ª£p ƒë·ªìng lao ƒë·ªông", self.show_contracts),
            ("‚úÖ ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", self.show_appointment_check),
            ("üèÜ ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", self.show_award_check),
            ("‚ö° N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", self.show_early_salary),
            ("üìä B√°o c√°o th·ªëng k√™", self.show_reports),
            ("üè• B√°o b·∫£o hi·ªÉm", self.show_insurance)
        ]
        
        for text, command in nav_buttons:
            btn = ctk.CTkButton(sidebar, text=text, command=command, 
                              width=250, height=35, anchor="w",
                              font=ctk.CTkFont(size=12))
            btn.pack(pady=5, padx=15)
    
    def show_home_dashboard(self):
        """Show home dashboard with statistics"""
        self.clear_main_content()
        
        # Title
        title = ctk.CTkLabel(self.main_content, text="üè† B·∫£ng ƒëi·ªÅu khi·ªÉn HRMS", 
                           font=ctk.CTkFont(size=24, weight="bold"))
        title.pack(pady=20)
        
        # Statistics cards
        stats_frame = ctk.CTkFrame(self.main_content)
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        # Get statistics from database
        self.cursor.execute("SELECT COUNT(*) FROM employees WHERE status = 'active'")
        total_employees = self.cursor.fetchone()[0]
        
        # Create statistics cards
        stats = [
            ("üë• T·ªïng nh√¢n s·ª±", str(total_employees), "green"),
            ("‚è∞ S·∫Øp ngh·ªâ h∆∞u", "12", "orange"),
            ("üí∞ ƒê·∫øn k·ª≥ n√¢ng l∆∞∆°ng", "25", "blue"),
            ("üìÑ H·ª£p ƒë·ªìng h·∫øt h·∫°n", "6", "red")
        ]
        
        for i, (label, value, color) in enumerate(stats):
            card = ctk.CTkFrame(stats_frame)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            
            value_label = ctk.CTkLabel(card, text=value, 
                                     font=ctk.CTkFont(size=32, weight="bold"))
            value_label.pack(pady=10)
            
            label_label = ctk.CTkLabel(card, text=label, 
                                     font=ctk.CTkFont(size=12))
            label_label.pack(pady=5)
        
        # Configure grid weights
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Recent activities
        activities_frame = ctk.CTkFrame(self.main_content)
        activities_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        activities_title = ctk.CTkLabel(activities_frame, text="üìã Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y", 
                                      font=ctk.CTkFont(size=18, weight="bold"))
        activities_title.pack(pady=15)
        
        # Activities list
        activities = [
            "üí∞ Nguy·ªÖn VƒÉn A - N√¢ng l∆∞∆°ng t·ª´ A2/3.2 l√™n A2/3.45",
            "‚è∞ Tr·∫ßn Th·ªã B - C·∫£nh b√°o ngh·ªâ h∆∞u trong 6 th√°ng",
            "üìÑ L√™ VƒÉn C - Gia h·∫°n h·ª£p ƒë·ªìng th√†nh c√¥ng",
            "‚úÖ Ph·∫°m Th·ªã D - ƒê·ªß ƒëi·ªÅu ki·ªán b·ªï nhi·ªám Ph√≥ Tr∆∞·ªüng ph√≤ng",
            "üèÜ Ho√†ng VƒÉn E - ƒê·∫°t danh hi·ªáu Lao ƒë·ªông ti√™n ti·∫øn"
        ]
        
        for activity in activities:
            activity_label = ctk.CTkLabel(activities_frame, text=activity, 
                                        font=ctk.CTkFont(size=11), anchor="w")
            activity_label.pack(fill="x", padx=20, pady=5)
    
    def clear_main_content(self):
        """Clear main content area"""
        for widget in self.main_content.winfo_children():
            widget.destroy()
    
    def show_employee_search(self):
        """Show employee search interface"""
        self.clear_main_content()
        
        # Title
        title = ctk.CTkLabel(self.main_content, text="üë• Tra c·ª©u th√¥ng tin nh√¢n s·ª±", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        # Search frame
        search_frame = ctk.CTkFrame(self.main_content)
        search_frame.pack(fill="x", padx=20, pady=10)
        
        search_label = ctk.CTkLabel(search_frame, text="üîç Nh·∫≠p t√™n nh√¢n vi√™n c·∫ßn t√¨m:")
        search_label.pack(pady=10)
        
        self.search_entry = ctk.CTkEntry(search_frame, width=300, placeholder_text="VD: Nguy·ªÖn VƒÉn A")
        self.search_entry.pack(pady=5)
        
        search_btn = ctk.CTkButton(search_frame, text="üîç T√¨m ki·∫øm", 
                                 command=self.search_employee)
        search_btn.pack(pady=10)
        
        # Results frame
        self.results_frame = ctk.CTkFrame(self.main_content)
        self.results_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Bind Enter key
        self.search_entry.bind("<Return>", lambda e: self.search_employee())
    
    def search_employee(self):
        """Search for employee"""
        search_term = self.search_entry.get().strip()
        if not search_term:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n c·∫ßn t√¨m!")
            return
            
        # Clear previous results
        for widget in self.results_frame.winfo_children():
            widget.destroy()
            
        # Search in database
        self.cursor.execute('''
            SELECT * FROM employees 
            WHERE full_name LIKE ? OR employee_code LIKE ?
            ORDER BY full_name
        ''', (f'%{search_term}%', f'%{search_term}%'))
        
        results = self.cursor.fetchall()
        
        if not results:
            no_result = ctk.CTkLabel(self.results_frame, text="‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ph√π h·ª£p", 
                                   font=ctk.CTkFont(size=14))
            no_result.pack(pady=20)
            return
        
        # Show results
        for emp in results:
            self.display_employee_result(emp)
    
    def display_employee_result(self, employee):
        """Display employee search result"""
        emp_frame = ctk.CTkFrame(self.results_frame)
        emp_frame.pack(fill="x", padx=10, pady=10)
        
        # Employee info
        info_text = f"‚úÖ {employee[2]} ({employee[1]})\nüìç {employee[8]} - {employee[9]}\nüìû {employee[17]} | üìß {employee[18]}"
        
        info_label = ctk.CTkLabel(emp_frame, text=info_text, 
                                font=ctk.CTkFont(size=12), justify="left")
        info_label.pack(side="left", padx=15, pady=15)
        
        # Action buttons
        btn_frame = ctk.CTkFrame(emp_frame)
        btn_frame.pack(side="right", padx=15, pady=10)
        
        detail_btn = ctk.CTkButton(btn_frame, text="üìã Chi ti·∫øt", width=100,
                                 command=lambda: self.show_employee_detail(employee))
        detail_btn.pack(pady=5)
        
        export_btn = ctk.CTkButton(btn_frame, text="üìÑ Xu·∫•t Word", width=100,
                                 command=lambda: self.export_employee_word(employee))
        export_btn.pack(pady=5)
    
    def show_employee_detail(self, employee):
        """Show detailed employee information"""
        # Create new window for employee details
        detail_window = ctk.CTkToplevel(self.root)
        detail_window.title(f"Chi ti·∫øt nh√¢n vi√™n - {employee[2]}")
        detail_window.geometry("800x600")
        
        # Employee details content
        content = ctk.CTkScrollableFrame(detail_window)
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title = ctk.CTkLabel(content, text=f"üë§ {employee[2]}", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=10)
        
        # Personal info
        personal_frame = ctk.CTkFrame(content)
        personal_frame.pack(fill="x", pady=10)
        
        personal_title = ctk.CTkLabel(personal_frame, text="üìã Th√¥ng tin c√° nh√¢n", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        personal_title.pack(pady=10)
        
        personal_info = f"""
        M√£ nh√¢n vi√™n: {employee[1]}
        H·ªç t√™n: {employee[2]}
        Ng√†y sinh: {employee[3]}
        Gi·ªõi t√≠nh: {employee[4]}
        D√¢n t·ªôc: {employee[5]}
        T√¥n gi√°o: {employee[6]}
        Qu√™ qu√°n: {employee[7]}
        ƒêi·ªán tho·∫°i: {employee[17]}
        Email: {employee[18]}
        """
        
        personal_label = ctk.CTkLabel(personal_frame, text=personal_info, 
                                    font=ctk.CTkFont(size=11), justify="left")
        personal_label.pack(padx=20, pady=10)
        
        # Work info
        work_frame = ctk.CTkFrame(content)
        work_frame.pack(fill="x", pady=10)
        
        work_title = ctk.CTkLabel(work_frame, text="üíº Th√¥ng tin c√¥ng vi·ªác", 
                                font=ctk.CTkFont(size=16, weight="bold"))
        work_title.pack(pady=10)
        
        work_info = f"""
        Ch·ª©c v·ª•: {employee[8]}
        ƒê∆°n v·ªã: {employee[9]}
        Ng√†y v√†o ƒê·∫£ng: {employee[10]}
        Tr√¨nh ƒë·ªô LLCT: {employee[11]}
        Tr√¨nh ƒë·ªô chuy√™n m√¥n: {employee[12]} {employee[13]}
        Tr∆∞·ªùng: {employee[14]}
        L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
        Ng·∫°ch/H·ªá s·ªë: {employee[16]}
        Ng√†y b·∫Øt ƒë·∫ßu: {employee[19]}
        Tr·∫°ng th√°i: {employee[20]}
        """
        
        work_label = ctk.CTkLabel(work_frame, text=work_info, 
                                font=ctk.CTkFont(size=11), justify="left")
        work_label.pack(padx=20, pady=10)
    
    def export_employee_word(self, employee):
        """Export employee info to Word document"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialname=f"ThongTin_{employee[2].replace(' ', '_')}.docx"
            )
            
            if filename:
                # Create simple text document (mock export)
                content = f"""
                TH√îNG TIN NH√ÇN VI√äN
                
                M√£ nh√¢n vi√™n: {employee[1]}
                H·ªç t√™n: {employee[2]}
                Ng√†y sinh: {employee[3]}
                Gi·ªõi t√≠nh: {employee[4]}
                Ch·ª©c v·ª•: {employee[8]}
                ƒê∆°n v·ªã: {employee[9]}
                L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
                
                Xu·∫•t ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')}
                """
                
                # Save as text file (in real app would use python-docx)
                with open(filename.replace('.docx', '.txt'), 'w', encoding='utf-8') as f:
                    f.write(content)
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t th√¥ng tin nh√¢n vi√™n ra file:\n{filename}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {str(e)}")
    
    def show_salary_management(self):
        """Show salary management interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üí∞ Qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        # Placeholder content
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ L·ªãch c·∫£nh b√°o theo qu√Ω\n"
                                  "‚Ä¢ Logic 36/24 th√°ng\n"
                                  "‚Ä¢ Ph·ª• c·∫•p th√¢m ni√™n 5% + 1%/nƒÉm\n"
                                  "‚Ä¢ Xu·∫•t 3 file Word + Excel",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_retirement_tracking(self):
        """Show retirement tracking interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚è∞ Theo d√µi ngh·ªâ h∆∞u", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ C·∫£nh b√°o 6 th√°ng (th√¥ng b√°o)\n"
                                  "‚Ä¢ C·∫£nh b√°o 3 th√°ng (quy·∫øt ƒë·ªãnh)\n"
                                  "‚Ä¢ N√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n\n"
                                  "‚Ä¢ Xu·∫•t Word th√¥ng b√°o & quy·∫øt ƒë·ªãnh",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_planning_check(self):
        """Show planning check interface"""  
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìã Ki·ªÉm tra quy ho·∫°ch", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra tu·ªïi trong quy ho·∫°ch\n"
                                  "‚Ä¢ Quota checking theo v·ªã tr√≠\n"
                                  "‚Ä¢ Bi·ªÉu ƒë·ªì ph√¢n t√≠ch\n"
                                  "‚Ä¢ C√†i ƒë·∫∑t gi·ªõi h·∫°n tu·ªïi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_work_history(self):
        """Show work history interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üíº Qu√° tr√¨nh c√¥ng t√°c", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Timeline view\n"
                                  "‚Ä¢ Th√™m/S·ª≠a/X√≥a giai ƒëo·∫°n\n"
                                  "‚Ä¢ Xu·∫•t Word/Excel",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_contracts(self):
        """Show contracts interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìÑ H·ª£p ƒë·ªìng lao ƒë·ªông", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Qu·∫£n l√Ω BKS + nh√¢n vi√™n\n"
                                  "‚Ä¢ C·∫£nh b√°o h·∫øt h·∫°n\n"
                                  "‚Ä¢ Gia h·∫°n/T·∫°o m·ªõi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_appointment_check(self):
        """Show appointment check interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚úÖ ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán\n"
                                  "‚Ä¢ C·∫£nh b√°o b·ªï nhi·ªám l·∫°i 90 ng√†y\n"
                                  "‚Ä¢ Th·ªëng k√™ v√† b√°o c√°o",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_award_check(self):
        """Show award check interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üèÜ ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra ti√™u ch√≠ khen th∆∞·ªüng\n"
                                  "‚Ä¢ ƒê√°nh gi√° ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán\n"
                                  "‚Ä¢ ƒê·ªÅ xu·∫•t khen th∆∞·ªüng",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_early_salary(self):
        """Show early salary interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚ö° N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Qu·∫£n l√Ω ƒë·ªÅ xu·∫•t\n"
                                  "‚Ä¢ Ph√™ duy·ªát th√†nh t√≠ch\n"
                                  "‚Ä¢ Xu·∫•t quy·∫øt ƒë·ªãnh",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_reports(self):
        """Show reports interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìä B√°o c√°o th·ªëng k√™", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Th·ªëng k√™ to√†n di·ªán\n"
                                  "‚Ä¢ Ph√¢n t√≠ch th√¥i vi·ªác\n"
                                  "‚Ä¢ C∆° c·∫•u nh√¢n s·ª±\n"
                                  "‚Ä¢ Charts t∆∞∆°ng t√°c",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_insurance(self):
        """Show insurance interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üè• B√°o b·∫£o hi·ªÉm", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Nh·∫Øc nh·ªü BHXH\n"
                                  "‚Ä¢ Xu·∫•t Excel\n"
                                  "‚Ä¢ Qu·∫£n l√Ω thay ƒë·ªïi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def handle_logout(self):
        """Handle user logout"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?"):
            self.current_user = None
            self.is_logged_in = False
            self.show_login_screen()
    
    def run(self):
        """Run the application"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def on_closing(self):
        """Handle application closing"""
        if hasattr(self, 'conn'):
            self.conn.close()
        self.root.destroy()

if __name__ == "__main__":
    try:
        app = HRMSDesktop()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng...")
