"""
HRMS Desktop Application - H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±
Frontend & Backend 100% Python v·ªõi CustomTkinter GUI
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import json
import os
import sys
from PIL import Image, ImageTk
import threading
import webbrowser

# Microsoft Fluent Design Colors
COLORS = {
    'primary': '#0078d4',      # Microsoft Blue
    'secondary': '#106ebe',     # Darker Blue
    'success': '#107c10',       # Microsoft Green  
    'warning': '#ff8c00',       # Microsoft Orange
    'error': '#d13438',         # Microsoft Red
    'background': '#f3f2f1',    # Microsoft Light Gray
    'surface': '#ffffff',       # White
    'text': '#323130',          # Microsoft Dark Gray
    'text_secondary': '#605e5c' # Microsoft Medium Gray
}

# Import business logic
try:
    from models_streamlit import *
    from utils_streamlit import *
except ImportError:
    print("‚ö†Ô∏è Business logic modules not found. Creating mock data...")

# Microsoft Fluent Design Theme
ctk.set_appearance_mode("light")  # Microsoft uses light theme primarily
ctk.set_default_color_theme("blue")  # Microsoft Blue theme

# Microsoft-style Icons (Text-based for professional look)
ICONS = {
    'home': 'üè†',
    'people': 'üë•', 
    'salary': 'üí∞',
    'time': '‚è∞',
    'planning': 'üìã',
    'work': 'üíº',
    'contract': 'üìÑ',
    'check': '‚úÖ',
    'award': 'üèÜ',
    'fast': '‚ö°',
    'chart': 'üìä',
    'health': 'üè•',
    'settings': '‚öôÔ∏è',
    'help': '‚ùì',
    'fullscreen': '‚õ∂',
    'logout': '‚Ü™Ô∏è',
    'search': 'üîç',
    'export': 'üì§',
    'info': '‚ÑπÔ∏è'
}

# Help texts for each function (Microsoft-style helpful descriptions)
HELP_TEXTS = {
    'home': 'Xem t·ªïng quan th·ªëng k√™ v√† ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y c·ªßa h·ªá th·ªëng',
    'employee_search': 'T√¨m ki·∫øm v√† xem chi ti·∫øt th√¥ng tin c·ªßa nh√¢n vi√™n theo t√™n ho·∫∑c m√£',
    'salary_mgmt': 'Qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥ theo quy ƒë·ªãnh 36/24 th√°ng v√† ph·ª• c·∫•p th√¢m ni√™n',
    'retirement': 'Theo d√µi ngh·ªâ h∆∞u, c·∫£nh b√°o tr∆∞·ªõc 6 th√°ng v√† x·ª≠ l√Ω n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n',
    'planning': 'Ki·ªÉm tra quy ho·∫°ch c√°n b·ªô theo ƒë·ªô tu·ªïi v√† quota t·ª´ng v·ªã tr√≠',
    'work_history': 'Qu·∫£n l√Ω timeline qu√° tr√¨nh c√¥ng t√°c, th√™m/s·ª≠a/x√≥a c√°c giai ƒëo·∫°n',
    'contracts': 'Qu·∫£n l√Ω h·ª£p ƒë·ªìng lao ƒë·ªông cho Ban ki·ªÉm so√°t v√† nh√¢n vi√™n, c·∫£nh b√°o h·∫øt h·∫°n',
    'appointment': 'Ki·ªÉm tra ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán b·ªï nhi·ªám v√† c·∫£nh b√°o b·ªï nhi·ªám l·∫°i sau 90 ng√†y',
    'awards': 'Xem ƒëi·ªÅu ki·ªán khen th∆∞·ªüng v√† ƒë√°nh gi√° c√°c ti√™u ch√≠ c·∫ßn thi·∫øt',
    'early_salary': 'Qu·∫£n l√Ω n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n do l·∫≠p th√†nh t√≠ch xu·∫•t s·∫Øc',
    'reports': 'Xem b√°o c√°o th·ªëng k√™ to√†n di·ªán v√† ph√¢n t√≠ch c∆° c·∫•u nh√¢n s·ª±',
    'insurance': 'Nh·∫Øc nh·ªü v√† xu·∫•t Excel b√°o c√°o b·∫£o hi·ªÉm x√£ h·ªôi'
}

class HRMSDesktop:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Microsoft HRMS - Human Resource Management System")
        
        # Set larger default size and make fully resizable
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Start with 90% of screen size
        start_width = int(screen_width * 0.9)
        start_height = int(screen_height * 0.9)
        
        self.root.geometry(f"{start_width}x{start_height}")
        self.root.resizable(True, True)
        
        # Enable maximize button and fullscreen capability
        self.root.state('normal')  # Allow maximize
        self.is_fullscreen = False
        
        # Bind F11 for fullscreen toggle
        self.root.bind('<F11>', self.toggle_fullscreen)
        self.root.bind('<Escape>', self.exit_fullscreen)
        
        # Center window
        self.center_window()
        
        # Initialize database
        self.init_database()
        
        # Session state
        self.current_user = None
        self.is_logged_in = False
        self.show_help = True  # Microsoft-style contextual help
        
        # Tooltip system for Microsoft-style guidance
        self.current_tooltip = None
        
        # Create main container
        self.main_container = ctk.CTkFrame(self.root)
        self.main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Show login screen
        self.show_login_screen()
        
    def center_window(self):
        """Center window on screen"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def toggle_fullscreen(self, event=None):
        """Toggle fullscreen mode"""
        self.is_fullscreen = not self.is_fullscreen
        if self.is_fullscreen:
            self.root.attributes("-fullscreen", True)
        else:
            self.root.attributes("-fullscreen", False)
    
    def exit_fullscreen(self, event=None):
        """Exit fullscreen mode"""
        if self.is_fullscreen:
            self.is_fullscreen = False
            self.root.attributes("-fullscreen", False)
    
    def toggle_help(self):
        """Toggle help display in Microsoft style"""
        self.show_help = not self.show_help
        # Refresh current view to show/hide help
        if hasattr(self, 'current_function'):
            self.show_function_help(self.current_function)
        else:
            self.show_general_help()
    
    def show_function_help(self, function_key):
        """Show contextual help for current function"""
        if not self.show_help:
            return
            
        help_text = HELP_TEXTS.get(function_key, "Ch·ª©c nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        
        # Create or update help panel
        if hasattr(self, 'help_panel'):
            self.help_panel.destroy()
        
        self.help_panel = ctk.CTkFrame(self.main_content, height=60, fg_color=COLORS['background'])
        self.help_panel.pack(fill="x", pady=(0, 10))
        
        help_icon = ctk.CTkLabel(self.help_panel, text=ICONS['info'], 
                               font=ctk.CTkFont(size=14))
        help_icon.pack(side="left", padx=15, pady=15)
        
        help_label = ctk.CTkLabel(self.help_panel, text=help_text,
                                font=ctk.CTkFont(size=12),
                                text_color=COLORS['text'])
        help_label.pack(side="left", padx=10, pady=15)
    
    def show_general_help(self):
        """Show general help information"""
        if not self.show_help:
            return
            
        general_help = "Ch·ªçn m·ªôt ch·ª©c nƒÉng t·ª´ menu b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu. Hover v√†o c√°c n√∫t ƒë·ªÉ xem th√¥ng tin chi ti·∫øt."
        
        if hasattr(self, 'help_panel'):
            self.help_panel.destroy()
        
        self.help_panel = ctk.CTkFrame(self.main_content, height=60, fg_color=COLORS['background'])
        self.help_panel.pack(fill="x", pady=(0, 10))
        
        help_icon = ctk.CTkLabel(self.help_panel, text=ICONS['info'], 
                               font=ctk.CTkFont(size=14))
        help_icon.pack(side="left", padx=15, pady=15)
        
        help_label = ctk.CTkLabel(self.help_panel, text=general_help,
                                font=ctk.CTkFont(size=12),
                                text_color=COLORS['text'])
        help_label.pack(side="left", padx=10, pady=15)
    
    def init_database(self):
        """Initialize SQLite database"""
        try:
            self.conn = sqlite3.connect('hrms_desktop.db', check_same_thread=False)
            self.cursor = self.conn.cursor()
            
            # Create tables if not exist
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employee_code TEXT UNIQUE NOT NULL,
                    full_name TEXT NOT NULL,
                    birth_date DATE,
                    gender TEXT,
                    ethnicity TEXT DEFAULT 'Kinh',
                    religion TEXT DEFAULT 'Kh√¥ng',
                    hometown TEXT,
                    position TEXT,
                    department TEXT,
                    party_date DATE,
                    political_theory TEXT,
                    education_level TEXT,
                    major TEXT,
                    institution TEXT,
                    current_salary REAL,
                    salary_grade TEXT,
                    phone TEXT,
                    email TEXT,
                    start_date DATE,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Insert default admin user
            try:
                self.cursor.execute(
                    "INSERT INTO users (username, password) VALUES (?, ?)",
                    ("admin", "admin123")
                )
                self.conn.commit()
            except sqlite3.IntegrityError:
                pass  # User already exists
                
            # Insert sample employees if none exist
            self.cursor.execute("SELECT COUNT(*) FROM employees")
            if self.cursor.fetchone()[0] == 0:
                self.insert_sample_data()
                
        except Exception as e:
            messagebox.showerror("Database Error", f"L·ªói k·∫øt n·ªëi database: {str(e)}")
    
    def insert_sample_data(self):
        """Insert sample employee data"""
        sample_employees = [
            ("NV001", "Nguy·ªÖn VƒÉn A", "1985-06-15", "Nam", "Kinh", "Kh√¥ng", "H√† N·ªôi", 
             "Chuy√™n vi√™n ch√≠nh", "Ph√≤ng TCHC", "2010-05-10", "Trung c·∫•p", "Th·∫°c sƒ© Lu·∫≠t", 
             "Lu·∫≠t", "ƒêH Lu·∫≠t H√† N·ªôi", 7320000, "A2/3.45", "0901234567", "nguyenvana@company.vn", "2008-08-01"),
            ("NV002", "Tr·∫ßn Th·ªã B", "1990-03-20", "N·ªØ", "Kinh", "Kh√¥ng", "H√† N·ªôi",
             "Chuy√™n vi√™n", "Ph√≤ng TCKT", "2015-08-15", "S∆° c·∫•p", "C·ª≠ nh√¢n T√†i ch√≠nh",
             "T√†i ch√≠nh", "ƒêH Kinh t·∫ø Qu·ªëc d√¢n", 5781000, "A1/2.67", "0907654321", "tranthib@company.vn", "2012-03-01"),
            ("NV003", "L√™ VƒÉn C", "1978-12-10", "Nam", "Kinh", "Ph·∫≠t gi√°o", "H·∫£i Ph√≤ng",
             "Tr∆∞·ªüng ph√≤ng", "Ph√≤ng Kinh doanh", "2005-01-20", "Cao c·∫•p", "C·ª≠ nh√¢n Kinh t·∫ø",
             "Kinh t·∫ø", "ƒêH Th∆∞∆°ng m·∫°i", 9200000, "A3/4.2", "0912345678", "levanc@company.vn", "2000-06-01")
        ]
        
        for emp in sample_employees:
            try:
                self.cursor.execute('''
                    INSERT INTO employees (employee_code, full_name, birth_date, gender, ethnicity, 
                    religion, hometown, position, department, party_date, political_theory, 
                    education_level, major, institution, current_salary, salary_grade, phone, email, start_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', emp)
            except sqlite3.IntegrityError:
                pass  # Employee already exists
                
        self.conn.commit()
        
    def show_login_screen(self):
        """Show Microsoft-style login interface"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Main login container
        login_container = ctk.CTkFrame(self.main_container, fg_color=COLORS['surface'])
        login_container.pack(fill="both", expand=True)
        
        # Left panel - Welcome & Branding
        left_panel = ctk.CTkFrame(login_container, width=600, fg_color=COLORS['primary'])
        left_panel.pack(side="left", fill="y", padx=20, pady=20)
        left_panel.pack_propagate(False)
        
        # Microsoft-style welcome
        welcome_title = ctk.CTkLabel(left_panel, text="Ch√†o m·ª´ng ƒë·∫øn v·ªõi", 
                                   font=ctk.CTkFont(size=18), text_color="white")
        welcome_title.pack(pady=(50, 10))
        
        app_title = ctk.CTkLabel(left_panel, text="Microsoft HRMS", 
                               font=ctk.CTkFont(size=36, weight="bold"), text_color="white")
        app_title.pack(pady=10)
        
        app_subtitle = ctk.CTkLabel(left_panel, text="Human Resource Management System", 
                                  font=ctk.CTkFont(size=16), text_color="white")
        app_subtitle.pack(pady=5)
        
        description = ctk.CTkLabel(left_panel, 
                                 text="H·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª± hi·ªán ƒë·∫°i\nv·ªõi giao di·ªán Microsoft Fluent Design\n\n"
                                      "‚úì Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n\n"
                                      "‚úì Theo d√µi n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥\n"
                                      "‚úì B√°o c√°o v√† th·ªëng k√™\n"
                                      "‚úì Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng",
                                 font=ctk.CTkFont(size=13), text_color="white",
                                 justify="left")
        description.pack(pady=30, padx=40)
        
        # Right panel - Login form
        right_panel = ctk.CTkFrame(login_container, fg_color=COLORS['surface'])
        right_panel.pack(side="right", fill="both", expand=True, padx=20, pady=20)
        
        # Login form container
        login_frame = ctk.CTkFrame(right_panel, width=400)
        login_frame.place(relx=0.5, rely=0.5, anchor="center")
        
        # Login header
        login_header = ctk.CTkLabel(login_frame, text="ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n", 
                                  font=ctk.CTkFont(size=24, weight="bold"),
                                  text_color=COLORS['text'])
        login_header.pack(pady=(30, 20))
        
        help_text = ctk.CTkLabel(login_frame, text="Nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c", 
                               font=ctk.CTkFont(size=12),
                               text_color=COLORS['text_secondary'])
        help_text.pack(pady=(0, 30))
        
        # Username field with Microsoft-style labeling
        username_label = ctk.CTkLabel(login_frame, text="T√™n ƒëƒÉng nh·∫≠p", 
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
        username_label.pack(anchor="w", padx=50, pady=(0, 5))
        
        self.username_entry = ctk.CTkEntry(login_frame, placeholder_text="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p", 
                                         width=300, height=35,
                                         font=ctk.CTkFont(size=13))
        self.username_entry.pack(pady=(0, 20), padx=50)
        self.username_entry.insert(0, "admin")  # Default username
        
        # Password field
        password_label = ctk.CTkLabel(login_frame, text="M·∫≠t kh·∫©u", 
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
        password_label.pack(anchor="w", padx=50, pady=(0, 5))
        
        self.password_entry = ctk.CTkEntry(login_frame, placeholder_text="Nh·∫≠p m·∫≠t kh·∫©u", 
                                         show="*", width=300, height=35,
                                         font=ctk.CTkFont(size=13))
        self.password_entry.pack(pady=(0, 30), padx=50)
        self.password_entry.insert(0, "admin123")  # Default password
        
        # Login button - Microsoft style
        login_btn = ctk.CTkButton(login_frame, text="ƒêƒÉng nh·∫≠p", 
                                command=self.handle_login, width=300, height=45,
                                font=ctk.CTkFont(size=14, weight="bold"),
                                fg_color=COLORS['primary'], hover_color=COLORS['secondary'])
        login_btn.pack(pady=(0, 20), padx=50)
        
        # Demo credentials info with Microsoft styling
        demo_frame = ctk.CTkFrame(login_frame, fg_color=COLORS['background'], corner_radius=8)
        demo_frame.pack(fill="x", padx=50, pady=20)
        
        demo_title = ctk.CTkLabel(demo_frame, text="T√†i kho·∫£n demo",
                                font=ctk.CTkFont(size=11, weight="bold"),
                                text_color=COLORS['text'])
        demo_title.pack(pady=(10, 5))
        
        credentials = ctk.CTkLabel(demo_frame, 
                                 text="T√™n ƒëƒÉng nh·∫≠p: admin\nM·∫≠t kh·∫©u: admin123",
                                 font=ctk.CTkFont(size=10),
                                 text_color=COLORS['text_secondary'])
        credentials.pack(pady=(0, 10))
        
        # Help section - Microsoft style
        help_frame = ctk.CTkFrame(login_frame, fg_color="transparent")
        help_frame.pack(fill="x", padx=50, pady=10)
        
        help_icon = ctk.CTkLabel(help_frame, text=ICONS['help'], font=ctk.CTkFont(size=12))
        help_icon.pack(side="left")
        
        help_text = ctk.CTkLabel(help_frame, 
                               text="F11: To√†n m√†n h√¨nh | ESC: Tho√°t | Enter: ƒêƒÉng nh·∫≠p",
                               font=ctk.CTkFont(size=9),
                               text_color=COLORS['text_secondary'])
        help_text.pack(side="left", padx=(5, 0))
        
        # Bind Enter key
        self.password_entry.bind("<Return>", lambda e: self.handle_login())
        
    def handle_login(self):
        """Handle user login"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
            
        # Check credentials
        self.cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", 
                          (username, password))
        user = self.cursor.fetchone()
        
        if user:
            self.current_user = username
            self.is_logged_in = True
            self.show_dashboard()
        else:
            messagebox.showerror("L·ªói ƒëƒÉng nh·∫≠p", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
    
    def show_dashboard(self):
        """Show main dashboard"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Create header
        self.create_header()
        
        # Create main content area
        content_frame = ctk.CTkFrame(self.main_container)
        content_frame.pack(fill="both", expand=True, pady=10)
        
        # Create sidebar navigation
        self.create_sidebar(content_frame)
        
        # Create main content
        self.main_content = ctk.CTkFrame(content_frame)
        self.main_content.pack(side="right", fill="both", expand=True, padx=(10, 0))
        
        # Show initial dashboard content
        self.show_home_dashboard()
    
    def create_header(self):
        """Create Microsoft-style header with user info and controls"""
        header = ctk.CTkFrame(self.main_container, height=70, fg_color=COLORS['surface'])
        header.pack(fill="x", pady=(0, 10))
        
        # Left side - App branding and user welcome
        left_frame = ctk.CTkFrame(header, fg_color="transparent")
        left_frame.pack(side="left", padx=20, pady=15)
        
        app_name = ctk.CTkLabel(left_frame, text="Microsoft HRMS", 
                              font=ctk.CTkFont(size=16, weight="bold"),
                              text_color=COLORS['primary'])
        app_name.pack(side="left")
        
        separator = ctk.CTkLabel(left_frame, text="‚Ä¢", 
                               font=ctk.CTkFont(size=14),
                               text_color=COLORS['text_secondary'])
        separator.pack(side="left", padx=10)
        
        welcome = ctk.CTkLabel(left_frame, text=f"Xin ch√†o, {self.current_user}", 
                             font=ctk.CTkFont(size=14),
                             text_color=COLORS['text'])
        welcome.pack(side="left")
        
        # Right side - Controls with Microsoft styling
        controls_frame = ctk.CTkFrame(header, fg_color="transparent")
        controls_frame.pack(side="right", padx=20, pady=15)
        
        # Help toggle button
        help_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['help']} Tr·ª£ gi√∫p", 
                               command=self.toggle_help, width=100, height=30,
                               font=ctk.CTkFont(size=11),
                               fg_color="transparent", 
                               text_color=COLORS['primary'],
                               hover_color=COLORS['background'])
        help_btn.pack(side="left", padx=(0, 10))
        
        # Fullscreen button - Microsoft style
        fullscreen_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['fullscreen']} To√†n m√†n h√¨nh", 
                                     command=self.toggle_fullscreen, width=130, height=30,
                                     font=ctk.CTkFont(size=11),
                                     fg_color=COLORS['background'], 
                                     text_color=COLORS['text'],
                                     hover_color=COLORS['primary'])
        fullscreen_btn.pack(side="left", padx=(0, 10))
        
        # Logout button - Microsoft style
        logout_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['logout']} ƒêƒÉng xu·∫•t", 
                                 command=self.handle_logout, width=110, height=30,
                                 font=ctk.CTkFont(size=11),
                                 fg_color=COLORS['error'], 
                                 hover_color="#b91c1c")
        logout_btn.pack(side="left")
        
    def create_sidebar(self, parent):
        """Create Microsoft-style navigation sidebar"""
        sidebar = ctk.CTkFrame(parent, width=320, fg_color=COLORS['surface'])
        sidebar.pack(side="left", fill="y", padx=(0, 10))
        sidebar.pack_propagate(False)
        
        # Sidebar header with Microsoft styling
        header_frame = ctk.CTkFrame(sidebar, height=80, fg_color=COLORS['primary'])
        header_frame.pack(fill="x", padx=10, pady=10)
        header_frame.pack_propagate(False)
        
        nav_title = ctk.CTkLabel(header_frame, text="Ch·ª©c nƒÉng ch√≠nh", 
                               font=ctk.CTkFont(size=18, weight="bold"),
                               text_color="white")
        nav_title.pack(pady=20)
        
        # Create scrollable frame for navigation buttons
        nav_scroll = ctk.CTkScrollableFrame(sidebar, width=280, height=600,
                                          fg_color="transparent")
        nav_scroll.pack(fill="both", expand=True, padx=15, pady=10)
        
        # Navigation buttons with Microsoft-style icons and help text
        nav_items = [
            ("home", "Trang ch·ªß", self.show_home_dashboard, 'home'),
            ("people", "Tra c·ª©u nh√¢n s·ª±", self.show_employee_search, 'employee_search'),
            ("salary", "N√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", self.show_salary_management, 'salary_mgmt'),
            ("time", "Theo d√µi ngh·ªâ h∆∞u", self.show_retirement_tracking, 'retirement'),
            ("planning", "Ki·ªÉm tra quy ho·∫°ch", self.show_planning_check, 'planning'),
            ("work", "Qu√° tr√¨nh c√¥ng t√°c", self.show_work_history, 'work_history'),
            ("contract", "H·ª£p ƒë·ªìng lao ƒë·ªông", self.show_contracts, 'contracts'),
            ("check", "ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", self.show_appointment_check, 'appointment'),
            ("award", "ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", self.show_award_check, 'awards'),
            ("fast", "N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", self.show_early_salary, 'early_salary'),
            ("chart", "B√°o c√°o th·ªëng k√™", self.show_reports, 'reports'),
            ("health", "B√°o b·∫£o hi·ªÉm", self.show_insurance, 'insurance')
        ]
        
        for icon_key, text, command, help_key in nav_items:
            # Create button frame for better control
            btn_frame = ctk.CTkFrame(nav_scroll, fg_color="transparent")
            btn_frame.pack(fill="x", pady=4, padx=5)
            
            # Main navigation button with Microsoft styling
            btn = ctk.CTkButton(btn_frame, 
                              text=f"{ICONS[icon_key]}  {text}", 
                              command=lambda c=command, h=help_key: self.nav_click(c, h),
                              width=260, height=45, anchor="w",
                              font=ctk.CTkFont(size=13),
                              fg_color="transparent",
                              text_color=COLORS['text'],
                              hover_color=COLORS['background'])
            btn.pack(fill="x")
            
            # Add hover tooltip (Microsoft-style help)
            self.create_tooltip(btn, HELP_TEXTS.get(help_key, ""))
    
    def nav_click(self, command, help_key):
        """Handle navigation click with help context"""
        self.current_function = help_key
        command()  # Execute the navigation command
        self.show_function_help(help_key)  # Show contextual help
    
    def create_tooltip(self, widget, text):
        """Create Microsoft-style tooltip for widget"""
        def on_enter(event):
            if hasattr(self, 'tooltip'):
                self.tooltip.destroy()
                
            self.tooltip = ctk.CTkToplevel()
            self.tooltip.wm_overrideredirect(True)
            self.tooltip.configure(fg_color=COLORS['text'])
            
            label = ctk.CTkLabel(self.tooltip, text=text,
                               font=ctk.CTkFont(size=10),
                               text_color="white",
                               fg_color=COLORS['text'])
            label.pack(padx=8, pady=4)
            
            # Position tooltip
            x = widget.winfo_rootx() + 20
            y = widget.winfo_rooty() - 30
            self.tooltip.geometry(f"+{x}+{y}")
        
        def on_leave(event):
            if hasattr(self, 'tooltip'):
                self.tooltip.destroy()
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def show_home_dashboard(self):
        """Show Microsoft-style home dashboard"""
        self.clear_main_content()
        
        # Welcome section with Microsoft styling
        welcome_frame = ctk.CTkFrame(self.main_content, height=100, fg_color=COLORS['surface'])
        welcome_frame.pack(fill="x", padx=20, pady=20)
        welcome_frame.pack_propagate(False)
        
        # Welcome content
        welcome_content = ctk.CTkFrame(welcome_frame, fg_color="transparent")
        welcome_content.pack(expand=True, fill="both", padx=30, pady=20)
        
        welcome_title = ctk.CTkLabel(welcome_content, text="B·∫£ng ƒëi·ªÅu khi·ªÉn", 
                                   font=ctk.CTkFont(size=28, weight="bold"),
                                   text_color=COLORS['text'])
        welcome_title.pack(anchor="w")
        
        welcome_subtitle = ctk.CTkLabel(welcome_content, 
                                      text=f"Ch√†o m·ª´ng tr·ªü l·∫°i, {self.current_user}. ƒê√¢y l√† t·ªïng quan v·ªÅ h·ªá th·ªëng HRMS c·ªßa b·∫°n.",
                                      font=ctk.CTkFont(size=14),
                                      text_color=COLORS['text_secondary'])
        welcome_subtitle.pack(anchor="w", pady=(5, 0))
        
        # Statistics cards
        stats_frame = ctk.CTkFrame(self.main_content)
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        # Get statistics from database
        self.cursor.execute("SELECT COUNT(*) FROM employees WHERE status = 'active'")
        total_employees = self.cursor.fetchone()[0]
        
        # Microsoft-style statistics cards
        stats_data = [
            ("T·ªïng nh√¢n s·ª±", str(total_employees), COLORS['primary'], "people"),
            ("S·∫Øp ngh·ªâ h∆∞u", "12", COLORS['warning'], "time"), 
            ("ƒê·∫øn k·ª≥ n√¢ng l∆∞∆°ng", "25", COLORS['success'], "salary"),
            ("H·ª£p ƒë·ªìng h·∫øt h·∫°n", "6", COLORS['error'], "contract"),
            ("Khen th∆∞·ªüng th√°ng", "8", "#8b5cf6", "award"),
            ("Quy ho·∫°ch h·∫øt h·∫°n", "15", "#f59e0b", "planning")
        ]
        
        # Create Microsoft-style cards in 2 rows x 3 columns
        for i, (label, value, color, icon_key) in enumerate(stats_data):
            row = i // 3
            col = i % 3
            
            # Card container with Microsoft Fluent Design
            card = ctk.CTkFrame(stats_frame, height=140, fg_color=COLORS['surface'],
                              border_width=1, border_color=COLORS['background'])
            card.grid(row=row, column=col, padx=12, pady=12, sticky="ew")
            
            # Card header with icon and color accent
            card_header = ctk.CTkFrame(card, height=40, fg_color=color)
            card_header.pack(fill="x", padx=0, pady=0)
            card_header.pack_propagate(False)
            
            icon = ctk.CTkLabel(card_header, text=ICONS[icon_key], 
                              font=ctk.CTkFont(size=18), text_color="white")
            icon.pack(side="left", padx=15, pady=10)
            
            # Card content
            content_frame = ctk.CTkFrame(card, fg_color="transparent")
            content_frame.pack(fill="both", expand=True, padx=20, pady=15)
            
            value_label = ctk.CTkLabel(content_frame, text=value,
                                     font=ctk.CTkFont(size=32, weight="bold"),
                                     text_color=COLORS['text'])
            value_label.pack(anchor="w")
            
            label_label = ctk.CTkLabel(content_frame, text=label,
                                     font=ctk.CTkFont(size=12),
                                     text_color=COLORS['text_secondary'])
            label_label.pack(anchor="w", pady=(5, 0))
        
        # Configure grid for responsive layout
        for i in range(3):
            stats_frame.grid_columnconfigure(i, weight=1)
        for i in range(2):
            stats_frame.grid_rowconfigure(i, weight=1)
        
        # Recent activities with Microsoft styling
        activities_frame = ctk.CTkFrame(self.main_content, fg_color=COLORS['surface'])
        activities_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Activities header
        activities_header = ctk.CTkFrame(activities_frame, height=60, fg_color=COLORS['background'])
        activities_header.pack(fill="x", padx=0, pady=0)
        activities_header.pack_propagate(False)
        
        activities_title = ctk.CTkLabel(activities_header, text="Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y", 
                                      font=ctk.CTkFont(size=18, weight="bold"),
                                      text_color=COLORS['text'])
        activities_title.pack(side="left", padx=20, pady=15)
        
        # View all button
        view_all_btn = ctk.CTkButton(activities_header, text="Xem t·∫•t c·∫£",
                                   width=100, height=30,
                                   font=ctk.CTkFont(size=11),
                                   fg_color="transparent",
                                   text_color=COLORS['primary'],
                                   hover_color=COLORS['background'])
        view_all_btn.pack(side="right", padx=20, pady=15)
        
        # Activities content
        activities_content = ctk.CTkScrollableFrame(activities_frame, height=300)
        activities_content.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Activities list with Microsoft-style items
        activities = [
            ("salary", "Nguy·ªÖn VƒÉn A", "N√¢ng l∆∞∆°ng t·ª´ A2/3.2 l√™n A2/3.45", "2 gi·ªù tr∆∞·ªõc", COLORS['success']),
            ("time", "Tr·∫ßn Th·ªã B", "C·∫£nh b√°o ngh·ªâ h∆∞u trong 6 th√°ng", "4 gi·ªù tr∆∞·ªõc", COLORS['warning']),
            ("contract", "L√™ VƒÉn C", "Gia h·∫°n h·ª£p ƒë·ªìng th√†nh c√¥ng", "1 ng√†y tr∆∞·ªõc", COLORS['primary']),
            ("check", "Ph·∫°m Th·ªã D", "ƒê·ªß ƒëi·ªÅu ki·ªán b·ªï nhi·ªám Ph√≥ Tr∆∞·ªüng ph√≤ng", "2 ng√†y tr∆∞·ªõc", COLORS['success']),
            ("award", "Ho√†ng VƒÉn E", "ƒê·∫°t danh hi·ªáu Lao ƒë·ªông ti√™n ti·∫øn", "3 ng√†y tr∆∞·ªõc", "#8b5cf6"),
            ("people", "Nguy·ªÖn Th·ªã F", "Nh√¢n vi√™n m·ªõi ho√†n th√†nh th·ª≠ vi·ªác", "1 tu·∫ßn tr∆∞·ªõc", COLORS['primary'])
        ]
        
        for icon_key, name, action, time, color in activities:
            # Activity item container
            activity_item = ctk.CTkFrame(activities_content, fg_color=COLORS['surface'],
                                       border_width=1, border_color=COLORS['background'])
            activity_item.pack(fill="x", pady=5, padx=5)
            
            # Activity content
            activity_content = ctk.CTkFrame(activity_item, fg_color="transparent")
            activity_content.pack(fill="x", padx=15, pady=12)
            
            # Icon with colored background
            icon_frame = ctk.CTkFrame(activity_content, width=35, height=35, 
                                    fg_color=color, corner_radius=17)
            icon_frame.pack(side="left", padx=(0, 15))
            icon_frame.pack_propagate(False)
            
            icon = ctk.CTkLabel(icon_frame, text=ICONS[icon_key], 
                              font=ctk.CTkFont(size=12), text_color="white")
            icon.pack(expand=True)
            
            # Text content
            text_frame = ctk.CTkFrame(activity_content, fg_color="transparent")
            text_frame.pack(side="left", fill="x", expand=True)
            
            name_label = ctk.CTkLabel(text_frame, text=name,
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
            name_label.pack(anchor="w")
            
            action_label = ctk.CTkLabel(text_frame, text=action,
                                      font=ctk.CTkFont(size=11),
                                      text_color=COLORS['text_secondary'])
            action_label.pack(anchor="w")
            
            # Time
            time_label = ctk.CTkLabel(activity_content, text=time,
                                    font=ctk.CTkFont(size=10),
                                    text_color=COLORS['text_secondary'])
            time_label.pack(side="right", padx=(15, 0))
    
    def clear_main_content(self):
        """Clear main content area"""
        for widget in self.main_content.winfo_children():
            widget.destroy()
    
    def show_employee_search(self):
        """Show employee search interface"""
        self.clear_main_content()
        
        # Title
        title = ctk.CTkLabel(self.main_content, text="üë• Tra c·ª©u th√¥ng tin nh√¢n s·ª±", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        # Search frame
        search_frame = ctk.CTkFrame(self.main_content)
        search_frame.pack(fill="x", padx=20, pady=10)
        
        search_label = ctk.CTkLabel(search_frame, text="üîç Nh·∫≠p t√™n nh√¢n vi√™n c·∫ßn t√¨m:")
        search_label.pack(pady=10)
        
        self.search_entry = ctk.CTkEntry(search_frame, width=300, placeholder_text="VD: Nguy·ªÖn VƒÉn A")
        self.search_entry.pack(pady=5)
        
        search_btn = ctk.CTkButton(search_frame, text="üîç T√¨m ki·∫øm", 
                                 command=self.search_employee)
        search_btn.pack(pady=10)
        
        # Results frame
        self.results_frame = ctk.CTkFrame(self.main_content)
        self.results_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Bind Enter key
        self.search_entry.bind("<Return>", lambda e: self.search_employee())
    
    def search_employee(self):
        """Search for employee"""
        search_term = self.search_entry.get().strip()
        if not search_term:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n c·∫ßn t√¨m!")
            return
            
        # Clear previous results
        for widget in self.results_frame.winfo_children():
            widget.destroy()
            
        # Search in database
        self.cursor.execute('''
            SELECT * FROM employees 
            WHERE full_name LIKE ? OR employee_code LIKE ?
            ORDER BY full_name
        ''', (f'%{search_term}%', f'%{search_term}%'))
        
        results = self.cursor.fetchall()
        
        if not results:
            no_result = ctk.CTkLabel(self.results_frame, text="‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ph√π h·ª£p", 
                                   font=ctk.CTkFont(size=14))
            no_result.pack(pady=20)
            return
        
        # Show results
        for emp in results:
            self.display_employee_result(emp)
    
    def display_employee_result(self, employee):
        """Display employee search result"""
        emp_frame = ctk.CTkFrame(self.results_frame)
        emp_frame.pack(fill="x", padx=10, pady=10)
        
        # Employee info
        info_text = f"‚úÖ {employee[2]} ({employee[1]})\nüìç {employee[8]} - {employee[9]}\nüìû {employee[17]} | üìß {employee[18]}"
        
        info_label = ctk.CTkLabel(emp_frame, text=info_text, 
                                font=ctk.CTkFont(size=12), justify="left")
        info_label.pack(side="left", padx=15, pady=15)
        
        # Action buttons
        btn_frame = ctk.CTkFrame(emp_frame)
        btn_frame.pack(side="right", padx=15, pady=10)
        
        detail_btn = ctk.CTkButton(btn_frame, text="üìã Chi ti·∫øt", width=100,
                                 command=lambda: self.show_employee_detail(employee))
        detail_btn.pack(pady=5)
        
        export_btn = ctk.CTkButton(btn_frame, text="üìÑ Xu·∫•t Word", width=100,
                                 command=lambda: self.export_employee_word(employee))
        export_btn.pack(pady=5)
    
    def show_employee_detail(self, employee):
        """Show detailed employee information"""
        # Create new window for employee details
        detail_window = ctk.CTkToplevel(self.root)
        detail_window.title(f"Chi ti·∫øt nh√¢n vi√™n - {employee[2]}")
        detail_window.geometry("800x600")
        
        # Employee details content
        content = ctk.CTkScrollableFrame(detail_window)
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title = ctk.CTkLabel(content, text=f"üë§ {employee[2]}", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=10)
        
        # Personal info
        personal_frame = ctk.CTkFrame(content)
        personal_frame.pack(fill="x", pady=10)
        
        personal_title = ctk.CTkLabel(personal_frame, text="üìã Th√¥ng tin c√° nh√¢n", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        personal_title.pack(pady=10)
        
        personal_info = f"""
        M√£ nh√¢n vi√™n: {employee[1]}
        H·ªç t√™n: {employee[2]}
        Ng√†y sinh: {employee[3]}
        Gi·ªõi t√≠nh: {employee[4]}
        D√¢n t·ªôc: {employee[5]}
        T√¥n gi√°o: {employee[6]}
        Qu√™ qu√°n: {employee[7]}
        ƒêi·ªán tho·∫°i: {employee[17]}
        Email: {employee[18]}
        """
        
        personal_label = ctk.CTkLabel(personal_frame, text=personal_info, 
                                    font=ctk.CTkFont(size=11), justify="left")
        personal_label.pack(padx=20, pady=10)
        
        # Work info
        work_frame = ctk.CTkFrame(content)
        work_frame.pack(fill="x", pady=10)
        
        work_title = ctk.CTkLabel(work_frame, text="üíº Th√¥ng tin c√¥ng vi·ªác", 
                                font=ctk.CTkFont(size=16, weight="bold"))
        work_title.pack(pady=10)
        
        work_info = f"""
        Ch·ª©c v·ª•: {employee[8]}
        ƒê∆°n v·ªã: {employee[9]}
        Ng√†y v√†o ƒê·∫£ng: {employee[10]}
        Tr√¨nh ƒë·ªô LLCT: {employee[11]}
        Tr√¨nh ƒë·ªô chuy√™n m√¥n: {employee[12]} {employee[13]}
        Tr∆∞·ªùng: {employee[14]}
        L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
        Ng·∫°ch/H·ªá s·ªë: {employee[16]}
        Ng√†y b·∫Øt ƒë·∫ßu: {employee[19]}
        Tr·∫°ng th√°i: {employee[20]}
        """
        
        work_label = ctk.CTkLabel(work_frame, text=work_info, 
                                font=ctk.CTkFont(size=11), justify="left")
        work_label.pack(padx=20, pady=10)
    
    def export_employee_word(self, employee):
        """Export employee info to Word document"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialname=f"ThongTin_{employee[2].replace(' ', '_')}.docx"
            )
            
            if filename:
                # Create simple text document (mock export)
                content = f"""
                TH√îNG TIN NH√ÇN VI√äN
                
                M√£ nh√¢n vi√™n: {employee[1]}
                H·ªç t√™n: {employee[2]}
                Ng√†y sinh: {employee[3]}
                Gi·ªõi t√≠nh: {employee[4]}
                Ch·ª©c v·ª•: {employee[8]}
                ƒê∆°n v·ªã: {employee[9]}
                L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
                
                Xu·∫•t ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')}
                """
                
                # Save as text file (in real app would use python-docx)
                with open(filename.replace('.docx', '.txt'), 'w', encoding='utf-8') as f:
                    f.write(content)
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t th√¥ng tin nh√¢n vi√™n ra file:\n{filename}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {str(e)}")
    
    def show_salary_management(self):
        """Show salary management interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üí∞ Qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        # Placeholder content
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ L·ªãch c·∫£nh b√°o theo qu√Ω\n"
                                  "‚Ä¢ Logic 36/24 th√°ng\n"
                                  "‚Ä¢ Ph·ª• c·∫•p th√¢m ni√™n 5% + 1%/nƒÉm\n"
                                  "‚Ä¢ Xu·∫•t 3 file Word + Excel",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_retirement_tracking(self):
        """Show retirement tracking interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚è∞ Theo d√µi ngh·ªâ h∆∞u", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ C·∫£nh b√°o 6 th√°ng (th√¥ng b√°o)\n"
                                  "‚Ä¢ C·∫£nh b√°o 3 th√°ng (quy·∫øt ƒë·ªãnh)\n"
                                  "‚Ä¢ N√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n\n"
                                  "‚Ä¢ Xu·∫•t Word th√¥ng b√°o & quy·∫øt ƒë·ªãnh",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_planning_check(self):
        """Show planning check interface"""  
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìã Ki·ªÉm tra quy ho·∫°ch", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra tu·ªïi trong quy ho·∫°ch\n"
                                  "‚Ä¢ Quota checking theo v·ªã tr√≠\n"
                                  "‚Ä¢ Bi·ªÉu ƒë·ªì ph√¢n t√≠ch\n"
                                  "‚Ä¢ C√†i ƒë·∫∑t gi·ªõi h·∫°n tu·ªïi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_work_history(self):
        """Show work history interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üíº Qu√° tr√¨nh c√¥ng t√°c", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Timeline view\n"
                                  "‚Ä¢ Th√™m/S·ª≠a/X√≥a giai ƒëo·∫°n\n"
                                  "‚Ä¢ Xu·∫•t Word/Excel",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_contracts(self):
        """Show contracts interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìÑ H·ª£p ƒë·ªìng lao ƒë·ªông", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Qu·∫£n l√Ω BKS + nh√¢n vi√™n\n"
                                  "‚Ä¢ C·∫£nh b√°o h·∫øt h·∫°n\n"
                                  "‚Ä¢ Gia h·∫°n/T·∫°o m·ªõi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_appointment_check(self):
        """Show appointment check interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚úÖ ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán\n"
                                  "‚Ä¢ C·∫£nh b√°o b·ªï nhi·ªám l·∫°i 90 ng√†y\n"
                                  "‚Ä¢ Th·ªëng k√™ v√† b√°o c√°o",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_award_check(self):
        """Show award check interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üèÜ ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Ki·ªÉm tra ti√™u ch√≠ khen th∆∞·ªüng\n"
                                  "‚Ä¢ ƒê√°nh gi√° ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán\n"
                                  "‚Ä¢ ƒê·ªÅ xu·∫•t khen th∆∞·ªüng",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_early_salary(self):
        """Show early salary interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="‚ö° N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Qu·∫£n l√Ω ƒë·ªÅ xu·∫•t\n"
                                  "‚Ä¢ Ph√™ duy·ªát th√†nh t√≠ch\n"
                                  "‚Ä¢ Xu·∫•t quy·∫øt ƒë·ªãnh",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_reports(self):
        """Show reports interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üìä B√°o c√°o th·ªëng k√™", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Th·ªëng k√™ to√†n di·ªán\n"
                                  "‚Ä¢ Ph√¢n t√≠ch th√¥i vi·ªác\n"
                                  "‚Ä¢ C∆° c·∫•u nh√¢n s·ª±\n"
                                  "‚Ä¢ Charts t∆∞∆°ng t√°c",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def show_insurance(self):
        """Show insurance interface"""
        self.clear_main_content()
        
        title = ctk.CTkLabel(self.main_content, text="üè• B√°o b·∫£o hi·ªÉm", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        content = ctk.CTkLabel(self.main_content, 
                             text="üîß Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...\n\n"
                                  "S·∫Ω bao g·ªìm:\n"
                                  "‚Ä¢ Nh·∫Øc nh·ªü BHXH\n"
                                  "‚Ä¢ Xu·∫•t Excel\n"
                                  "‚Ä¢ Qu·∫£n l√Ω thay ƒë·ªïi",
                             font=ctk.CTkFont(size=14))
        content.pack(expand=True)
    
    def handle_logout(self):
        """Handle user logout"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?"):
            self.current_user = None
            self.is_logged_in = False
            self.show_login_screen()
    
    def run(self):
        """Run the application"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def on_closing(self):
        """Handle application closing"""
        if hasattr(self, 'conn'):
            self.conn.close()
        self.root.destroy()

if __name__ == "__main__":
    try:
        app = HRMSDesktop()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng...")
