"""
HRMS Desktop Application - H·ªá th·ªëng Qu·∫£n l√Ω Nh√¢n s·ª±
Frontend & Backend 100% Python v·ªõi CustomTkinter GUI
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import json
import os
import sys
from PIL import Image, ImageTk
import threading
import webbrowser

# Microsoft Fluent Design Colors
COLORS = {
    'primary': '#0078d4',      # Microsoft Blue
    'secondary': '#106ebe',     # Darker Blue
    'success': '#107c10',       # Microsoft Green  
    'warning': '#ff8c00',       # Microsoft Orange
    'error': '#d13438',         # Microsoft Red
    'background': '#f3f2f1',    # Microsoft Light Gray
    'surface': '#ffffff',       # White
    'text': '#323130',          # Microsoft Dark Gray
    'text_secondary': '#605e5c' # Microsoft Medium Gray
}

# Import business logic
try:
    from models_streamlit import *
    from utils_streamlit import *
except ImportError:
    print("‚ö†Ô∏è Business logic modules not found. Creating mock data...")

# Microsoft Fluent Design Theme
ctk.set_appearance_mode("light")  # Microsoft uses light theme primarily
ctk.set_default_color_theme("blue")  # Microsoft Blue theme

# Microsoft-style Icons (Text-based for professional look)
ICONS = {
    'home': 'üè†',
    'people': 'üë•', 
    'salary': 'üí∞',
    'time': '‚è∞',
    'planning': 'üìã',
    'work': 'üíº',
    'contract': 'üìÑ',
    'check': '‚úÖ',
    'award': 'üèÜ',
    'fast': '‚ö°',
    'chart': 'üìä',
    'health': 'üè•',
    'settings': '‚öôÔ∏è',
    'help': '‚ùì',
    'fullscreen': '‚õ∂',
    'logout': '‚Ü™Ô∏è',
    'search': 'üîç',
    'export': 'üì§',
    'info': '‚ÑπÔ∏è'
}

# Help texts for each function (Microsoft-style helpful descriptions)
HELP_TEXTS = {
    'home': 'Xem t·ªïng quan th·ªëng k√™ v√† ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y c·ªßa h·ªá th·ªëng',
    'employee_search': 'T√¨m ki·∫øm v√† xem chi ti·∫øt th√¥ng tin c·ªßa nh√¢n vi√™n theo t√™n ho·∫∑c m√£',
    'salary_mgmt': 'Qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥ theo quy ƒë·ªãnh 36/24 th√°ng v√† ph·ª• c·∫•p th√¢m ni√™n',
    'retirement': 'Theo d√µi ngh·ªâ h∆∞u, c·∫£nh b√°o tr∆∞·ªõc 6 th√°ng v√† x·ª≠ l√Ω n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n',
    'planning': 'Ki·ªÉm tra quy ho·∫°ch c√°n b·ªô theo ƒë·ªô tu·ªïi v√† quota t·ª´ng v·ªã tr√≠',
    'work_history': 'Qu·∫£n l√Ω timeline qu√° tr√¨nh c√¥ng t√°c, th√™m/s·ª≠a/x√≥a c√°c giai ƒëo·∫°n',
    'contracts': 'Qu·∫£n l√Ω h·ª£p ƒë·ªìng lao ƒë·ªông cho Ban ki·ªÉm so√°t v√† nh√¢n vi√™n, c·∫£nh b√°o h·∫øt h·∫°n',
    'appointment': 'Ki·ªÉm tra ƒë·∫ßy ƒë·ªß ƒëi·ªÅu ki·ªán b·ªï nhi·ªám v√† c·∫£nh b√°o b·ªï nhi·ªám l·∫°i sau 90 ng√†y',
    'awards': 'Xem ƒëi·ªÅu ki·ªán khen th∆∞·ªüng v√† ƒë√°nh gi√° c√°c ti√™u ch√≠ c·∫ßn thi·∫øt',
    'early_salary': 'Qu·∫£n l√Ω n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n do l·∫≠p th√†nh t√≠ch xu·∫•t s·∫Øc',
    'reports': 'Xem b√°o c√°o th·ªëng k√™ to√†n di·ªán v√† ph√¢n t√≠ch c∆° c·∫•u nh√¢n s·ª±',
    'insurance': 'Nh·∫Øc nh·ªü v√† xu·∫•t Excel b√°o c√°o b·∫£o hi·ªÉm x√£ h·ªôi'
}

class HRMSDesktop:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Microsoft HRMS - Human Resource Management System")
        
        # Set larger default size and make fully resizable
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # Start with 90% of screen size
        start_width = int(screen_width * 0.9)
        start_height = int(screen_height * 0.9)
        
        self.root.geometry(f"{start_width}x{start_height}")
        self.root.resizable(True, True)
        
        # Enable maximize button and fullscreen capability
        self.root.state('normal')  # Allow maximize
        self.is_fullscreen = False
        
        # Bind F11 for fullscreen toggle
        self.root.bind('<F11>', self.toggle_fullscreen)
        self.root.bind('<Escape>', self.exit_fullscreen)
        
        # Center window
        self.center_window()
        
        # Initialize database
        self.init_database()
        
        # Session state
        self.current_user = None
        self.is_logged_in = False
        self.show_help = True  # Microsoft-style contextual help
        
        # Tooltip system for Microsoft-style guidance
        self.current_tooltip = None
        
        # Create main container
        self.main_container = ctk.CTkFrame(self.root)
        self.main_container.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Show login screen
        self.show_login_screen()
        
    def center_window(self):
        """Center window on screen"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
    
    def toggle_fullscreen(self, event=None):
        """Toggle fullscreen mode"""
        self.is_fullscreen = not self.is_fullscreen
        if self.is_fullscreen:
            self.root.attributes("-fullscreen", True)
        else:
            self.root.attributes("-fullscreen", False)
    
    def exit_fullscreen(self, event=None):
        """Exit fullscreen mode"""
        if self.is_fullscreen:
            self.is_fullscreen = False
            self.root.attributes("-fullscreen", False)
    
    def toggle_help(self):
        """Toggle help display in Microsoft style"""
        self.show_help = not self.show_help
        # Refresh current view to show/hide help
        if hasattr(self, 'current_function'):
            self.show_function_help(self.current_function)
        else:
            self.show_general_help()
    
    def show_function_help(self, function_key):
        """Show contextual help for current function"""
        if not self.show_help:
            return
            
        help_text = HELP_TEXTS.get(function_key, "Ch·ª©c nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")
        
        # Create or update help panel
        if hasattr(self, 'help_panel'):
            self.help_panel.destroy()
        
        self.help_panel = ctk.CTkFrame(self.main_content, height=60, fg_color=COLORS['background'])
        self.help_panel.pack(fill="x", pady=(0, 10))
        
        help_icon = ctk.CTkLabel(self.help_panel, text=ICONS['info'], 
                               font=ctk.CTkFont(size=14))
        help_icon.pack(side="left", padx=15, pady=15)
        
        help_label = ctk.CTkLabel(self.help_panel, text=help_text,
                                font=ctk.CTkFont(size=12),
                                text_color=COLORS['text'])
        help_label.pack(side="left", padx=10, pady=15)
    
    def show_general_help(self):
        """Show general help information"""
        if not self.show_help:
            return
            
        general_help = "Ch·ªçn m·ªôt ch·ª©c nƒÉng t·ª´ menu b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu. Hover v√†o c√°c n√∫t ƒë·ªÉ xem th√¥ng tin chi ti·∫øt."
        
        if hasattr(self, 'help_panel'):
            self.help_panel.destroy()
        
        self.help_panel = ctk.CTkFrame(self.main_content, height=60, fg_color=COLORS['background'])
        self.help_panel.pack(fill="x", pady=(0, 10))
        
        help_icon = ctk.CTkLabel(self.help_panel, text=ICONS['info'], 
                               font=ctk.CTkFont(size=14))
        help_icon.pack(side="left", padx=15, pady=15)
        
        help_label = ctk.CTkLabel(self.help_panel, text=general_help,
                                font=ctk.CTkFont(size=12),
                                text_color=COLORS['text'])
        help_label.pack(side="left", padx=10, pady=15)
    
    def init_database(self):
        """Initialize SQLite database"""
        try:
            self.conn = sqlite3.connect('hrms_desktop.db', check_same_thread=False)
            self.cursor = self.conn.cursor()
            
            # Create tables if not exist
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            self.cursor.execute('''
                CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    employee_code TEXT UNIQUE NOT NULL,
                    full_name TEXT NOT NULL,
                    birth_date DATE,
                    gender TEXT,
                    ethnicity TEXT DEFAULT 'Kinh',
                    religion TEXT DEFAULT 'Kh√¥ng',
                    hometown TEXT,
                    position TEXT,
                    department TEXT,
                    party_date DATE,
                    political_theory TEXT,
                    education_level TEXT,
                    major TEXT,
                    institution TEXT,
                    current_salary REAL,
                    salary_grade TEXT,
                    phone TEXT,
                    email TEXT,
                    start_date DATE,
                    status TEXT DEFAULT 'active',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Insert default admin user
            try:
                self.cursor.execute(
                    "INSERT INTO users (username, password) VALUES (?, ?)",
                    ("admin", "admin123")
                )
                self.conn.commit()
            except sqlite3.IntegrityError:
                pass  # User already exists
                
            # Insert sample employees if none exist
            self.cursor.execute("SELECT COUNT(*) FROM employees")
            if self.cursor.fetchone()[0] == 0:
                self.insert_sample_data()
                
        except Exception as e:
            messagebox.showerror("Database Error", f"L·ªói k·∫øt n·ªëi database: {str(e)}")
    
    def insert_sample_data(self):
        """Insert sample employee data"""
        sample_employees = [
            ("NV001", "Nguy·ªÖn VƒÉn A", "1985-06-15", "Nam", "Kinh", "Kh√¥ng", "H√† N·ªôi", 
             "Chuy√™n vi√™n ch√≠nh", "Ph√≤ng TCHC", "2010-05-10", "Trung c·∫•p", "Th·∫°c sƒ© Lu·∫≠t", 
             "Lu·∫≠t", "ƒêH Lu·∫≠t H√† N·ªôi", 7320000, "A2/3.45", "0901234567", "nguyenvana@company.vn", "2008-08-01"),
            ("NV002", "Tr·∫ßn Th·ªã B", "1990-03-20", "N·ªØ", "Kinh", "Kh√¥ng", "H√† N·ªôi",
             "Chuy√™n vi√™n", "Ph√≤ng TCKT", "2015-08-15", "S∆° c·∫•p", "C·ª≠ nh√¢n T√†i ch√≠nh",
             "T√†i ch√≠nh", "ƒêH Kinh t·∫ø Qu·ªëc d√¢n", 5781000, "A1/2.67", "0907654321", "tranthib@company.vn", "2012-03-01"),
            ("NV003", "L√™ VƒÉn C", "1978-12-10", "Nam", "Kinh", "Ph·∫≠t gi√°o", "H·∫£i Ph√≤ng",
             "Tr∆∞·ªüng ph√≤ng", "Ph√≤ng Kinh doanh", "2005-01-20", "Cao c·∫•p", "C·ª≠ nh√¢n Kinh t·∫ø",
             "Kinh t·∫ø", "ƒêH Th∆∞∆°ng m·∫°i", 9200000, "A3/4.2", "0912345678", "levanc@company.vn", "2000-06-01")
        ]
        
        for emp in sample_employees:
            try:
                self.cursor.execute('''
                    INSERT INTO employees (employee_code, full_name, birth_date, gender, ethnicity, 
                    religion, hometown, position, department, party_date, political_theory, 
                    education_level, major, institution, current_salary, salary_grade, phone, email, start_date)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', emp)
            except sqlite3.IntegrityError:
                pass  # Employee already exists
                
        self.conn.commit()
        
    def show_login_screen(self):
        """Show Microsoft-style login interface"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Main login container
        login_container = ctk.CTkFrame(self.main_container, fg_color=COLORS['surface'])
        login_container.pack(fill="both", expand=True)
        
        # Left panel - Welcome & Branding
        left_panel = ctk.CTkFrame(login_container, width=600, fg_color=COLORS['primary'])
        left_panel.pack(side="left", fill="y", padx=20, pady=20)
        left_panel.pack_propagate(False)
        
        # Microsoft-style welcome
        welcome_title = ctk.CTkLabel(left_panel, text="Ch√†o m·ª´ng ƒë·∫øn v·ªõi", 
                                   font=ctk.CTkFont(size=18), text_color="white")
        welcome_title.pack(pady=(50, 10))
        
        app_title = ctk.CTkLabel(left_panel, text="Microsoft HRMS", 
                               font=ctk.CTkFont(size=36, weight="bold"), text_color="white")
        app_title.pack(pady=10)
        
        app_subtitle = ctk.CTkLabel(left_panel, text="Human Resource Management System", 
                                  font=ctk.CTkFont(size=16), text_color="white")
        app_subtitle.pack(pady=5)
        
        description = ctk.CTkLabel(left_panel, 
                                 text="H·ªá th·ªëng qu·∫£n l√Ω nh√¢n s·ª± hi·ªán ƒë·∫°i\nv·ªõi giao di·ªán Microsoft Fluent Design\n\n"
                                      "‚úì Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n\n"
                                      "‚úì Theo d√µi n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥\n"
                                      "‚úì B√°o c√°o v√† th·ªëng k√™\n"
                                      "‚úì Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng",
                                 font=ctk.CTkFont(size=13), text_color="white",
                                 justify="left")
        description.pack(pady=30, padx=40)
        
        # Right panel - Login form
        right_panel = ctk.CTkFrame(login_container, fg_color=COLORS['surface'])
        right_panel.pack(side="right", fill="both", expand=True, padx=20, pady=20)
        
        # Login form container
        login_frame = ctk.CTkFrame(right_panel, width=400)
        login_frame.place(relx=0.5, rely=0.5, anchor="center")
        
        # Login header
        login_header = ctk.CTkLabel(login_frame, text="ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n", 
                                  font=ctk.CTkFont(size=24, weight="bold"),
                                  text_color=COLORS['text'])
        login_header.pack(pady=(30, 20))
        
        help_text = ctk.CTkLabel(login_frame, text="Nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c", 
                               font=ctk.CTkFont(size=12),
                               text_color=COLORS['text_secondary'])
        help_text.pack(pady=(0, 30))
        
        # Username field with Microsoft-style labeling
        username_label = ctk.CTkLabel(login_frame, text="T√™n ƒëƒÉng nh·∫≠p", 
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
        username_label.pack(anchor="w", padx=50, pady=(0, 5))
        
        self.username_entry = ctk.CTkEntry(login_frame, placeholder_text="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p", 
                                         width=300, height=35,
                                         font=ctk.CTkFont(size=13))
        self.username_entry.pack(pady=(0, 20), padx=50)
        self.username_entry.insert(0, "admin")  # Default username
        
        # Password field
        password_label = ctk.CTkLabel(login_frame, text="M·∫≠t kh·∫©u", 
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
        password_label.pack(anchor="w", padx=50, pady=(0, 5))
        
        self.password_entry = ctk.CTkEntry(login_frame, placeholder_text="Nh·∫≠p m·∫≠t kh·∫©u", 
                                         show="*", width=300, height=35,
                                         font=ctk.CTkFont(size=13))
        self.password_entry.pack(pady=(0, 30), padx=50)
        self.password_entry.insert(0, "admin123")  # Default password
        
        # Login button - Microsoft style
        login_btn = ctk.CTkButton(login_frame, text="ƒêƒÉng nh·∫≠p", 
                                command=self.handle_login, width=300, height=45,
                                font=ctk.CTkFont(size=14, weight="bold"),
                                fg_color=COLORS['primary'], hover_color=COLORS['secondary'])
        login_btn.pack(pady=(0, 20), padx=50)
        
        # Demo credentials info with Microsoft styling
        demo_frame = ctk.CTkFrame(login_frame, fg_color=COLORS['background'], corner_radius=8)
        demo_frame.pack(fill="x", padx=50, pady=20)
        
        demo_title = ctk.CTkLabel(demo_frame, text="T√†i kho·∫£n demo",
                                font=ctk.CTkFont(size=11, weight="bold"),
                                text_color=COLORS['text'])
        demo_title.pack(pady=(10, 5))
        
        credentials = ctk.CTkLabel(demo_frame, 
                                 text="T√™n ƒëƒÉng nh·∫≠p: admin\nM·∫≠t kh·∫©u: admin123",
                                 font=ctk.CTkFont(size=10),
                                 text_color=COLORS['text_secondary'])
        credentials.pack(pady=(0, 10))
        
        # Help section - Microsoft style
        help_frame = ctk.CTkFrame(login_frame, fg_color="transparent")
        help_frame.pack(fill="x", padx=50, pady=10)
        
        help_icon = ctk.CTkLabel(help_frame, text=ICONS['help'], font=ctk.CTkFont(size=12))
        help_icon.pack(side="left")
        
        help_text = ctk.CTkLabel(help_frame, 
                               text="F11: To√†n m√†n h√¨nh | ESC: Tho√°t | Enter: ƒêƒÉng nh·∫≠p",
                               font=ctk.CTkFont(size=9),
                               text_color=COLORS['text_secondary'])
        help_text.pack(side="left", padx=(5, 0))
        
        # Bind Enter key
        self.password_entry.bind("<Return>", lambda e: self.handle_login())
        
    def handle_login(self):
        """Handle user login"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
            
        # Check credentials
        self.cursor.execute("SELECT * FROM users WHERE username = ? AND password = ?", 
                          (username, password))
        user = self.cursor.fetchone()
        
        if user:
            self.current_user = username
            self.is_logged_in = True
            self.show_dashboard()
        else:
            messagebox.showerror("L·ªói ƒëƒÉng nh·∫≠p", "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")
    
    def show_dashboard(self):
        """Show main dashboard"""
        # Clear main container
        for widget in self.main_container.winfo_children():
            widget.destroy()
            
        # Create header
        self.create_header()
        
        # Create main content area
        content_frame = ctk.CTkFrame(self.main_container)
        content_frame.pack(fill="both", expand=True, pady=10)
        
        # Create sidebar navigation
        self.create_sidebar(content_frame)
        
        # Create main content
        self.main_content = ctk.CTkFrame(content_frame)
        self.main_content.pack(side="right", fill="both", expand=True, padx=(10, 0))
        
        # Show initial dashboard content
        self.show_home_dashboard()
    
    def create_header(self):
        """Create Microsoft-style header with user info and controls"""
        header = ctk.CTkFrame(self.main_container, height=70, fg_color=COLORS['surface'])
        header.pack(fill="x", pady=(0, 10))
        
        # Left side - App branding and user welcome
        left_frame = ctk.CTkFrame(header, fg_color="transparent")
        left_frame.pack(side="left", padx=20, pady=15)
        
        app_name = ctk.CTkLabel(left_frame, text="Microsoft HRMS", 
                              font=ctk.CTkFont(size=16, weight="bold"),
                              text_color=COLORS['primary'])
        app_name.pack(side="left")
        
        separator = ctk.CTkLabel(left_frame, text="‚Ä¢", 
                               font=ctk.CTkFont(size=14),
                               text_color=COLORS['text_secondary'])
        separator.pack(side="left", padx=10)
        
        welcome = ctk.CTkLabel(left_frame, text=f"Xin ch√†o, {self.current_user}", 
                             font=ctk.CTkFont(size=14),
                             text_color=COLORS['text'])
        welcome.pack(side="left")
        
        # Right side - Controls with Microsoft styling
        controls_frame = ctk.CTkFrame(header, fg_color="transparent")
        controls_frame.pack(side="right", padx=20, pady=15)
        
        # Help toggle button
        help_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['help']} Tr·ª£ gi√∫p", 
                               command=self.toggle_help, width=100, height=30,
                               font=ctk.CTkFont(size=11),
                               fg_color="transparent", 
                               text_color=COLORS['primary'],
                               hover_color=COLORS['background'])
        help_btn.pack(side="left", padx=(0, 10))
        
        # Fullscreen button - Microsoft style
        fullscreen_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['fullscreen']} To√†n m√†n h√¨nh", 
                                     command=self.toggle_fullscreen, width=130, height=30,
                                     font=ctk.CTkFont(size=11),
                                     fg_color=COLORS['background'], 
                                     text_color=COLORS['text'],
                                     hover_color=COLORS['primary'])
        fullscreen_btn.pack(side="left", padx=(0, 10))
        
        # Logout button - Microsoft style
        logout_btn = ctk.CTkButton(controls_frame, text=f"{ICONS['logout']} ƒêƒÉng xu·∫•t", 
                                 command=self.handle_logout, width=110, height=30,
                                 font=ctk.CTkFont(size=11),
                                 fg_color=COLORS['error'], 
                                 hover_color="#b91c1c")
        logout_btn.pack(side="left")
        
    def create_sidebar(self, parent):
        """Create Microsoft-style navigation sidebar"""
        sidebar = ctk.CTkFrame(parent, width=320, fg_color=COLORS['surface'])
        sidebar.pack(side="left", fill="y", padx=(0, 10))
        sidebar.pack_propagate(False)
        
        # Sidebar header with Microsoft styling
        header_frame = ctk.CTkFrame(sidebar, height=80, fg_color=COLORS['primary'])
        header_frame.pack(fill="x", padx=10, pady=10)
        header_frame.pack_propagate(False)
        
        nav_title = ctk.CTkLabel(header_frame, text="Ch·ª©c nƒÉng ch√≠nh", 
                               font=ctk.CTkFont(size=18, weight="bold"),
                               text_color="white")
        nav_title.pack(pady=20)
        
        # Create scrollable frame for navigation buttons
        nav_scroll = ctk.CTkScrollableFrame(sidebar, width=280, height=600,
                                          fg_color="transparent")
        nav_scroll.pack(fill="both", expand=True, padx=15, pady=10)
        
        # Navigation buttons with Microsoft-style icons and help text
        nav_items = [
            ("home", "Trang ch·ªß", self.show_home_dashboard, 'home'),
            ("people", "Tra c·ª©u nh√¢n s·ª±", self.show_employee_search, 'employee_search'),
            ("salary", "N√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", self.show_salary_management, 'salary_mgmt'),
            ("time", "Theo d√µi ngh·ªâ h∆∞u", self.show_retirement_tracking, 'retirement'),
            ("planning", "Ki·ªÉm tra quy ho·∫°ch", self.show_planning_check, 'planning'),
            ("work", "Qu√° tr√¨nh c√¥ng t√°c", self.show_work_history, 'work_history'),
            ("contract", "H·ª£p ƒë·ªìng lao ƒë·ªông", self.show_contracts, 'contracts'),
            ("check", "ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", self.show_appointment_check, 'appointment'),
            ("award", "ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", self.show_award_check, 'awards'),
            ("fast", "N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", self.show_early_salary, 'early_salary'),
            ("chart", "B√°o c√°o th·ªëng k√™", self.show_reports, 'reports'),
            ("health", "B√°o b·∫£o hi·ªÉm", self.show_insurance, 'insurance')
        ]
        
        for icon_key, text, command, help_key in nav_items:
            # Create button frame for better control
            btn_frame = ctk.CTkFrame(nav_scroll, fg_color="transparent")
            btn_frame.pack(fill="x", pady=4, padx=5)
            
            # Main navigation button with Microsoft styling
            btn = ctk.CTkButton(btn_frame, 
                              text=f"{ICONS[icon_key]}  {text}", 
                              command=lambda c=command, h=help_key: self.nav_click(c, h),
                              width=260, height=45, anchor="w",
                              font=ctk.CTkFont(size=13),
                              fg_color="transparent",
                              text_color=COLORS['text'],
                              hover_color=COLORS['background'])
            btn.pack(fill="x")
            
            # Add hover tooltip (Microsoft-style help)
            self.create_tooltip(btn, HELP_TEXTS.get(help_key, ""))
    
    def nav_click(self, command, help_key):
        """Handle navigation click with help context"""
        self.current_function = help_key
        command()  # Execute the navigation command
        self.show_function_help(help_key)  # Show contextual help
    
    def create_tooltip(self, widget, text):
        """Create Microsoft-style tooltip for widget"""
        def on_enter(event):
            if hasattr(self, 'tooltip'):
                self.tooltip.destroy()
                
            self.tooltip = ctk.CTkToplevel()
            self.tooltip.wm_overrideredirect(True)
            self.tooltip.configure(fg_color=COLORS['text'])
            
            label = ctk.CTkLabel(self.tooltip, text=text,
                               font=ctk.CTkFont(size=10),
                               text_color="white",
                               fg_color=COLORS['text'])
            label.pack(padx=8, pady=4)
            
            # Position tooltip
            x = widget.winfo_rootx() + 20
            y = widget.winfo_rooty() - 30
            self.tooltip.geometry(f"+{x}+{y}")
        
        def on_leave(event):
            if hasattr(self, 'tooltip'):
                self.tooltip.destroy()
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)
    
    def show_home_dashboard(self):
        """Show Microsoft-style home dashboard"""
        self.clear_main_content()
        
        # Welcome section with Microsoft styling
        welcome_frame = ctk.CTkFrame(self.main_content, height=100, fg_color=COLORS['surface'])
        welcome_frame.pack(fill="x", padx=20, pady=20)
        welcome_frame.pack_propagate(False)
        
        # Welcome content
        welcome_content = ctk.CTkFrame(welcome_frame, fg_color="transparent")
        welcome_content.pack(expand=True, fill="both", padx=30, pady=20)
        
        welcome_title = ctk.CTkLabel(welcome_content, text="B·∫£ng ƒëi·ªÅu khi·ªÉn", 
                                   font=ctk.CTkFont(size=28, weight="bold"),
                                   text_color=COLORS['text'])
        welcome_title.pack(anchor="w")
        
        welcome_subtitle = ctk.CTkLabel(welcome_content, 
                                      text=f"Ch√†o m·ª´ng tr·ªü l·∫°i, {self.current_user}. ƒê√¢y l√† t·ªïng quan v·ªÅ h·ªá th·ªëng HRMS c·ªßa b·∫°n.",
                                      font=ctk.CTkFont(size=14),
                                      text_color=COLORS['text_secondary'])
        welcome_subtitle.pack(anchor="w", pady=(5, 0))
        
        # Statistics cards
        stats_frame = ctk.CTkFrame(self.main_content)
        stats_frame.pack(fill="x", padx=20, pady=10)
        
        # Get statistics from database
        self.cursor.execute("SELECT COUNT(*) FROM employees WHERE status = 'active'")
        total_employees = self.cursor.fetchone()[0]
        
        # Microsoft-style statistics cards
        stats_data = [
            ("T·ªïng nh√¢n s·ª±", str(total_employees), COLORS['primary'], "people"),
            ("S·∫Øp ngh·ªâ h∆∞u", "12", COLORS['warning'], "time"), 
            ("ƒê·∫øn k·ª≥ n√¢ng l∆∞∆°ng", "25", COLORS['success'], "salary"),
            ("H·ª£p ƒë·ªìng h·∫øt h·∫°n", "6", COLORS['error'], "contract"),
            ("Khen th∆∞·ªüng th√°ng", "8", "#8b5cf6", "award"),
            ("Quy ho·∫°ch h·∫øt h·∫°n", "15", "#f59e0b", "planning")
        ]
        
        # Create Microsoft-style cards in 2 rows x 3 columns
        for i, (label, value, color, icon_key) in enumerate(stats_data):
            row = i // 3
            col = i % 3
            
            # Card container with Microsoft Fluent Design
            card = ctk.CTkFrame(stats_frame, height=140, fg_color=COLORS['surface'],
                              border_width=1, border_color=COLORS['background'])
            card.grid(row=row, column=col, padx=12, pady=12, sticky="ew")
            
            # Card header with icon and color accent
            card_header = ctk.CTkFrame(card, height=40, fg_color=color)
            card_header.pack(fill="x", padx=0, pady=0)
            card_header.pack_propagate(False)
            
            icon = ctk.CTkLabel(card_header, text=ICONS[icon_key], 
                              font=ctk.CTkFont(size=18), text_color="white")
            icon.pack(side="left", padx=15, pady=10)
            
            # Card content
            content_frame = ctk.CTkFrame(card, fg_color="transparent")
            content_frame.pack(fill="both", expand=True, padx=20, pady=15)
            
            value_label = ctk.CTkLabel(content_frame, text=value,
                                     font=ctk.CTkFont(size=32, weight="bold"),
                                     text_color=COLORS['text'])
            value_label.pack(anchor="w")
            
            label_label = ctk.CTkLabel(content_frame, text=label,
                                     font=ctk.CTkFont(size=12),
                                     text_color=COLORS['text_secondary'])
            label_label.pack(anchor="w", pady=(5, 0))
        
        # Configure grid for responsive layout
        for i in range(3):
            stats_frame.grid_columnconfigure(i, weight=1)
        for i in range(2):
            stats_frame.grid_rowconfigure(i, weight=1)
        
        # Recent activities with Microsoft styling
        activities_frame = ctk.CTkFrame(self.main_content, fg_color=COLORS['surface'])
        activities_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Activities header
        activities_header = ctk.CTkFrame(activities_frame, height=60, fg_color=COLORS['background'])
        activities_header.pack(fill="x", padx=0, pady=0)
        activities_header.pack_propagate(False)
        
        activities_title = ctk.CTkLabel(activities_header, text="Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y", 
                                      font=ctk.CTkFont(size=18, weight="bold"),
                                      text_color=COLORS['text'])
        activities_title.pack(side="left", padx=20, pady=15)
        
        # View all button
        view_all_btn = ctk.CTkButton(activities_header, text="Xem t·∫•t c·∫£",
                                   width=100, height=30,
                                   font=ctk.CTkFont(size=11),
                                   fg_color="transparent",
                                   text_color=COLORS['primary'],
                                   hover_color=COLORS['background'])
        view_all_btn.pack(side="right", padx=20, pady=15)
        
        # Activities content
        activities_content = ctk.CTkScrollableFrame(activities_frame, height=300)
        activities_content.pack(fill="both", expand=True, padx=15, pady=15)
        
        # Activities list with Microsoft-style items
        activities = [
            ("salary", "Nguy·ªÖn VƒÉn A", "N√¢ng l∆∞∆°ng t·ª´ A2/3.2 l√™n A2/3.45", "2 gi·ªù tr∆∞·ªõc", COLORS['success']),
            ("time", "Tr·∫ßn Th·ªã B", "C·∫£nh b√°o ngh·ªâ h∆∞u trong 6 th√°ng", "4 gi·ªù tr∆∞·ªõc", COLORS['warning']),
            ("contract", "L√™ VƒÉn C", "Gia h·∫°n h·ª£p ƒë·ªìng th√†nh c√¥ng", "1 ng√†y tr∆∞·ªõc", COLORS['primary']),
            ("check", "Ph·∫°m Th·ªã D", "ƒê·ªß ƒëi·ªÅu ki·ªán b·ªï nhi·ªám Ph√≥ Tr∆∞·ªüng ph√≤ng", "2 ng√†y tr∆∞·ªõc", COLORS['success']),
            ("award", "Ho√†ng VƒÉn E", "ƒê·∫°t danh hi·ªáu Lao ƒë·ªông ti√™n ti·∫øn", "3 ng√†y tr∆∞·ªõc", "#8b5cf6"),
            ("people", "Nguy·ªÖn Th·ªã F", "Nh√¢n vi√™n m·ªõi ho√†n th√†nh th·ª≠ vi·ªác", "1 tu·∫ßn tr∆∞·ªõc", COLORS['primary'])
        ]
        
        for icon_key, name, action, time, color in activities:
            # Activity item container
            activity_item = ctk.CTkFrame(activities_content, fg_color=COLORS['surface'],
                                       border_width=1, border_color=COLORS['background'])
            activity_item.pack(fill="x", pady=5, padx=5)
            
            # Activity content
            activity_content = ctk.CTkFrame(activity_item, fg_color="transparent")
            activity_content.pack(fill="x", padx=15, pady=12)
            
            # Icon with colored background
            icon_frame = ctk.CTkFrame(activity_content, width=35, height=35, 
                                    fg_color=color, corner_radius=17)
            icon_frame.pack(side="left", padx=(0, 15))
            icon_frame.pack_propagate(False)
            
            icon = ctk.CTkLabel(icon_frame, text=ICONS[icon_key], 
                              font=ctk.CTkFont(size=12), text_color="white")
            icon.pack(expand=True)
            
            # Text content
            text_frame = ctk.CTkFrame(activity_content, fg_color="transparent")
            text_frame.pack(side="left", fill="x", expand=True)
            
            name_label = ctk.CTkLabel(text_frame, text=name,
                                    font=ctk.CTkFont(size=12, weight="bold"),
                                    text_color=COLORS['text'])
            name_label.pack(anchor="w")
            
            action_label = ctk.CTkLabel(text_frame, text=action,
                                      font=ctk.CTkFont(size=11),
                                      text_color=COLORS['text_secondary'])
            action_label.pack(anchor="w")
            
            # Time
            time_label = ctk.CTkLabel(activity_content, text=time,
                                    font=ctk.CTkFont(size=10),
                                    text_color=COLORS['text_secondary'])
            time_label.pack(side="right", padx=(15, 0))
    
    def clear_main_content(self):
        """Clear main content area"""
        for widget in self.main_content.winfo_children():
            widget.destroy()
    
    def show_employee_search(self):
        """Show employee search interface"""
        self.clear_main_content()
        
        # Title
        title = ctk.CTkLabel(self.main_content, text="üë• Tra c·ª©u th√¥ng tin nh√¢n s·ª±", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=20)
        
        # Search frame
        search_frame = ctk.CTkFrame(self.main_content)
        search_frame.pack(fill="x", padx=20, pady=10)
        
        search_label = ctk.CTkLabel(search_frame, text="üîç Nh·∫≠p t√™n nh√¢n vi√™n c·∫ßn t√¨m:")
        search_label.pack(pady=10)
        
        self.search_entry = ctk.CTkEntry(search_frame, width=300, placeholder_text="VD: Nguy·ªÖn VƒÉn A")
        self.search_entry.pack(pady=5)
        
        search_btn = ctk.CTkButton(search_frame, text="üîç T√¨m ki·∫øm", 
                                 command=self.search_employee)
        search_btn.pack(pady=10)
        
        # Results frame
        self.results_frame = ctk.CTkFrame(self.main_content)
        self.results_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Bind Enter key
        self.search_entry.bind("<Return>", lambda e: self.search_employee())
    
    def search_employee(self):
        """Search for employee"""
        search_term = self.search_entry.get().strip()
        if not search_term:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p t√™n c·∫ßn t√¨m!")
            return
            
        # Clear previous results
        for widget in self.results_frame.winfo_children():
            widget.destroy()
            
        # Search in database
        self.cursor.execute('''
            SELECT * FROM employees 
            WHERE full_name LIKE ? OR employee_code LIKE ?
            ORDER BY full_name
        ''', (f'%{search_term}%', f'%{search_term}%'))
        
        results = self.cursor.fetchall()
        
        if not results:
            no_result = ctk.CTkLabel(self.results_frame, text="‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ph√π h·ª£p", 
                                   font=ctk.CTkFont(size=14))
            no_result.pack(pady=20)
            return
        
        # Show results
        for emp in results:
            self.display_employee_result(emp)
    
    def display_employee_result(self, employee):
        """Display employee search result"""
        emp_frame = ctk.CTkFrame(self.results_frame)
        emp_frame.pack(fill="x", padx=10, pady=10)
        
        # Employee info
        info_text = f"‚úÖ {employee[2]} ({employee[1]})\nüìç {employee[8]} - {employee[9]}\nüìû {employee[17]} | üìß {employee[18]}"
        
        info_label = ctk.CTkLabel(emp_frame, text=info_text, 
                                font=ctk.CTkFont(size=12), justify="left")
        info_label.pack(side="left", padx=15, pady=15)
        
        # Action buttons
        btn_frame = ctk.CTkFrame(emp_frame)
        btn_frame.pack(side="right", padx=15, pady=10)
        
        detail_btn = ctk.CTkButton(btn_frame, text="üìã Chi ti·∫øt", width=100,
                                 command=lambda: self.show_employee_detail(employee))
        detail_btn.pack(pady=5)
        
        export_btn = ctk.CTkButton(btn_frame, text="üìÑ Xu·∫•t Word", width=100,
                                 command=lambda: self.export_employee_word(employee))
        export_btn.pack(pady=5)
    
    def show_employee_detail(self, employee):
        """Show detailed employee information"""
        # Create new window for employee details
        detail_window = ctk.CTkToplevel(self.root)
        detail_window.title(f"Chi ti·∫øt nh√¢n vi√™n - {employee[2]}")
        detail_window.geometry("800x600")
        
        # Employee details content
        content = ctk.CTkScrollableFrame(detail_window)
        content.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title = ctk.CTkLabel(content, text=f"üë§ {employee[2]}", 
                           font=ctk.CTkFont(size=20, weight="bold"))
        title.pack(pady=10)
        
        # Personal info
        personal_frame = ctk.CTkFrame(content)
        personal_frame.pack(fill="x", pady=10)
        
        personal_title = ctk.CTkLabel(personal_frame, text="üìã Th√¥ng tin c√° nh√¢n", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        personal_title.pack(pady=10)
        
        personal_info = f"""
        M√£ nh√¢n vi√™n: {employee[1]}
        H·ªç t√™n: {employee[2]}
        Ng√†y sinh: {employee[3]}
        Gi·ªõi t√≠nh: {employee[4]}
        D√¢n t·ªôc: {employee[5]}
        T√¥n gi√°o: {employee[6]}
        Qu√™ qu√°n: {employee[7]}
        ƒêi·ªán tho·∫°i: {employee[17]}
        Email: {employee[18]}
        """
        
        personal_label = ctk.CTkLabel(personal_frame, text=personal_info, 
                                    font=ctk.CTkFont(size=11), justify="left")
        personal_label.pack(padx=20, pady=10)
        
        # Work info
        work_frame = ctk.CTkFrame(content)
        work_frame.pack(fill="x", pady=10)
        
        work_title = ctk.CTkLabel(work_frame, text="üíº Th√¥ng tin c√¥ng vi·ªác", 
                                font=ctk.CTkFont(size=16, weight="bold"))
        work_title.pack(pady=10)
        
        work_info = f"""
        Ch·ª©c v·ª•: {employee[8]}
        ƒê∆°n v·ªã: {employee[9]}
        Ng√†y v√†o ƒê·∫£ng: {employee[10]}
        Tr√¨nh ƒë·ªô LLCT: {employee[11]}
        Tr√¨nh ƒë·ªô chuy√™n m√¥n: {employee[12]} {employee[13]}
        Tr∆∞·ªùng: {employee[14]}
        L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
        Ng·∫°ch/H·ªá s·ªë: {employee[16]}
        Ng√†y b·∫Øt ƒë·∫ßu: {employee[19]}
        Tr·∫°ng th√°i: {employee[20]}
        """
        
        work_label = ctk.CTkLabel(work_frame, text=work_info, 
                                font=ctk.CTkFont(size=11), justify="left")
        work_label.pack(padx=20, pady=10)
    
    def export_employee_word(self, employee):
        """Export employee info to Word document"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialname=f"ThongTin_{employee[2].replace(' ', '_')}.docx"
            )
            
            if filename:
                # Create simple text document (mock export)
                content = f"""
                TH√îNG TIN NH√ÇN VI√äN
                
                M√£ nh√¢n vi√™n: {employee[1]}
                H·ªç t√™n: {employee[2]}
                Ng√†y sinh: {employee[3]}
                Gi·ªõi t√≠nh: {employee[4]}
                Ch·ª©c v·ª•: {employee[8]}
                ƒê∆°n v·ªã: {employee[9]}
                L∆∞∆°ng hi·ªán t·∫°i: {employee[15]:,.0f} VNƒê
                
                Xu·∫•t ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')}
                """
                
                # Save as text file (in real app would use python-docx)
                with open(filename.replace('.docx', '.txt'), 'w', encoding='utf-8') as f:
                    f.write(content)
                
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t th√¥ng tin nh√¢n vi√™n ra file:\n{filename}")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file: {str(e)}")
    
    def show_salary_management(self):
        """Show comprehensive salary management with 36/24 month logic"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color=COLORS['primary'])
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üí∞ N√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="36 th√°ng (Chuy√™n vi√™n+) | 24 th√°ng (Nh√¢n vi√™n) | Ph·ª• c·∫•p th√¢m ni√™n", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        # Main content with sample data
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Statistics cards
        stats_frame = ctk.CTkFrame(content_frame, height=100)
        stats_frame.pack(fill="x", pady=15)
        stats_frame.pack_propagate(False)
        
        stats = [("ƒê·ªß 36 th√°ng", "18", COLORS['primary']), ("ƒê·ªß 24 th√°ng", "25", COLORS['success']), 
                ("Ph·ª• c·∫•p th√¢m ni√™n", "12", COLORS['warning']), ("T·∫°m ho√£n", "3", COLORS['error'])]
        
        for i, (label, value, color) in enumerate(stats):
            card = ctk.CTkFrame(stats_frame, fg_color=color)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=24, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=11), text_color="white").pack(pady=5)
        
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Sample employee list
        list_title = ctk.CTkLabel(content_frame, text="üìã Danh s√°ch ƒë·ªß ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng", 
                                font=ctk.CTkFont(size=16, weight="bold"))
        list_title.pack(pady=(20, 10))
        
        employees = [
            ("NV001", "Nguy·ªÖn VƒÉn A", "Chuy√™n vi√™n ch√≠nh", "A2/3.2 ‚Üí A2/3.45", "36 th√°ng", "‚úÖ"),
            ("NV002", "Tr·∫ßn Th·ªã B", "Chuy√™n vi√™n", "A1/2.34 ‚Üí A1/2.67", "36 th√°ng", "‚úÖ"),  
            ("NV003", "L√™ VƒÉn C", "Nh√¢n vi√™n", "B1/1.86 ‚Üí B1/2.1", "24 th√°ng", "‚úÖ"),
            ("NV004", "Ph·∫°m Th·ªã D", "Chuy√™n vi√™n ch√≠nh", "A2/4.2 ‚Üí +5% th√¢m ni√™n", "B·∫≠c t·ªëi ƒëa", "üîÑ"),
            ("NV005", "Ho√†ng VƒÉn E", "Chuy√™n vi√™n", "A1/3.0 ‚Üí A2/3.33", "36 th√°ng", "‚è≥")
        ]
        
        for emp in employees:
            emp_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            emp_frame.pack(fill="x", pady=5)
            
            # Employee info
            info_frame = ctk.CTkFrame(emp_frame, fg_color="transparent")
            info_frame.pack(fill="both", padx=15, pady=10)
            
            # Row 1: Basic info
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            ctk.CTkLabel(row1, text=f"{emp[0]} - {emp[1]}", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
            ctk.CTkLabel(row1, text=emp[2], font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row1, text=emp[5], font=ctk.CTkFont(size=14)).pack(side="right")
            
            # Row 2: Salary info
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(3, 0))
            
            ctk.CTkLabel(row2, text=emp[3], font=ctk.CTkFont(size=10), text_color=COLORS['success']).pack(side="left")
            ctk.CTkLabel(row2, text=f"Logic: {emp[4]}", font=ctk.CTkFont(size=9), text_color=COLORS['text_secondary']).pack(side="right")
        
        # Export buttons
        export_frame = ctk.CTkFrame(content_frame, height=80)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Xu·∫•t vƒÉn b·∫£n", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        buttons_frame = ctk.CTkFrame(export_frame, fg_color="transparent")
        buttons_frame.pack()
        
        ctk.CTkButton(buttons_frame, text="C√¥ng vƒÉn r√† so√°t", width=140).pack(side="left", padx=10)
        ctk.CTkButton(buttons_frame, text="Th√¥ng b√°o KQ", width=140).pack(side="left", padx=10)
        ctk.CTkButton(buttons_frame, text="Quy·∫øt ƒë·ªãnh", width=140).pack(side="left", padx=10)
        ctk.CTkButton(buttons_frame, text="Excel", width=100, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_retirement_tracking(self):
        """Show comprehensive retirement tracking with alerts and early salary"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color=COLORS['warning'])
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="‚è∞ Theo d√µi ngh·ªâ h∆∞u", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="C·∫£nh b√°o 6/3/1 th√°ng | N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n khi ngh·ªâ h∆∞u", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        # Main content
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Alert statistics
        stats_frame = ctk.CTkFrame(content_frame, height=120)
        stats_frame.pack(fill="x", pady=15)
        stats_frame.pack_propagate(False)
        
        stats = [
            ("T·ªïng s·∫Øp ngh·ªâ h∆∞u", "24", COLORS['primary']),
            ("C·∫ßn th√¥ng b√°o (6T)", "8", COLORS['warning']),
            ("C·∫ßn quy·∫øt ƒë·ªãnh (3T)", "12", COLORS['error']),
            ("ƒê·ªß n√¢ng l∆∞∆°ng TH", "4", COLORS['success'])
        ]
        
        for i, (label, value, color) in enumerate(stats):
            card = ctk.CTkFrame(stats_frame, fg_color=color)
            card.grid(row=0, column=i, padx=10, pady=10, sticky="ew")
            
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=10), text_color="white").pack(pady=5)
            
            # Priority indicator
            if i == 2:  # Need decision
                ctk.CTkLabel(card, text="üö® URGENT", font=ctk.CTkFont(size=8, weight="bold"), text_color="white").pack()
            elif i == 1:  # Need notification
                ctk.CTkLabel(card, text="‚ö†Ô∏è IMPORTANT", font=ctk.CTkFont(size=8, weight="bold"), text_color="white").pack()
        
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Retirement alerts list
        alerts_title = ctk.CTkLabel(content_frame, text="üìã Danh s√°ch c·∫£nh b√°o ngh·ªâ h∆∞u", 
                                  font=ctk.CTkFont(size=16, weight="bold"))
        alerts_title.pack(pady=(20, 10))
        
        # Sample retirement data with different alert levels
        retirement_data = [
            ("NV101", "Nguy·ªÖn Th·ªã Lan", "Tr∆∞·ªüng ph√≤ng", "15/06/1964", "15/06/2024", "3 th√°ng", "üö®", "C·∫ßn Qƒê ngay", COLORS['error']),
            ("NV102", "Tr·∫ßn VƒÉn H√πng", "Chuy√™n vi√™n ch√≠nh", "20/08/1964", "20/08/2024", "5 th√°ng", "‚ö†Ô∏è", "C·∫ßn th√¥ng b√°o", COLORS['warning']),
            ("NV103", "L√™ Th·ªã Mai", "Ph√≥ tr∆∞·ªüng ph√≤ng", "10/01/1965", "10/01/2025", "7 th√°ng", "üì¢", "Chu·∫©n b·ªã TB", COLORS['primary']),
            ("NV104", "Ph·∫°m VƒÉn ƒê·ª©c", "Chuy√™n vi√™n ch√≠nh", "25/03/1964", "25/03/2024", "1 th√°ng", "üî•", "Kh·∫©n c·∫•p!", COLORS['error']),
            ("NV105", "Ho√†ng Th·ªã Hoa", "Chuy√™n vi√™n", "30/11/1964", "30/11/2024", "8 th√°ng", "‚è∞", "Theo d√µi", COLORS['success'])
        ]
        
        for emp in retirement_data:
            emp_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=2, border_color=emp[8])
            emp_frame.pack(fill="x", pady=8)
            
            # Priority indicator stripe
            priority_stripe = ctk.CTkFrame(emp_frame, width=8, fg_color=emp[8])
            priority_stripe.pack(side="left", fill="y")
            
            # Employee info
            info_frame = ctk.CTkFrame(emp_frame, fg_color="transparent")
            info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=12)
            
            # Row 1: Basic info with alert icon
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            ctk.CTkLabel(row1, text=emp[6], font=ctk.CTkFont(size=16)).pack(side="left")
            ctk.CTkLabel(row1, text=f"{emp[0]} - {emp[1]}", font=ctk.CTkFont(size=13, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row1, text=emp[2], font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row1, text=emp[7], font=ctk.CTkFont(size=11, weight="bold"), text_color=emp[8]).pack(side="right")
            
            # Row 2: Retirement details
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(5, 0))
            
            ctk.CTkLabel(row2, text=f"Sinh: {emp[3]} ‚Üí Ngh·ªâ h∆∞u: {emp[4]}", 
                        font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left")
            ctk.CTkLabel(row2, text=f"C√≤n {emp[5]}", font=ctk.CTkFont(size=10, weight="bold"), 
                        text_color=emp[8]).pack(side="right")
            
            # Action buttons
            actions_frame = ctk.CTkFrame(emp_frame, fg_color="transparent", width=150)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            if "3 th√°ng" in emp[5] or "1 th√°ng" in emp[5]:
                ctk.CTkButton(actions_frame, text="Xu·∫•t Qƒê", width=100, height=28, 
                            fg_color=COLORS['error'], font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="N√¢ng l∆∞∆°ng TH", width=100, height=28,
                            fg_color=COLORS['success'], font=ctk.CTkFont(size=9)).pack(pady=2)
            elif "5 th√°ng" in emp[5]:
                ctk.CTkButton(actions_frame, text="Xu·∫•t TB", width=100, height=28,
                            fg_color=COLORS['warning'], font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="Chi ti·∫øt", width=100, height=28,
                            font=ctk.CTkFont(size=9)).pack(pady=2)
            else:
                ctk.CTkButton(actions_frame, text="Chi ti·∫øt", width=100, height=28,
                            font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="Theo d√µi", width=100, height=28,
                            fg_color=COLORS['primary'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Early salary increase section
        early_salary_title = ctk.CTkLabel(content_frame, text="‚ö° N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n khi ngh·ªâ h∆∞u", 
                                        font=ctk.CTkFont(size=16, weight="bold"))
        early_salary_title.pack(pady=(30, 10))
        
        early_salary_note = ctk.CTkLabel(content_frame, 
                                       text="üìù Nh√¢n vi√™n th√¥ng b√°o ngh·ªâ h∆∞u ƒë∆∞·ª£c x√©t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n n·∫øu ƒë·ªß ƒëi·ªÅu ki·ªán",
                                       font=ctk.CTkFont(size=11), text_color=COLORS['text_secondary'])
        early_salary_note.pack(pady=(0, 10))
        
        # Early salary candidates
        early_candidates = [
            ("NV101", "Nguy·ªÖn Th·ªã Lan", "A3/4.8 ‚Üí A3/5.10", "ƒê·ªß ƒëi·ªÅu ki·ªán", "‚úÖ"),
            ("NV102", "Tr·∫ßn VƒÉn H√πng", "A2/3.66 ‚Üí A2/4.06", "ƒê·ªß ƒëi·ªÅu ki·ªán", "‚úÖ"),
            ("NV104", "Ph·∫°m VƒÉn ƒê·ª©c", "A2/3.33 ‚Üí A2/3.66", "Ch∆∞a ƒë·ªß th·ªùi gian", "‚è≥")
        ]
        
        for candidate in early_candidates:
            cand_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['background'], height=50)
            cand_frame.pack(fill="x", pady=3)
            cand_frame.pack_propagate(False)
            
            content_frame_inner = ctk.CTkFrame(cand_frame, fg_color="transparent")
            content_frame_inner.pack(fill="both", expand=True, padx=15, pady=8)
            
            ctk.CTkLabel(content_frame_inner, text=candidate[4], font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(content_frame_inner, text=f"{candidate[0]} - {candidate[1]}", 
                        font=ctk.CTkFont(size=11, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(content_frame_inner, text=candidate[2], font=ctk.CTkFont(size=10), 
                        text_color=COLORS['success']).pack(side="left", padx=(15, 0))
            ctk.CTkLabel(content_frame_inner, text=candidate[3], font=ctk.CTkFont(size=10), 
                        text_color=COLORS['text_secondary']).pack(side="right")
            
            if candidate[4] == "‚úÖ":
                ctk.CTkButton(content_frame_inner, text="Ph√™ duy·ªát", width=80, height=25,
                            fg_color=COLORS['success'], font=ctk.CTkFont(size=9)).pack(side="right", padx=(0, 10))
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=80)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Xu·∫•t vƒÉn b·∫£n ngh·ªâ h∆∞u", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üì¢ Th√¥ng b√°o 6 th√°ng", width=150, 
                    fg_color=COLORS['warning']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìÑ Quy·∫øt ƒë·ªãnh 3 th√°ng", width=150, 
                    fg_color=COLORS['error']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="‚ö° Qƒê n√¢ng l∆∞∆°ng TH", width=150, 
                    fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_planning_check(self):
        """Show comprehensive planning check with age limits and quota management"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color=COLORS['success'])
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üìã Ki·ªÉm tra quy ho·∫°ch c√°n b·ªô", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Ki·ªÉm tra tu·ªïi, quota, ƒëi·ªÅu ki·ªán quy ho·∫°ch theo t·ª´ng v·ªã tr√≠", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        # Main content
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Planning statistics overview
        stats_frame = ctk.CTkFrame(content_frame, height=120)
        stats_frame.pack(fill="x", pady=15)
        stats_frame.pack_propagate(False)
        
        planning_stats = [
            ("T·ªïng quy ho·∫°ch", "45", COLORS['primary']),
            ("ƒêang ho·∫°t ƒë·ªông", "38", COLORS['success']),
            ("S·∫Øp h·∫øt h·∫°n", "7", COLORS['warning']),
            ("Qu√° tu·ªïi", "5", COLORS['error'])
        ]
        
        for i, (label, value, color) in enumerate(planning_stats):
            card = ctk.CTkFrame(stats_frame, fg_color=color)
            card.grid(row=0, column=i, padx=12, pady=10, sticky="ew")
            
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=10), text_color="white").pack(pady=5)
            
            # Status indicators
            if "h·∫øt h·∫°n" in label:
                ctk.CTkLabel(card, text="‚ö†Ô∏è C·∫¶N GIA H·∫†N", font=ctk.CTkFont(size=8, weight="bold"), text_color="white").pack()
            elif "Qu√° tu·ªïi" in label:
                ctk.CTkLabel(card, text="üö´ V√î HI·ªÜU", font=ctk.CTkFont(size=8, weight="bold"), text_color="white").pack()
        
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Position-based planning analysis
        position_title = ctk.CTkLabel(content_frame, text="üìä Ph√¢n t√≠ch quy ho·∫°ch theo v·ªã tr√≠", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        position_title.pack(pady=(20, 10))
        
        # Position quota table
        position_data = [
            ("Gi√°m ƒë·ªëc", 1, 1, 0, "45-60", "ƒê·ªß", "‚úÖ"),
            ("Ph√≥ Gi√°m ƒë·ªëc", 2, 2, 0, "40-58", "ƒê·ªß", "‚úÖ"),
            ("Tr∆∞·ªüng ph√≤ng", 8, 6, 2, "35-55", "Thi·∫øu", "‚ö†Ô∏è"),
            ("Ph√≥ Tr∆∞·ªüng ph√≤ng", 12, 10, 2, "32-52", "Thi·∫øu", "‚ö†Ô∏è"),
            ("Chuy√™n vi√™n ch√≠nh", 15, 14, 1, "30-50", "ƒê·ªß", "‚úÖ"),
            ("Tr∆∞·ªüng chi nh√°nh", 3, 2, 1, "35-55", "Thi·∫øu", "‚ùå")
        ]
        
        # Position table
        for pos_info in position_data:
            pos_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            pos_frame.pack(fill="x", pady=5)
            
            # Status indicator
            status = pos_info[6]
            if status == "‚úÖ":
                indicator_color = COLORS['success']
            elif status == "‚ö†Ô∏è":
                indicator_color = COLORS['warning']
            else:
                indicator_color = COLORS['error']
            
            ctk.CTkFrame(pos_frame, width=6, fg_color=indicator_color).pack(side="left", fill="y")
            
            # Position info
            info_frame = ctk.CTkFrame(pos_frame, fg_color="transparent")
            info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=12)
            
            # Row 1: Position and status
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            ctk.CTkLabel(row1, text=pos_info[0], font=ctk.CTkFont(size=13, weight="bold")).pack(side="left")
            ctk.CTkLabel(row1, text=f"Tu·ªïi: {pos_info[4]}", font=ctk.CTkFont(size=10), 
                        text_color=COLORS['text_secondary']).pack(side="left", padx=(20, 0))
            ctk.CTkLabel(row1, text=f"{status} {pos_info[5]}", font=ctk.CTkFont(size=11, weight="bold"), 
                        text_color=indicator_color).pack(side="right")
            
            # Row 2: Quota details
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(5, 0))
            
            quota_text = f"ƒê·ªãnh m·ª©c: {pos_info[1]} | Hi·ªán c√≥: {pos_info[2]} | C·∫ßn b·ªï sung: {pos_info[3]}"
            ctk.CTkLabel(row2, text=quota_text, font=ctk.CTkFont(size=10), 
                        text_color=COLORS['text_secondary']).pack(side="left")
            
            # Action buttons
            actions_frame = ctk.CTkFrame(pos_frame, fg_color="transparent", width=120)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            ctk.CTkButton(actions_frame, text="Xem DS", width=80, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
            
            if pos_info[3] > 0:  # Need more people
                ctk.CTkButton(actions_frame, text="ƒê·ªÅ xu·∫•t", width=80, height=25,
                            fg_color=COLORS['warning'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Individual planning list
        individual_title = ctk.CTkLabel(content_frame, text="üë• Danh s√°ch c√° nh√¢n trong quy ho·∫°ch", 
                                      font=ctk.CTkFont(size=16, weight="bold"))
        individual_title.pack(pady=(30, 10))
        
        # Individual planning data with age checking
        individual_planning = [
            ("NV201", "Nguy·ªÖn VƒÉn Minh", "Chuy√™n vi√™n ch√≠nh", "Tr∆∞·ªüng ph√≤ng", 38, "2022-01-15", "2027-01-15", "Trong h·∫°n", "‚úÖ"),
            ("NV202", "Tr·∫ßn Th·ªã H∆∞∆°ng", "Ph√≥ Tr∆∞·ªüng ph√≤ng", "Tr∆∞·ªüng ph√≤ng", 42, "2021-06-01", "2026-06-01", "S·∫Øp h·∫øt h·∫°n", "‚ö†Ô∏è"),
            ("NV203", "L√™ VƒÉn ƒê·ª©c", "Chuy√™n vi√™n ch√≠nh", "Ph√≥ Tr∆∞·ªüng ph√≤ng", 56, "2020-03-10", "2025-03-10", "Qu√° tu·ªïi", "‚ùå"),
            ("NV204", "Ph·∫°m Th·ªã Lan", "Chuy√™n vi√™n", "Chuy√™n vi√™n ch√≠nh", 35, "2023-08-20", "2028-08-20", "M·ªõi quy ho·∫°ch", "‚úÖ"),
            ("NV205", "Ho√†ng VƒÉn T√¢m", "Ph√≥ Tr∆∞·ªüng ph√≤ng", "Tr∆∞·ªüng ph√≤ng", 45, "2019-12-05", "2024-12-05", "H·∫øt h·∫°n", "üö´")
        ]
        
        for person in individual_planning:
            person_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            person_frame.pack(fill="x", pady=5)
            
            # Status indicator
            status = person[8]
            if status == "‚úÖ":
                indicator_color = COLORS['success']
            elif status == "‚ö†Ô∏è":
                indicator_color = COLORS['warning'] 
            elif status == "‚ùå":
                indicator_color = COLORS['error']
            else:
                indicator_color = "#6b7280"  # Gray for expired
            
            ctk.CTkFrame(person_frame, width=6, fg_color=indicator_color).pack(side="left", fill="y")
            
            # Person info
            info_frame = ctk.CTkFrame(person_frame, fg_color="transparent")
            info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=10)
            
            # Row 1: Basic info with status
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            ctk.CTkLabel(row1, text=f"{person[0]} - {person[1]}", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
            ctk.CTkLabel(row1, text=f"Tu·ªïi: {person[4]}", font=ctk.CTkFont(size=10), 
                        text_color=COLORS['text_secondary']).pack(side="left", padx=(15, 0))
            ctk.CTkLabel(row1, text=f"{status} {person[7]}", font=ctk.CTkFont(size=10, weight="bold"), 
                        text_color=indicator_color).pack(side="right")
            
            # Row 2: Planning details
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(3, 0))
            
            planning_text = f"{person[2]} ‚Üí {person[3]} | T·ª´ {person[5]} ƒë·∫øn {person[6]}"
            ctk.CTkLabel(row2, text=planning_text, font=ctk.CTkFont(size=10), 
                        text_color=COLORS['text_secondary']).pack(side="left")
            
            # Actions based on status
            actions_frame = ctk.CTkFrame(person_frame, fg_color="transparent", width=120)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            ctk.CTkButton(actions_frame, text="Chi ti·∫øt", width=80, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
            
            if "S·∫Øp h·∫øt h·∫°n" in person[7] or "H·∫øt h·∫°n" in person[7]:
                ctk.CTkButton(actions_frame, text="Gia h·∫°n", width=80, height=25,
                            fg_color=COLORS['warning'], font=ctk.CTkFont(size=9)).pack(pady=2)
            elif "Qu√° tu·ªïi" in person[7]:
                ctk.CTkButton(actions_frame, text="Lo·∫°i b·ªè", width=80, height=25,
                            fg_color=COLORS['error'], font=ctk.CTkFont(size=9)).pack(pady=2)
            else:
                ctk.CTkButton(actions_frame, text="ƒê·ªÅ xu·∫•t BN", width=80, height=25,
                            fg_color=COLORS['success'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Export and settings section
        bottom_section = ctk.CTkFrame(content_frame, height=80)
        bottom_section.pack(fill="x", pady=20)
        bottom_section.pack_propagate(False)
        
        export_title = ctk.CTkLabel(bottom_section, text="üîß C√†i ƒë·∫∑t v√† xu·∫•t b√°o c√°o", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        bottom_buttons = ctk.CTkFrame(bottom_section, fg_color="transparent")
        bottom_buttons.pack()
        
        ctk.CTkButton(bottom_buttons, text="‚öôÔ∏è C√†i ƒë·∫∑t gi·ªõi h·∫°n tu·ªïi", width=160).pack(side="left", padx=10)
        ctk.CTkButton(bottom_buttons, text="üìä B√°o c√°o t·ªïng h·ª£p", width=160, 
                    fg_color=COLORS['primary']).pack(side="left", padx=10)
        ctk.CTkButton(bottom_buttons, text="üìà Excel ph√¢n t√≠ch", width=160, 
                    fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_work_history(self):
        """Show comprehensive work history management with timeline"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color="#8b5cf6")
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üíº Qu√° tr√¨nh c√¥ng t√°c", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Timeline c√¥ng t√°c | Th√™m/S·ª≠a/X√≥a giai ƒëo·∫°n | Xu·∫•t h·ªì s∆°", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        # Employee selector
        selector_frame = ctk.CTkFrame(self.main_content, height=60, fg_color=COLORS['background'])
        selector_frame.pack(fill="x", padx=20, pady=10)
        selector_frame.pack_propagate(False)
        
        ctk.CTkLabel(selector_frame, text="Ch·ªçn nh√¢n vi√™n:", font=ctk.CTkFont(size=14, weight="bold")).pack(side="left", padx=20, pady=15)
        emp_combo = ctk.CTkOptionMenu(selector_frame, values=["NV001 - Nguy·ªÖn VƒÉn A", "NV002 - Tr·∫ßn Th·ªã B", "NV003 - L√™ VƒÉn C"], width=250)
        emp_combo.pack(side="left", padx=10)
        ctk.CTkButton(selector_frame, text="üìã Xem timeline", width=120).pack(side="right", padx=20)
        
        # Main content
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Work history timeline
        timeline_title = ctk.CTkLabel(content_frame, text="üìÖ Timeline c√¥ng t√°c - Nguy·ªÖn VƒÉn A", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        timeline_title.pack(pady=(10, 20))
        
        # Timeline data
        timeline_data = [
            ("2024-01-15", "Hi·ªán t·∫°i", "Chuy√™n vi√™n ch√≠nh", "Ph√≤ng TCHC", "Qu·∫£n l√Ω h·ªì s∆° c√°n b·ªô", "ƒêang l√†m vi·ªác", "active"),
            ("2022-03-01", "2023-12-31", "Chuy√™n vi√™n", "Ph√≤ng TCHC", "H·ªó tr·ª£ c√¥ng t√°c nh√¢n s·ª±", "Ho√†n th√†nh t·ªët", "completed"),
            ("2020-08-15", "2022-02-28", "Nh√¢n vi√™n", "Ph√≤ng TCKT", "C√¥ng t√°c k·∫ø to√°n t·ªïng h·ª£p", "Chuy·ªÉn ph√≤ng", "completed"),
            ("2018-06-01", "2020-08-14", "Nh√¢n vi√™n", "Ph√≤ng TCKT", "Th·ª±c t·∫≠p sinh ‚Üí Nh√¢n vi√™n", "K·∫øt th√∫c th·ª≠ vi·ªác", "completed")
        ]
        
        for i, (start_date, end_date, position, dept, duties, result, status) in enumerate(timeline_data):
            # Timeline item
            timeline_item = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            timeline_item.pack(fill="x", pady=8)
            
            # Timeline connector
            if i == 0:  # Current position
                connector_color = COLORS['success']
                status_icon = "üü¢"
            else:
                connector_color = COLORS['primary']
                status_icon = "üîµ"
            
            connector_frame = ctk.CTkFrame(timeline_item, width=20, fg_color="transparent")
            connector_frame.pack(side="left", fill="y", padx=(10, 0))
            
            ctk.CTkLabel(connector_frame, text=status_icon, font=ctk.CTkFont(size=16)).pack(pady=15)
            
            if i < len(timeline_data) - 1:  # Not the last item
                ctk.CTkFrame(connector_frame, width=3, height=50, fg_color=connector_color).pack()
            
            # Timeline content
            content_frame_inner = ctk.CTkFrame(timeline_item, fg_color="transparent")
            content_frame_inner.pack(side="left", fill="both", expand=True, padx=15, pady=12)
            
            # Row 1: Period and position
            row1 = ctk.CTkFrame(content_frame_inner, fg_color="transparent")
            row1.pack(fill="x")
            
            period_text = f"{start_date} - {end_date}" if end_date != "Hi·ªán t·∫°i" else f"{start_date} - Hi·ªán t·∫°i"
            ctk.CTkLabel(row1, text=period_text, font=ctk.CTkFont(size=11, weight="bold"), text_color=connector_color).pack(side="left")
            ctk.CTkLabel(row1, text=f"{position} - {dept}", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left", padx=(20, 0))
            ctk.CTkLabel(row1, text=result, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="right")
            
            # Row 2: Duties
            row2 = ctk.CTkFrame(content_frame_inner, fg_color="transparent")
            row2.pack(fill="x", pady=(3, 0))
            
            ctk.CTkLabel(row2, text=f"Nhi·ªám v·ª•: {duties}", font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left")
            
            # Action buttons
            actions_frame = ctk.CTkFrame(timeline_item, fg_color="transparent", width=100)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            ctk.CTkButton(actions_frame, text="S·ª≠a", width=60, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
            if status != "active":
                ctk.CTkButton(actions_frame, text="X√≥a", width=60, height=25, fg_color=COLORS['error'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Add new period section
        add_section = ctk.CTkFrame(content_frame, height=100, fg_color=COLORS['background'])
        add_section.pack(fill="x", pady=20)
        add_section.pack_propagate(False)
        
        add_title = ctk.CTkLabel(add_section, text="‚ûï Th√™m giai ƒëo·∫°n m·ªõi", font=ctk.CTkFont(size=14, weight="bold"))
        add_title.pack(pady=10)
        
        add_form = ctk.CTkFrame(add_section, fg_color="transparent")
        add_form.pack(expand=True)
        
        # Form fields in a row
        form_row = ctk.CTkFrame(add_form, fg_color="transparent")
        form_row.pack()
        
        ctk.CTkEntry(form_row, placeholder_text="T·ª´ ng√†y", width=100).pack(side="left", padx=5)
        ctk.CTkEntry(form_row, placeholder_text="ƒê·∫øn ng√†y", width=100).pack(side="left", padx=5)
        ctk.CTkEntry(form_row, placeholder_text="Ch·ª©c v·ª•", width=120).pack(side="left", padx=5)
        ctk.CTkEntry(form_row, placeholder_text="ƒê∆°n v·ªã", width=100).pack(side="left", padx=5)
        ctk.CTkButton(form_row, text="Th√™m", width=80, fg_color=COLORS['success']).pack(side="left", padx=10)
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=60)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Xu·∫•t h·ªì s∆° c√¥ng t√°c", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìÑ S∆° y·∫øu l√Ω l·ªãch", width=140).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìã Qu√° tr√¨nh c√¥ng t√°c", width=140, fg_color=COLORS['primary']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìä Excel timeline", width=140, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_contracts(self):
        """Show comprehensive contract management for BKS and employees"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color="#f59e0b")
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üìÑ H·ª£p ƒë·ªìng lao ƒë·ªông", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="BKS + Nh√¢n vi√™n | C·∫£nh b√°o h·∫øt h·∫°n | Gia h·∫°n t·ª± ƒë·ªông", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Contract statistics
        stats_frame = ctk.CTkFrame(content_frame, height=120)
        stats_frame.pack(fill="x", pady=15)
        stats_frame.pack_propagate(False)
        
        contract_stats = [
            ("T·ªïng Hƒê", "156", COLORS['primary']),
            ("C√≤n hi·ªáu l·ª±c", "142", COLORS['success']),
            ("S·∫Øp h·∫øt h·∫°n", "8", COLORS['warning']),
            ("Hƒê BKS", "14", "#f59e0b")
        ]
        
        for i, (label, value, color) in enumerate(contract_stats):
            card = ctk.CTkFrame(stats_frame, fg_color=color)
            card.grid(row=0, column=i, padx=12, pady=10, sticky="ew")
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=10), text_color="white").pack(pady=5)
        
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Contract list
        contract_title = ctk.CTkLabel(content_frame, text="üìã Danh s√°ch h·ª£p ƒë·ªìng", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        contract_title.pack(pady=(20, 10))
        
        contracts_data = [
            ("NV001", "Nguy·ªÖn VƒÉn A", "Hƒê kh√¥ng x√°c ƒë·ªãnh th·ªùi h·∫°n", "2020-08-01", "V√¥ th·ªùi h·∫°n", "C√≤n hi·ªáu l·ª±c", "‚úÖ"),
            ("BKS01", "Tr·∫ßn Th·ªã B", "Hƒê Ban ki·ªÉm so√°t", "2023-01-15", "2025-01-14", "S·∫Øp h·∫øt h·∫°n", "‚ö†Ô∏è"),
            ("NV025", "L√™ VƒÉn C", "Hƒê c√≥ th·ªùi h·∫°n 2 nƒÉm", "2022-06-01", "2024-05-31", "H·∫øt h·∫°n", "üö´"),
            ("BKS02", "Ph·∫°m Th·ªã D", "Hƒê Ban ki·ªÉm so√°t", "2022-08-20", "2024-08-19", "C·∫ßn gia h·∫°n", "‚ö†Ô∏è"),
            ("NV050", "Ho√†ng VƒÉn E", "Hƒê th·ª≠ vi·ªác", "2024-01-10", "2024-03-09", "Chuy·ªÉn ch√≠nh th·ª©c", "‚úÖ")
        ]
        
        for contract in contracts_data:
            contract_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            contract_frame.pack(fill="x", pady=5)
            
            # Status indicator
            status = contract[6]
            if status == "‚úÖ":
                indicator_color = COLORS['success']
            elif status == "‚ö†Ô∏è":
                indicator_color = COLORS['warning']
            else:
                indicator_color = COLORS['error']
            
            ctk.CTkFrame(contract_frame, width=6, fg_color=indicator_color).pack(side="left", fill="y")
            
            # Contract info
            info_frame = ctk.CTkFrame(contract_frame, fg_color="transparent")
            info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=10)
            
            # Row 1: Basic info
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            employee_text = f"{contract[0]} - {contract[1]}"
            if "BKS" in contract[0]:
                employee_text += " (Ban ki·ªÉm so√°t)"
            
            ctk.CTkLabel(row1, text=employee_text, font=ctk.CTkFont(size=12, weight="bold")).pack(side="left")
            ctk.CTkLabel(row1, text=f"{status} {contract[5]}", font=ctk.CTkFont(size=10, weight="bold"), text_color=indicator_color).pack(side="right")
            
            # Row 2: Contract details
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(3, 0))
            
            contract_detail = f"{contract[2]} | {contract[3]} ‚Üí {contract[4]}"
            ctk.CTkLabel(row2, text=contract_detail, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left")
            
            # Action buttons
            actions_frame = ctk.CTkFrame(contract_frame, fg_color="transparent", width=120)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            ctk.CTkButton(actions_frame, text="Chi ti·∫øt", width=80, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
            
            if "S·∫Øp h·∫øt h·∫°n" in contract[5] or "C·∫ßn gia h·∫°n" in contract[5]:
                ctk.CTkButton(actions_frame, text="Gia h·∫°n", width=80, height=25, fg_color=COLORS['warning'], font=ctk.CTkFont(size=9)).pack(pady=2)
            elif "H·∫øt h·∫°n" in contract[5]:
                ctk.CTkButton(actions_frame, text="T·∫°o m·ªõi", width=80, height=25, fg_color=COLORS['success'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=60)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ B√°o c√°o h·ª£p ƒë·ªìng", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìä T·ªïng h·ª£p Hƒê", width=140).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="‚ö†Ô∏è C·∫£nh b√°o h·∫øt h·∫°n", width=140, fg_color=COLORS['warning']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìà Excel BKS", width=140, fg_color="#f59e0b").pack(side="left", padx=10)
    
    def show_appointment_check(self):
        """Show comprehensive appointment condition checking"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color=COLORS['success'])
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="‚úÖ ƒêi·ªÅu ki·ªán b·ªï nhi·ªám", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Ki·ªÉm tra ƒë·∫ßy ƒë·ªß | C·∫£nh b√°o 90 ng√†y | H·ªì s∆° ƒë·ªÅ xu·∫•t", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Check form
        check_frame = ctk.CTkFrame(content_frame, height=100, fg_color=COLORS['background'])
        check_frame.pack(fill="x", pady=15)
        check_frame.pack_propagate(False)
        
        ctk.CTkLabel(check_frame, text="üîç Ki·ªÉm tra ƒëi·ªÅu ki·ªán b·ªï nhi·ªám", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        
        form_row = ctk.CTkFrame(check_frame, fg_color="transparent")
        form_row.pack()
        
        ctk.CTkLabel(form_row, text="Nh√¢n vi√™n:").pack(side="left", padx=10)
        emp_combo = ctk.CTkOptionMenu(form_row, values=["NV001 - Nguy·ªÖn VƒÉn A", "NV002 - Tr·∫ßn Th·ªã B"], width=200)
        emp_combo.pack(side="left", padx=10)
        
        ctk.CTkLabel(form_row, text="V·ªã tr√≠:").pack(side="left", padx=10)
        pos_combo = ctk.CTkOptionMenu(form_row, values=["Tr∆∞·ªüng ph√≤ng", "Ph√≥ Tr∆∞·ªüng ph√≤ng", "Chuy√™n vi√™n ch√≠nh"], width=150)
        pos_combo.pack(side="left", padx=10)
        
        ctk.CTkButton(form_row, text="üîç Ki·ªÉm tra", width=100, fg_color=COLORS['primary']).pack(side="left", padx=20)
        
        # Check results
        results_title = ctk.CTkLabel(content_frame, text="üìã K·∫øt qu·∫£ ki·ªÉm tra - Nguy·ªÖn VƒÉn A ‚Üí Tr∆∞·ªüng ph√≤ng", 
                                   font=ctk.CTkFont(size=16, weight="bold"))
        results_title.pack(pady=(20, 10))
        
        conditions = [
            ("‚úÖ", "Quy ho·∫°ch", "C√≥ trong quy ho·∫°ch Tr∆∞·ªüng ph√≤ng (2022-2027)", COLORS['success']),
            ("‚úÖ", "H·ªçc v·∫•n", "Th·∫°c sƒ© Lu·∫≠t - ƒê·∫°t y√™u c·∫ßu t·ªëi thi·ªÉu ƒê·∫°i h·ªçc", COLORS['success']),
            ("‚úÖ", "Ch·ª©ng ch·ªâ", "C√≥ ch·ª©ng ch·ªâ Qu·∫£n l√Ω Nh√† n∆∞·ªõc h·∫°ng III", COLORS['success']),
            ("‚úÖ", "Kinh nghi·ªám", "8 nƒÉm kinh nghi·ªám (‚â•5 nƒÉm y√™u c·∫ßu)", COLORS['success']),
            ("‚ö†Ô∏è", "Tu·ªïi", "38 tu·ªïi - G·∫ßn gi·ªõi h·∫°n t·ªëi ƒëa 40 tu·ªïi", COLORS['warning']),
            ("‚úÖ", "ƒê√°nh gi√°", "Ho√†n th√†nh t·ªët nhi·ªám v·ª• 3 nƒÉm li√™n ti·∫øp", COLORS['success'])
        ]
        
        for status, condition, detail, color in conditions:
            cond_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=color)
            cond_frame.pack(fill="x", pady=3)
            
            ctk.CTkFrame(cond_frame, width=5, fg_color=color).pack(side="left", fill="y")
            
            info_frame = ctk.CTkFrame(cond_frame, fg_color="transparent")
            info_frame.pack(fill="both", expand=True, padx=15, pady=8)
            
            row = ctk.CTkFrame(info_frame, fg_color="transparent")
            row.pack(fill="x")
            
            ctk.CTkLabel(row, text=status, font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(row, text=condition, font=ctk.CTkFont(size=12, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row, text=detail, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(20, 0))
        
        # Overall result
        result_frame = ctk.CTkFrame(content_frame, height=60, fg_color=COLORS['success'])
        result_frame.pack(fill="x", pady=20)
        result_frame.pack_propagate(False)
        
        ctk.CTkLabel(result_frame, text="üéâ ƒê·ª¶ ƒêI·ªÄU KI·ªÜN B·ªî NHI·ªÜM", font=ctk.CTkFont(size=16, weight="bold"), text_color="white").pack(pady=15)
        
        # Reappointment alerts
        alerts_title = ctk.CTkLabel(content_frame, text="‚è∞ C·∫£nh b√°o b·ªï nhi·ªám l·∫°i (90 ng√†y)", 
                                  font=ctk.CTkFont(size=16, weight="bold"))
        alerts_title.pack(pady=(20, 10))
        
        reappointments = [
            ("NV010", "L√™ Th·ªã Mai", "Ph√≥ Tr∆∞·ªüng ph√≤ng", "2024-03-15", "45 ng√†y", "üö®"),
            ("NV015", "Ph·∫°m VƒÉn ƒê·ª©c", "Tr∆∞·ªüng ph√≤ng", "2024-04-20", "78 ng√†y", "‚ö†Ô∏è"),
            ("NV020", "Ho√†ng Th·ªã Lan", "Chuy√™n vi√™n ch√≠nh", "2024-05-10", "98 ng√†y", "üì¢")
        ]
        
        for emp_id, name, position, reappoint_date, days_left, priority in reappointments:
            alert_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['background'], height=50)
            alert_frame.pack(fill="x", pady=3)
            alert_frame.pack_propagate(False)
            
            content_frame_inner = ctk.CTkFrame(alert_frame, fg_color="transparent")
            content_frame_inner.pack(fill="both", expand=True, padx=15, pady=8)
            
            ctk.CTkLabel(content_frame_inner, text=priority, font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(content_frame_inner, text=f"{emp_id} - {name}", font=ctk.CTkFont(size=11, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(content_frame_inner, text=f"{position} - C√≤n {days_left}", font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(15, 0))
            ctk.CTkButton(content_frame_inner, text="Ki·ªÉm tra", width=80, height=25, font=ctk.CTkFont(size=9)).pack(side="right")
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=60)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ H·ªì s∆° ƒë·ªÅ xu·∫•t", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìã T·ªù tr√¨nh ƒë·ªÅ xu·∫•t", width=140).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìä B√°o c√°o ƒëi·ªÅu ki·ªán", width=140, fg_color=COLORS['primary']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìà Th·ªëng k√™ BN", width=140, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_award_check(self):
        """Show comprehensive award condition checking"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color="#8b5cf6")
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üèÜ ƒêi·ªÅu ki·ªán khen th∆∞·ªüng", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Ti√™u ch√≠ khen th∆∞·ªüng | ƒê√°nh gi√° th√†nh t√≠ch | ƒê·ªÅ xu·∫•t", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Award form
        form_frame = ctk.CTkFrame(content_frame, height=80, fg_color=COLORS['background'])
        form_frame.pack(fill="x", pady=15)
        form_frame.pack_propagate(False)
        
        ctk.CTkLabel(form_frame, text="üîç Ki·ªÉm tra ti√™u chu·∫©n khen th∆∞·ªüng", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        
        form_row = ctk.CTkFrame(form_frame, fg_color="transparent")
        form_row.pack()
        
        ctk.CTkLabel(form_row, text="Nh√¢n vi√™n:").pack(side="left", padx=10)
        ctk.CTkOptionMenu(form_row, values=["NV001 - Nguy·ªÖn VƒÉn A", "NV002 - Tr·∫ßn Th·ªã B"], width=180).pack(side="left", padx=10)
        
        ctk.CTkLabel(form_row, text="Lo·∫°i khen th∆∞·ªüng:").pack(side="left", padx=10)
        ctk.CTkOptionMenu(form_row, values=["Gi·∫•y khen c√° nh√¢n", "B·∫±ng khen c·ª•c tr∆∞·ªüng", "Lao ƒë·ªông ti√™n ti·∫øn"], width=150).pack(side="left", padx=10)
        
        ctk.CTkButton(form_row, text="üîç Ki·ªÉm tra", width=100, fg_color="#8b5cf6").pack(side="left", padx=20)
        
        # Award criteria results
        criteria_title = ctk.CTkLabel(content_frame, text="üìã Ti√™u ch√≠ ƒë√°nh gi√° - Nguy·ªÖn VƒÉn A (Gi·∫•y khen c√° nh√¢n)", 
                                    font=ctk.CTkFont(size=16, weight="bold"))
        criteria_title.pack(pady=(20, 10))
        
        award_criteria = [
            ("‚úÖ", "Ho√†n th√†nh nhi·ªám v·ª•", "Ho√†n th√†nh xu·∫•t s·∫Øc nhi·ªám v·ª• ƒë∆∞·ª£c giao nƒÉm 2023", COLORS['success']),
            ("‚úÖ", "Kh√¥ng vi ph·∫°m k·ª∑ lu·∫≠t", "Kh√¥ng c√≥ h√¨nh th·ª©c k·ª∑ lu·∫≠t n√†o trong 12 th√°ng qua", COLORS['success']),
            ("‚úÖ", "Th√†nh t√≠ch n·ªïi b·∫≠t", "T·ªï ch·ª©c th√†nh c√¥ng d·ª± √°n s·ªë h√≥a h·ªì s∆° nh√¢n s·ª±", COLORS['success']),
            ("‚úÖ", "Th·ªùi gian c√¥ng t√°c", "6 nƒÉm kinh nghi·ªám l√†m vi·ªác (‚â•1 nƒÉm y√™u c·∫ßu)", COLORS['success']),
            ("‚ö†Ô∏è", "L·∫ßn khen th∆∞·ªüng g·∫ßn nh·∫•t", "L·∫ßn cu·ªëi nh·∫≠n khen th∆∞·ªüng: 8 th√°ng tr∆∞·ªõc (khuy·∫øn kh√≠ch √≠t nh·∫•t 12 th√°ng)", COLORS['warning'])
        ]
        
        for status, criterion, detail, color in award_criteria:
            criteria_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=color)
            criteria_frame.pack(fill="x", pady=3)
            
            ctk.CTkFrame(criteria_frame, width=5, fg_color=color).pack(side="left", fill="y")
            
            info_frame = ctk.CTkFrame(criteria_frame, fg_color="transparent")
            info_frame.pack(fill="both", expand=True, padx=15, pady=8)
            
            row = ctk.CTkFrame(info_frame, fg_color="transparent")
            row.pack(fill="x")
            
            ctk.CTkLabel(row, text=status, font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(row, text=criterion, font=ctk.CTkFont(size=12, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row, text=detail, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(20, 0))
        
        # Award result
        result_frame = ctk.CTkFrame(content_frame, height=60, fg_color=COLORS['warning'])
        result_frame.pack(fill="x", pady=20)
        result_frame.pack_propagate(False)
        
        ctk.CTkLabel(result_frame, text="‚ö†Ô∏è C·∫ßN X√ÇN NH·∫ÆC TH·ªúI GIAN KHEN TH∆Ø·ªúNG L·∫¶N TR∆Ø·ªöC", 
                    font=ctk.CTkFont(size=14, weight="bold"), text_color="white").pack(pady=15)
        
        # Award candidates list
        candidates_title = ctk.CTkLabel(content_frame, text="üéñÔ∏è ∆Øu ti√™n khen th∆∞·ªüng nƒÉm 2024", 
                                      font=ctk.CTkFont(size=16, weight="bold"))
        candidates_title.pack(pady=(20, 10))
        
        candidates = [
            ("NV005", "Ho√†ng VƒÉn T√¢m", "S√°ng ki·∫øn c·∫£i ti·∫øn quy tr√¨nh", "Gi·∫•y khen", "‚úÖ"),
            ("NV012", "Nguy·ªÖn Th·ªã H·ªçng", "D·∫´n ƒë·∫ßu d·ª± √°n ISO 9001:2015", "B·∫±ng khen", "‚úÖ"),
            ("NV018", "L√™ VƒÉn Qu√¢n", "10 nƒÉm kh√¥ng ngh·ªâ ph√©p", "Lao ƒë·ªông ti√™n ti·∫øn", "‚úÖ"),
            ("NV025", "Tr·∫ßn Th·ªã Mai", "H·ªó tr·ª£ ƒë·ªìng nghi·ªáp v∆∞·ª£t kh√≥ COVID", "Gi·∫•y khen", "‚ö†Ô∏è")
        ]
        
        for emp_id, name, achievement, award_type, status in candidates:
            cand_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['background'], height=50)
            cand_frame.pack(fill="x", pady=3)
            cand_frame.pack_propagate(False)
            
            content_frame_inner = ctk.CTkFrame(cand_frame, fg_color="transparent")
            content_frame_inner.pack(fill="both", expand=True, padx=15, pady=8)
            
            ctk.CTkLabel(content_frame_inner, text=status, font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(content_frame_inner, text=f"{emp_id} - {name}", font=ctk.CTkFont(size=11, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(content_frame_inner, text=achievement, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(15, 0))
            ctk.CTkLabel(content_frame_inner, text=award_type, font=ctk.CTkFont(size=10, weight="bold"), text_color="#8b5cf6").pack(side="right", padx=(0, 10))
            
            if status == "‚úÖ":
                ctk.CTkButton(content_frame_inner, text="ƒê·ªÅ xu·∫•t", width=80, height=25, fg_color="#8b5cf6", font=ctk.CTkFont(size=9)).pack(side="right")
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=60)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ ƒê·ªÅ xu·∫•t khen th∆∞·ªüng", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìã T·ªù tr√¨nh ƒë·ªÅ xu·∫•t", width=140).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üèÜ Danh s√°ch ∆∞u ti√™n", width=140, fg_color="#8b5cf6").pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìà Th·ªëng k√™ KT", width=140, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_early_salary(self):
        """Show early salary increase management for outstanding achievements"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color="#f59e0b")
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="‚ö° N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Th√†nh t√≠ch xu·∫•t s·∫Øc | ƒê√°nh gi√° ƒë·∫∑c bi·ªát | Quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Early salary statistics
        stats_frame = ctk.CTkFrame(content_frame, height=100)
        stats_frame.pack(fill="x", pady=15)
        stats_frame.pack_propagate(False)
        
        early_stats = [
            ("ƒê·ªÅ xu·∫•t m·ªõi", "6", COLORS['primary']),
            ("ƒêang x√©t duy·ªát", "4", COLORS['warning']),
            ("ƒê√£ ph√™ duy·ªát", "8", COLORS['success']),
            ("T·ª´ ch·ªëi", "2", COLORS['error'])
        ]
        
        for i, (label, value, color) in enumerate(early_stats):
            card = ctk.CTkFrame(stats_frame, fg_color=color)
            card.grid(row=0, column=i, padx=12, pady=10, sticky="ew")
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=24, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=10), text_color="white").pack(pady=5)
        
        for i in range(4):
            stats_frame.grid_columnconfigure(i, weight=1)
        
        # Early salary candidates
        candidates_title = ctk.CTkLabel(content_frame, text="üéÜ ·ª®ng vi√™n n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", 
                                      font=ctk.CTkFont(size=16, weight="bold"))
        candidates_title.pack(pady=(20, 10))
        
        early_candidates = [
            ("NV008", "Nguy·ªÖn Th·ªã Linh", "A1/2.67", "A2/3.0", "S√°ng ki·∫øn ti·∫øt ki·ªám 50M/nƒÉm", "Ch·ªù duy·ªát", "‚ö°"),
            ("NV015", "Tr·∫ßn VƒÉn Minh", "A2/3.33", "A2/3.66", "L√£nh ƒë·∫°o d·ª± √°n th√†nh c√¥ng", "ƒê√£ duy·ªát", "‚úÖ"),
            ("NV022", "L√™ Th·ªã Hoa", "B1/2.1", "B1/2.34", "Gi·∫£i nh·∫•t s√°ng ki·∫øn c·∫•p B·ªô", "ƒê√£ duy·ªát", "‚úÖ"),
            ("NV035", "Ph·∫°m VƒÉn ƒê·ª©c", "A1/2.34", "A1/2.67", "Nghi√™n c·ª©u khoa h·ªçc ƒë∆∞·ª£c ·ª©ng d·ª•ng", "Ch·ªù duy·ªát", "‚ö°"),
            ("NV041", "Ho√†ng Th·ªã Mai", "A2/3.0", "A2/3.33", "Gi·∫£i quy·∫øt s·ª± c·ªë nghi√™m tr·ªçng", "T·ª´ ch·ªëi", "‚ùå")
        ]
        
        for emp_id, name, current_salary, proposed_salary, achievement, status, icon in early_candidates:
            candidate_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
            candidate_frame.pack(fill="x", pady=5)
            
            # Status indicator
            if "‚úÖ" in icon:
                indicator_color = COLORS['success']
            elif "‚ö°" in icon:
                indicator_color = "#f59e0b"
            else:
                indicator_color = COLORS['error']
            
            ctk.CTkFrame(candidate_frame, width=6, fg_color=indicator_color).pack(side="left", fill="y")
            
            # Candidate info
            info_frame = ctk.CTkFrame(candidate_frame, fg_color="transparent")
            info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=10)
            
            # Row 1: Basic info
            row1 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row1.pack(fill="x")
            
            ctk.CTkLabel(row1, text=icon, font=ctk.CTkFont(size=14)).pack(side="left")
            ctk.CTkLabel(row1, text=f"{emp_id} - {name}", font=ctk.CTkFont(size=12, weight="bold")).pack(side="left", padx=(10, 0))
            ctk.CTkLabel(row1, text=status, font=ctk.CTkFont(size=10, weight="bold"), text_color=indicator_color).pack(side="right")
            
            # Row 2: Salary and achievement
            row2 = ctk.CTkFrame(info_frame, fg_color="transparent")
            row2.pack(fill="x", pady=(3, 0))
            
            salary_text = f"{current_salary} ‚Üí {proposed_salary}"
            ctk.CTkLabel(row2, text=salary_text, font=ctk.CTkFont(size=10, weight="bold"), text_color=COLORS['success']).pack(side="left")
            ctk.CTkLabel(row2, text=achievement, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="left", padx=(20, 0))
            
            # Action buttons
            actions_frame = ctk.CTkFrame(candidate_frame, fg_color="transparent", width=120)
            actions_frame.pack(side="right", padx=15)
            actions_frame.pack_propagate(False)
            
            if "Ch·ªù duy·ªát" in status:
                ctk.CTkButton(actions_frame, text="Ph√™ duy·ªát", width=80, height=25, fg_color=COLORS['success'], font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="T·ª´ ch·ªëi", width=80, height=25, fg_color=COLORS['error'], font=ctk.CTkFont(size=9)).pack(pady=2)
            elif "ƒê√£ duy·ªát" in status:
                ctk.CTkButton(actions_frame, text="Xu·∫•t Qƒê", width=80, height=25, fg_color="#f59e0b", font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="Chi ti·∫øt", width=80, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
            else:
                ctk.CTkButton(actions_frame, text="L√Ω do", width=80, height=25, font=ctk.CTkFont(size=9)).pack(pady=2)
                ctk.CTkButton(actions_frame, text="X√©t l·∫°i", width=80, height=25, fg_color=COLORS['warning'], font=ctk.CTkFont(size=9)).pack(pady=2)
        
        # Add new nomination
        add_frame = ctk.CTkFrame(content_frame, height=80, fg_color=COLORS['background'])
        add_frame.pack(fill="x", pady=20)
        add_frame.pack_propagate(False)
        
        ctk.CTkLabel(add_frame, text="‚ûï ƒê·ªÅ xu·∫•t n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n m·ªõi", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        
        add_row = ctk.CTkFrame(add_frame, fg_color="transparent")
        add_row.pack()
        
        ctk.CTkOptionMenu(add_row, values=["NV050 - Nguy·ªÖn VƒÉn T√¢n", "NV055 - Tr·∫ßn Th·ªã Lan"], width=180).pack(side="left", padx=10)
        ctk.CTkEntry(add_row, placeholder_text="Th√†nh t√≠ch xu·∫•t s·∫Øc", width=200).pack(side="left", padx=10)
        ctk.CTkButton(add_row, text="ƒê·ªÅ xu·∫•t", width=100, fg_color="#f59e0b").pack(side="left", padx=10)
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=60)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìã T·ªù tr√¨nh ƒë·ªÅ xu·∫•t", width=140).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìÑ Quy·∫øt ƒë·ªãnh", width=140, fg_color="#f59e0b").pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìà B√°o c√°o nƒÉm", width=140, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_reports(self):
        """Show comprehensive statistical reports and analysis"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color=COLORS['primary'])
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üìä B√°o c√°o th·ªëng k√™", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="Charts | Ph√¢n t√≠ch c∆° c·∫•u | B√°o c√°o to√†n di·ªán", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Key statistics
        key_stats = ctk.CTkFrame(content_frame, height=160)
        key_stats.pack(fill="x", pady=15)
        key_stats.pack_propagate(False)
        
        ctk.CTkLabel(key_stats, text="üìã T·ªïng quan ch·ªâ ti√™u ch√≠nh", font=ctk.CTkFont(size=16, weight="bold")).pack(pady=10)
        
        stats_grid = ctk.CTkFrame(key_stats, fg_color="transparent")
        stats_grid.pack(fill="x", padx=20, pady=10)
        
        key_metrics = [
            ("T·ªïng nh√¢n s·ª±", "156", COLORS['primary']), ("N√¢ng l∆∞∆°ng 2024", "43", COLORS['success']),
            ("Ngh·ªâ h∆∞u 2024", "8", COLORS['warning']), ("Th√¥i vi·ªác", "12", COLORS['error']),
            ("Khen th∆∞·ªüng", "25", "#8b5cf6"), ("Hƒê h·∫øt h·∫°n", "14", "#f59e0b")
        ]
        
        for i, (label, value, color) in enumerate(key_metrics):
            card = ctk.CTkFrame(stats_grid, fg_color=color, width=180)
            card.grid(row=i//3, column=i%3, padx=8, pady=5, sticky="ew")
            
            ctk.CTkLabel(card, text=value, font=ctk.CTkFont(size=24, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(card, text=label, font=ctk.CTkFont(size=11), text_color="white").pack(pady=5)
        
        for i in range(3):
            stats_grid.grid_columnconfigure(i, weight=1)
        
        # Age structure
        age_section = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'])
        age_section.pack(fill="x", pady=20)
        
        age_header = ctk.CTkFrame(age_section, height=40, fg_color="#8b5cf6")
        age_header.pack(fill="x")
        age_header.pack_propagate(False)
        
        ctk.CTkLabel(age_header, text="üéÇ Ph√¢n t√≠ch c∆° c·∫•u tu·ªïi", font=ctk.CTkFont(size=14, weight="bold"), text_color="white").pack(side="left", padx=15, pady=10)
        
        age_content = ctk.CTkFrame(age_section, fg_color="transparent")
        age_content.pack(fill="x", padx=15, pady=15)
        
        age_groups = [
            ("D∆∞·ªõi 30 tu·ªïi", "28 ng∆∞·ªùi (18%)", COLORS['success']),
            ("30-40 tu·ªïi", "52 ng∆∞·ªùi (33%)", COLORS['primary']),
            ("40-50 tu·ªïi", "45 ng∆∞·ªùi (29%)", COLORS['warning']),
            ("Tr√™n 50 tu·ªïi", "31 ng∆∞·ªùi (20%)", COLORS['error'])
        ]
        
        for group, count, color in age_groups:
            group_frame = ctk.CTkFrame(age_content, fg_color=COLORS['background'], height=35)
            group_frame.pack(fill="x", pady=3)
            group_frame.pack_propagate(False)
            
            info_frame = ctk.CTkFrame(group_frame, fg_color="transparent")
            info_frame.pack(fill="both", expand=True, padx=15, pady=5)
            
            ctk.CTkLabel(info_frame, text=group, font=ctk.CTkFont(size=11, weight="bold")).pack(side="left")
            ctk.CTkLabel(info_frame, text=count, font=ctk.CTkFont(size=11), text_color=color).pack(side="right")
        
        # Qualifications
        qual_section = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'])
        qual_section.pack(fill="x", pady=20)
        
        qual_header = ctk.CTkFrame(qual_section, height=40, fg_color=COLORS['success'])
        qual_header.pack(fill="x")
        qual_header.pack_propagate(False)
        
        ctk.CTkLabel(qual_header, text="üéì C∆° c·∫•u h·ªçc v·∫•n", font=ctk.CTkFont(size=14, weight="bold"), text_color="white").pack(side="left", padx=15, pady=10)
        
        qual_grid = ctk.CTkFrame(qual_section, fg_color="transparent")
        qual_grid.pack(fill="x", padx=15, pady=15)
        
        qualifications = [
            ("Ti·∫øn sƒ©: 8 (5%)", COLORS['error']), ("Th·∫°c sƒ©: 45 (29%)", COLORS['success']),
            ("ƒê·∫°i h·ªçc: 85 (54%)", COLORS['primary']), ("Cao ƒë·∫≥ng: 15 (10%)", COLORS['warning']),
            ("L√Ω lu·∫≠t III: 65", "#8b5cf6"), ("An ninh III: 32", "#f59e0b")
        ]
        
        for i, (qual, color) in enumerate(qualifications):
            qual_item = ctk.CTkFrame(qual_grid, fg_color=COLORS['background'], height=35)
            qual_item.grid(row=i//3, column=i%3, padx=5, pady=3, sticky="ew")
            qual_item.pack_propagate(False)
            
            ctk.CTkLabel(qual_item, text=qual, font=ctk.CTkFont(size=10), text_color=color).pack(pady=8)
        
        for i in range(3):
            qual_grid.grid_columnconfigure(i, weight=1)
        
        # Export buttons
        export_frame = ctk.CTkFrame(content_frame, height=80)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Xu·∫•t b√°o c√°o", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìà Th√°ng", width=120, fg_color=COLORS['primary']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìä Qu√Ω", width=120, fg_color=COLORS['success']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìâ NƒÉm", width=120, fg_color=COLORS['warning']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìä Excel", width=120, fg_color=COLORS['success']).pack(side="left", padx=10)
    
    def show_insurance(self):
        """Show comprehensive social insurance management"""
        self.clear_main_content()
        
        # Header
        header_frame = ctk.CTkFrame(self.main_content, height=80, fg_color="#dc2626")
        header_frame.pack(fill="x", padx=20, pady=20)
        header_frame.pack_propagate(False)
        
        title = ctk.CTkLabel(header_frame, text="üè• B√°o b·∫£o hi·ªÉm x√£ h·ªôi", 
                           font=ctk.CTkFont(size=24, weight="bold"), text_color="white")
        title.pack(side="left", padx=20, pady=20)
        
        info_label = ctk.CTkLabel(header_frame, text="BHXH | Xu·∫•t Excel | Nh·∫Øc nh·ªü t·ª± ƒë·ªông", 
                                font=ctk.CTkFont(size=11), text_color="white")
        info_label.pack(side="right", padx=20, pady=20)
        
        content_frame = ctk.CTkScrollableFrame(self.main_content)
        content_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Insurance alerts
        alerts_frame = ctk.CTkFrame(content_frame, height=120)
        alerts_frame.pack(fill="x", pady=15)
        alerts_frame.pack_propagate(False)
        
        insurance_alerts = [
            ("C·∫ßn ƒëi·ªÅu ch·ªânh", "12", "#dc2626"),
            ("Ngh·ªâ thai s·∫£n", "3", COLORS['warning']),
            ("Ngh·ªâ ·ªëm", "5", COLORS['error']),
            ("Ngh·ªâ h∆∞u", "8", COLORS['success'])
        ]
        
        for i, (label, count, color) in enumerate(insurance_alerts):
            alert_card = ctk.CTkFrame(alerts_frame, fg_color=color)
            alert_card.grid(row=0, column=i, padx=12, pady=10, sticky="ew")
            
            ctk.CTkLabel(alert_card, text=count, font=ctk.CTkFont(size=28, weight="bold"), text_color="white").pack(pady=8)
            ctk.CTkLabel(alert_card, text=label, font=ctk.CTkFont(size=10), text_color="white").pack(pady=5)
            ctk.CTkLabel(alert_card, text="C·∫¶N X·ª¨ L√ù", font=ctk.CTkFont(size=8, weight="bold"), text_color="white").pack()
        
        for i in range(4):
            alerts_frame.grid_columnconfigure(i, weight=1)
        
        # Monthly report
        monthly_title = ctk.CTkLabel(content_frame, text="üìã B√°o c√°o BHXH th√°ng 12/2024", 
                                   font=ctk.CTkFont(size=16, weight="bold"))
        monthly_title.pack(pady=(20, 10))
        
        # Categories
        categories = [
            ("Nh√¢n vi√™n m·ªõi tham gia BHXH", [
                ("NV156", "Nguy·ªÖn VƒÉn T√¢n", "15/12/2024", "T·ªù khai m·ªõi", "‚úÖ"),
                ("NV157", "Tr·∫ßn Th·ªã Lan", "20/12/2024", "T·ªù khai m·ªõi", "‚úÖ")
            ]),
            ("ƒêi·ªÅu ch·ªânh l∆∞∆°ng/ph·ª• c·∫•p", [
                ("NV008", "L√™ VƒÉn ƒê·ª©c", "01/12/2024", "ƒêi·ªÅu ch·ªânh l∆∞∆°ng", "‚ö†Ô∏è"),
                ("NV015", "Ph·∫°m Th·ªã H·ªìng", "15/12/2024", "ƒêi·ªÅu ch·ªânh l∆∞∆°ng", "‚ö†Ô∏è")
            ]),
            ("Ch·∫•m d·ª©t BHXH", [
                ("NV045", "Ho√†ng VƒÉn Minh", "31/12/2024", "Ngh·ªâ h∆∞u", "üí´"),
                ("NV067", "Nguy·ªÖn Th·ªã Mai", "25/12/2024", "Th√¥i vi·ªác", "üí´")
            ])
        ]
        
        for category, items in categories:
            # Category header
            cat_header = ctk.CTkFrame(content_frame, height=40, fg_color="#dc2626")
            cat_header.pack(fill="x", pady=(10, 5))
            cat_header.pack_propagate(False)
            
            ctk.CTkLabel(cat_header, text=category, font=ctk.CTkFont(size=12, weight="bold"), text_color="white").pack(side="left", padx=15, pady=10)
            ctk.CTkLabel(cat_header, text=f"{len(items)} tr∆∞·ªùng h·ª£p", font=ctk.CTkFont(size=10), text_color="white").pack(side="right", padx=15, pady=10)
            
            # Items
            for emp_id, name, date, action, status in items:
                item_frame = ctk.CTkFrame(content_frame, fg_color=COLORS['surface'], border_width=1, border_color=COLORS['background'])
                item_frame.pack(fill="x", pady=2)
                
                # Status indicator
                if status == "‚úÖ":
                    indicator_color = COLORS['success']
                elif status == "‚ö†Ô∏è":
                    indicator_color = COLORS['warning']
                else:
                    indicator_color = COLORS['error']
                
                ctk.CTkFrame(item_frame, width=5, fg_color=indicator_color).pack(side="left", fill="y")
                
                # Item info
                info_frame = ctk.CTkFrame(item_frame, fg_color="transparent")
                info_frame.pack(side="left", fill="both", expand=True, padx=15, pady=8)
                
                # Row
                row = ctk.CTkFrame(info_frame, fg_color="transparent")
                row.pack(fill="x")
                
                ctk.CTkLabel(row, text=status, font=ctk.CTkFont(size=12)).pack(side="left")
                ctk.CTkLabel(row, text=f"{emp_id} - {name}", font=ctk.CTkFont(size=11, weight="bold")).pack(side="left", padx=(10, 0))
                ctk.CTkLabel(row, text=action, font=ctk.CTkFont(size=10), text_color="#dc2626").pack(side="left", padx=(20, 0))
                ctk.CTkLabel(row, text=date, font=ctk.CTkFont(size=10), text_color=COLORS['text_secondary']).pack(side="right")
                
                # Action button
                if status == "‚ö†Ô∏è":
                    ctk.CTkButton(item_frame, text="X·ª≠ l√Ω", width=70, height=25, fg_color="#dc2626", font=ctk.CTkFont(size=9)).pack(side="right", padx=15)
        
        # Quick actions
        quick_actions = ctk.CTkFrame(content_frame, height=60, fg_color=COLORS['background'])
        quick_actions.pack(fill="x", pady=20)
        quick_actions.pack_propagate(False)
        
        ctk.CTkLabel(quick_actions, text="‚ö° Thao t√°c nhanh", font=ctk.CTkFont(size=14, weight="bold")).pack(pady=10)
        
        quick_buttons = ctk.CTkFrame(quick_actions, fg_color="transparent")
        quick_buttons.pack()
        
        ctk.CTkButton(quick_buttons, text="‚ûï Th√™m BHXH", width=130, fg_color=COLORS['success']).pack(side="left", padx=10)
        ctk.CTkButton(quick_buttons, text="‚úèÔ∏è ƒêi·ªÅu ch·ªânh", width=130, fg_color=COLORS['warning']).pack(side="left", padx=10)
        ctk.CTkButton(quick_buttons, text="üí´ Ch·∫•m d·ª©t", width=130, fg_color=COLORS['error']).pack(side="left", padx=10)
        
        # Export section
        export_frame = ctk.CTkFrame(content_frame, height=80)
        export_frame.pack(fill="x", pady=20)
        export_frame.pack_propagate(False)
        
        export_title = ctk.CTkLabel(export_frame, text="üì§ Xu·∫•t b√°o c√°o BHXH", font=ctk.CTkFont(size=14, weight="bold"))
        export_title.pack(pady=10)
        
        export_buttons = ctk.CTkFrame(export_frame, fg_color="transparent")
        export_buttons.pack()
        
        ctk.CTkButton(export_buttons, text="üìà B√°o c√°o th√°ng", width=140, fg_color="#dc2626").pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìä Excel t·ªïng h·ª£p", width=140, fg_color=COLORS['success']).pack(side="left", padx=10)
        ctk.CTkButton(export_buttons, text="üìã T·ªù khai BHXH", width=140, fg_color=COLORS['primary']).pack(side="left", padx=10)
    
    def handle_logout(self):
        """Handle user logout"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?"):
            self.current_user = None
            self.is_logged_in = False
            self.show_login_screen()
    
    def run(self):
        """Run the application"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()
    
    def on_closing(self):
        """Handle application closing"""
        if hasattr(self, 'conn'):
            self.conn.close()
        self.root.destroy()

if __name__ == "__main__":
    try:
        app = HRMSDesktop()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ ƒë√≥ng...")
