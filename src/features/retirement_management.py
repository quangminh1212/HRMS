"""
HRMS - T√≠nh nƒÉng 3: Theo d√µi ngh·ªâ h∆∞u
C·∫£nh b√°o tr∆∞·ªõc 6 th√°ng, quy·∫øt ƒë·ªãnh tr∆∞·ªõc 3 th√°ng
R√† so√°t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n khi ngh·ªâ h∆∞u
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from sqlalchemy.orm import sessionmaker
from models_enhanced import *
from components import ModernComponents
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Tuple

def get_database_session():
    """T·∫°o session database"""
    engine = get_engine()
    Session = sessionmaker(bind=engine)
    return Session()

class RetirementManagementSystem:
    """H·ªá th·ªëng theo d√µi ngh·ªâ h∆∞u ho√†n ch·ªânh"""
    
    # Tu·ªïi ngh·ªâ h∆∞u theo quy ƒë·ªãnh
    RETIREMENT_AGES = {
        GenderEnum.MALE: 62,
        GenderEnum.FEMALE: 60
    }
    
    # Th·ªùi gian c·∫£nh b√°o
    NOTIFICATION_MONTHS = 6  # Th√¥ng b√°o tr∆∞·ªõc 6 th√°ng
    DECISION_MONTHS = 3      # Quy·∫øt ƒë·ªãnh tr∆∞·ªõc 3 th√°ng
    
    @staticmethod
    def render_retirement_management_page():
        """Render trang theo d√µi ngh·ªâ h∆∞u ch√≠nh"""
        
        # Header v·ªõi h∆∞·ªõng d·∫´n
        ModernComponents.hero_header(
            "Theo d√µi ngh·ªâ h∆∞u", 
            "C·∫£nh b√°o, ra quy·∫øt ƒë·ªãnh v√† x·ª≠ l√Ω n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n khi ngh·ªâ h∆∞u", 
            "‚è∞"
        )
        
        st.markdown(ModernComponents.modern_alert(
            "Quy tr√¨nh ngh·ªâ h∆∞u",
            "‚Ä¢ **6 th√°ng tr∆∞·ªõc**: Th√¥ng b√°o v√† r√† so√°t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n\n"
            "‚Ä¢ **3 th√°ng tr∆∞·ªõc**: Ra quy·∫øt ƒë·ªãnh ngh·ªâ h∆∞u\n"
            "‚Ä¢ **T·ª± ƒë·ªông**: Ki·ªÉm tra ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng ƒë·∫∑c bi·ªát",
            "info", 
            "Tu·ªïi ngh·ªâ h∆∞u: Nam 62 tu·ªïi, N·ªØ 60 tu·ªïi"
        ), unsafe_allow_html=True)
        
        # Tabs ch√≠nh
        tab1, tab2, tab3, tab4 = st.tabs([
            "üö® C·∫£nh b√°o ngh·ªâ h∆∞u",
            "üìã Danh s√°ch chi ti·∫øt",
            "üí∞ N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n", 
            "üìÑ Xu·∫•t vƒÉn b·∫£n"
        ])
        
        with tab1:
            RetirementManagementSystem.render_alerts_tab()
            
        with tab2:
            RetirementManagementSystem.render_detailed_list_tab()
            
        with tab3:
            RetirementManagementSystem.render_early_salary_tab()
            
        with tab4:
            RetirementManagementSystem.render_export_tab()
    
    @staticmethod
    def render_alerts_tab():
        """Tab 1: C·∫£nh b√°o ngh·ªâ h∆∞u"""
        
        st.markdown("### üö® C·∫£nh b√°o ngh·ªâ h∆∞u")
        
        # T√≠nh to√°n c√°c nh√≥m c·∫£nh b√°o
        retirement_data = RetirementManagementSystem.calculate_retirement_alerts()
        
        if not retirement_data:
            st.info("‚úÖ Hi·ªán t·∫°i kh√¥ng c√≥ nh√¢n vi√™n n√†o c·∫ßn c·∫£nh b√°o ngh·ªâ h∆∞u")
            return
        
        # Ph√¢n lo·∫°i theo m·ª©c ƒë·ªô ∆∞u ti√™n
        urgent_6_months = [emp for emp in retirement_data if emp['months_to_retirement'] <= 6 and emp['months_to_retirement'] > 3]
        urgent_3_months = [emp for emp in retirement_data if emp['months_to_retirement'] <= 3]
        upcoming_12_months = [emp for emp in retirement_data if emp['months_to_retirement'] <= 12 and emp['months_to_retirement'] > 6]
        
        # Hi·ªÉn th·ªã metrics t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "C·∫ßn quy·∫øt ƒë·ªãnh ngay",
                len(urgent_3_months),
                "‚â§ 3 th√°ng",
                delta_color="inverse"
            )
        
        with col2:
            st.metric(
                "C·∫ßn th√¥ng b√°o", 
                len(urgent_6_months),
                "‚â§ 6 th√°ng",
                delta_color="off"
            )
        
        with col3:
            st.metric(
                "S·∫Øp t·ªõi",
                len(upcoming_12_months),
                "‚â§ 12 th√°ng"
            )
        
        with col4:
            st.metric(
                "T·ªïng c·ªông",
                len(retirement_data),
                "ng∆∞·ªùi"
            )
        
        # Hi·ªÉn th·ªã danh s√°ch theo m·ª©c ƒë·ªô ∆∞u ti√™n
        if urgent_3_months:
            st.markdown("#### üî• C·∫§P B√ÅO - C·∫ßn ra quy·∫øt ƒë·ªãnh ngay (‚â§ 3 th√°ng)")
            RetirementManagementSystem.display_retirement_table(urgent_3_months, "urgent")
        
        if urgent_6_months:
            st.markdown("#### ‚ö†Ô∏è QUAN TR·ªåNG - C·∫ßn th√¥ng b√°o (‚â§ 6 th√°ng)")
            RetirementManagementSystem.display_retirement_table(urgent_6_months, "warning")
        
        if upcoming_12_months:
            st.markdown("#### üìã S·∫ÆP T·ªöI - Chu·∫©n b·ªã tr∆∞·ªõc (‚â§ 12 th√°ng)")
            with st.expander(f"Xem {len(upcoming_12_months)} ng∆∞·ªùi s·∫Øp ngh·ªâ h∆∞u"):
                RetirementManagementSystem.display_retirement_table(upcoming_12_months, "info")
    
    @staticmethod
    def render_detailed_list_tab():
        """Tab 2: Danh s√°ch chi ti·∫øt"""
        
        st.markdown("### üìã Danh s√°ch chi ti·∫øt nh√¢n vi√™n s·∫Øp ngh·ªâ h∆∞u")
        
        # T√πy ch·ªçn l·ªçc
        col1, col2, col3 = st.columns(3)
        
        with col1:
            months_filter = st.selectbox(
                "L·ªçc theo th·ªùi gian:",
                ["T·∫•t c·∫£", "‚â§ 3 th√°ng", "‚â§ 6 th√°ng", "‚â§ 12 th√°ng", "‚â§ 24 th√°ng"],
                index=3  # M·∫∑c ƒë·ªãnh ‚â§ 12 th√°ng
            )
        
        with col2:
            session = get_database_session()
            try:
                departments = session.query(Employee.department).distinct().all()
                dept_list = [dept[0] for dept in departments if dept[0]]
                
                selected_dept = st.selectbox(
                    "L·ªçc theo ƒë∆°n v·ªã:",
                    ["T·∫•t c·∫£"] + dept_list
                )
            finally:
                session.close()
        
        with col3:
            sort_by = st.selectbox(
                "S·∫Øp x·∫øp theo:",
                ["Th·ªùi gian ngh·ªâ h∆∞u", "H·ªç t√™n", "ƒê∆°n v·ªã", "Tu·ªïi"]
            )
        
        # L·∫•y d·ªØ li·ªáu ƒë√£ l·ªçc
        retirement_data = RetirementManagementSystem.calculate_retirement_alerts()
        
        # √Åp d·ª•ng b·ªô l·ªçc
        if months_filter != "T·∫•t c·∫£":
            months_limit = int(months_filter.split("‚â§ ")[1].split(" ")[0])
            retirement_data = [emp for emp in retirement_data if emp['months_to_retirement'] <= months_limit]
        
        if selected_dept != "T·∫•t c·∫£":
            retirement_data = [emp for emp in retirement_data if emp['department'] == selected_dept]
        
        if not retirement_data:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu theo b·ªô l·ªçc ƒë√£ ch·ªçn")
            return
        
        # S·∫Øp x·∫øp
        if sort_by == "Th·ªùi gian ngh·ªâ h∆∞u":
            retirement_data.sort(key=lambda x: x['months_to_retirement'])
        elif sort_by == "H·ªç t√™n":
            retirement_data.sort(key=lambda x: x['full_name'])
        elif sort_by == "ƒê∆°n v·ªã":
            retirement_data.sort(key=lambda x: x['department'] or "")
        elif sort_by == "Tu·ªïi":
            retirement_data.sort(key=lambda x: x['current_age'], reverse=True)
        
        # Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt v·ªõi nhi·ªÅu th√¥ng tin h∆°n
        detailed_df = pd.DataFrame([{
            "H·ªç t√™n": emp['full_name'],
            "Gi·ªõi t√≠nh": emp['gender'],
            "Tu·ªïi hi·ªán t·∫°i": f"{emp['current_age']} tu·ªïi", 
            "ƒê∆°n v·ªã": emp['department'] or 'N/A',
            "Ch·ª©c v·ª•": emp['position'] or 'N/A',
            "Ng√†y sinh": emp['date_of_birth'].strftime('%d/%m/%Y'),
            "Ng√†y ngh·ªâ h∆∞u": emp['retirement_date'].strftime('%d/%m/%Y'),
            "C√≤n l·∫°i": f"{emp['months_to_retirement']} th√°ng",
            "Tr·∫°ng th√°i": emp['status'],
            "C·∫ßn l√†m": emp['action_required']
        } for emp in retirement_data])
        
        # Color coding cho b·∫£ng
        def highlight_urgency(row):
            months = int(row['C√≤n l·∫°i'].split(' ')[0])
            if months <= 3:
                return ['background-color: #ffebee'] * len(row)  # ƒê·ªè nh·∫°t
            elif months <= 6:
                return ['background-color: #fff3e0'] * len(row)  # Cam nh·∫°t  
            elif months <= 12:
                return ['background-color: #f3e5f5'] * len(row)  # T√≠m nh·∫°t
            else:
                return [''] * len(row)
        
        styled_df = detailed_df.style.apply(highlight_urgency, axis=1)
        
        st.dataframe(
            styled_df,
            use_container_width=True,
            hide_index=True
        )
        
        # Ch√∫ th√≠ch
        col_legend1, col_legend2, col_legend3 = st.columns(3)
        with col_legend1:
            st.markdown("üî¥ **‚â§ 3 th√°ng**: Ra quy·∫øt ƒë·ªãnh ngay")
        with col_legend2:
            st.markdown("üü† **‚â§ 6 th√°ng**: Th√¥ng b√°o v√† chu·∫©n b·ªã")
        with col_legend3:
            st.markdown("üü£ **‚â§ 12 th√°ng**: Theo d√µi v√† l√™n k·∫ø ho·∫°ch")
        
        # L∆∞u d·ªØ li·ªáu cho c√°c tab kh√°c
        st.session_state.retirement_data = retirement_data
    
    @staticmethod
    def render_early_salary_tab():
        """Tab 3: N√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n"""
        
        st.markdown("### üí∞ N√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n khi ngh·ªâ h∆∞u")
        
        st.markdown(ModernComponents.modern_alert(
            "Quy ƒë·ªãnh n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n",
            "Nh√¢n vi√™n s·∫Øp ngh·ªâ h∆∞u c√≥ th·ªÉ ƒë∆∞·ª£c xem x√©t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n "
            "n·∫øu c√≥ th√†nh t√≠ch xu·∫•t s·∫Øc v√† ƒë√£ ho√†n th√†nh t·ªët nhi·ªám v·ª• ƒë∆∞·ª£c giao.",
            "info",
            "√Åp d·ª•ng cho nh·ªØng ng∆∞·ªùi ngh·ªâ h∆∞u trong v√≤ng 6 th√°ng t·ªõi"
        ), unsafe_allow_html=True)
        
        if not hasattr(st.session_state, 'retirement_data'):
            st.info("üìã Vui l√≤ng xem danh s√°ch chi ti·∫øt tr∆∞·ªõc")
            return
        
        # L·ªçc nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n (‚â§ 6 th√°ng)
        eligible_for_early = [
            emp for emp in st.session_state.retirement_data 
            if emp['months_to_retirement'] <= 6
        ]
        
        if not eligible_for_early:
            st.info("‚úÖ Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p c·∫ßn xem x√©t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n")
            return
        
        st.markdown(f"#### üìä Danh s√°ch xem x√©t ({len(eligible_for_early)} ng∆∞·ªùi)")
        
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng cho t·ª´ng ng∆∞·ªùi
        early_salary_candidates = []
        
        session = get_database_session()
        try:
            for emp_data in eligible_for_early:
                employee = session.query(Employee).get(emp_data['employee_id'])
                if employee:
                    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
                    candidate_info = RetirementManagementSystem.check_early_salary_eligibility(
                        employee, emp_data, session
                    )
                    early_salary_candidates.append(candidate_info)
        
        finally:
            session.close()
        
        # Hi·ªÉn th·ªã danh s√°ch ·ª©ng vi√™n
        if early_salary_candidates:
            candidate_df = pd.DataFrame([{
                "H·ªç t√™n": cand['full_name'],
                "ƒê∆°n v·ªã": cand['department'],
                "H·ªá s·ªë hi·ªán t·∫°i": f"{cand['current_coefficient']:.2f}",
                "Th·ªùi gian t·ª´ l·∫ßn n√¢ng cu·ªëi": f"{cand['months_since_last_increase']} th√°ng",
                "ƒê√°nh gi√° g·∫ßn nh·∫•t": cand['latest_performance'],
                "ƒêi·ªÅu ki·ªán": "‚úÖ ƒê·ªß" if cand['is_eligible'] else "‚ùå Ch∆∞a ƒë·ªß",
                "D·ª± ki·∫øn tƒÉng": f"+{cand['proposed_increase']:.2f}" if cand['is_eligible'] else "N/A",
                "Ghi ch√∫": cand['notes']
            } for cand in early_salary_candidates])
            
            # Highlight nh·ªØng ng∆∞·ªùi ƒë·ªß ƒëi·ªÅu ki·ªán
            def highlight_eligible(row):
                if row['ƒêi·ªÅu ki·ªán'] == "‚úÖ ƒê·ªß":
                    return ['background-color: #e8f5e8'] * len(row)  # Xanh nh·∫°t
                else:
                    return ['background-color: #fafafa'] * len(row)  # X√°m nh·∫°t
            
            styled_candidate_df = candidate_df.style.apply(highlight_eligible, axis=1)
            
            st.dataframe(
                styled_candidate_df,
                use_container_width=True,
                hide_index=True
            )
            
            # Th·ªëng k√™
            eligible_count = len([cand for cand in early_salary_candidates if cand['is_eligible']])
            total_increase = sum([cand.get('proposed_increase', 0) for cand in early_salary_candidates if cand['is_eligible']])
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("ƒê·ªß ƒëi·ªÅu ki·ªán", eligible_count, f"/{len(early_salary_candidates)}")
            with col2:
                st.metric("T·ªïng tƒÉng h·ªá s·ªë", f"{total_increase:.2f}")
            with col3:
                estimated_cost = total_increase * 1490000  # L∆∞∆°ng c∆° s·ªü
                st.metric("Chi ph√≠ ∆∞·ªõc t√≠nh/th√°ng", f"{estimated_cost:,.0f} VND")
            
            # L∆∞u d·ªØ li·ªáu cho export
            st.session_state.early_salary_candidates = early_salary_candidates
        
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ·ª©ng vi√™n")
    
    @staticmethod
    def render_export_tab():
        """Tab 4: Xu·∫•t vƒÉn b·∫£n"""
        
        st.markdown("### üìÑ Xu·∫•t vƒÉn b·∫£n ngh·ªâ h∆∞u")
        
        if not hasattr(st.session_state, 'retirement_data'):
            st.info("üìÑ Vui l√≤ng xem danh s√°ch chi ti·∫øt tr∆∞·ªõc")
            return
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìã Th√¥ng b√°o ngh·ªâ h∆∞u")
            st.markdown("Xu·∫•t th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi c√≤n 6 th√°ng")
            
            notification_count = len([emp for emp in st.session_state.retirement_data if emp['months_to_retirement'] <= 6])
            
            if st.button(f"üìã Xu·∫•t {notification_count} th√¥ng b√°o", use_container_width=True):
                RetirementManagementSystem.export_retirement_notifications()
        
        with col2:
            st.markdown("#### üìú Quy·∫øt ƒë·ªãnh ngh·ªâ h∆∞u")
            st.markdown("Xu·∫•t quy·∫øt ƒë·ªãnh cho nh·ªØng ng∆∞·ªùi c√≤n 3 th√°ng")
            
            decision_count = len([emp for emp in st.session_state.retirement_data if emp['months_to_retirement'] <= 3])
            
            if st.button(f"üìú Xu·∫•t {decision_count} quy·∫øt ƒë·ªãnh", use_container_width=True):
                RetirementManagementSystem.export_retirement_decisions()
        
        # N√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n
        if hasattr(st.session_state, 'early_salary_candidates'):
            st.markdown("---")
            st.markdown("#### üí∞ N√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n")
            
            eligible_early = [cand for cand in st.session_state.early_salary_candidates if cand['is_eligible']]
            
            col3, col4 = st.columns(2)
            
            with col3:
                if st.button(f"üí∞ Xu·∫•t ƒë·ªÅ xu·∫•t n√¢ng l∆∞∆°ng ({len(eligible_early)})", use_container_width=True):
                    RetirementManagementSystem.export_early_salary_proposals()
            
            with col4:
                if st.button("üìã Xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n ngh·ªâ h∆∞u", use_container_width=True, type="primary"):
                    RetirementManagementSystem.export_all_retirement_documents()
    
    @staticmethod
    def calculate_retirement_alerts() -> List[Dict]:
        """T√≠nh to√°n c·∫£nh b√°o ngh·ªâ h∆∞u"""
        session = get_database_session()
        
        try:
            # L·∫•y t·∫•t c·∫£ nh√¢n vi√™n ƒëang l√†m vi·ªác
            employees = session.query(Employee).filter(
                Employee.work_status == WorkStatusEnum.ACTIVE,
                Employee.date_of_birth.isnot(None)
            ).all()
            
            retirement_alerts = []
            today = date.today()
            
            for employee in employees:
                # T√≠nh tu·ªïi ngh·ªâ h∆∞u
                retirement_age = RetirementManagementSystem.RETIREMENT_AGES.get(
                    employee.gender, 62
                )
                
                # Ng√†y ngh·ªâ h∆∞u d·ª± ki·∫øn
                retirement_date = date(
                    employee.date_of_birth.year + retirement_age,
                    employee.date_of_birth.month,
                    employee.date_of_birth.day
                )
                
                # Ch·ªâ x√©t nh·ªØng ng∆∞·ªùi ch∆∞a ƒë·∫øn tu·ªïi ngh·ªâ h∆∞u v√† trong v√≤ng 24 th√°ng t·ªõi
                if retirement_date > today:
                    months_to_retirement = (retirement_date.year - today.year) * 12 + (retirement_date.month - today.month)
                    
                    if months_to_retirement <= 24:  # Ch·ªâ x√©t trong v√≤ng 2 nƒÉm
                        current_age = today.year - employee.date_of_birth.year
                        if (today.month, today.day) < (employee.date_of_birth.month, employee.date_of_birth.day):
                            current_age -= 1
                        
                        # X√°c ƒë·ªãnh tr·∫°ng th√°i v√† h√†nh ƒë·ªông c·∫ßn thi·∫øt
                        if months_to_retirement <= 3:
                            status = "C·∫•p b√°ch - Ra quy·∫øt ƒë·ªãnh"
                            action_required = "L·∫≠p quy·∫øt ƒë·ªãnh ngh·ªâ h∆∞u"
                        elif months_to_retirement <= 6:
                            status = "Quan tr·ªçng - Th√¥ng b√°o"
                            action_required = "G·ª≠i th√¥ng b√°o + xem x√©t n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n"
                        else:
                            status = "Theo d√µi"
                            action_required = "Chu·∫©n b·ªã h·ªì s∆° v√† th·ªß t·ª•c"
                        
                        retirement_alerts.append({
                            'employee_id': employee.id,
                            'full_name': employee.full_name,
                            'gender': employee.gender.value if employee.gender else 'N/A',
                            'department': employee.department,
                            'position': employee.position,
                            'date_of_birth': employee.date_of_birth,
                            'current_age': current_age,
                            'retirement_age': retirement_age,
                            'retirement_date': retirement_date,
                            'months_to_retirement': months_to_retirement,
                            'status': status,
                            'action_required': action_required
                        })
            
            return retirement_alerts
        
        finally:
            session.close()
    
    @staticmethod
    def display_retirement_table(retirement_data: List[Dict], urgency_level: str):
        """Hi·ªÉn th·ªã b·∫£ng ngh·ªâ h∆∞u v·ªõi ƒë·ªãnh d·∫°ng ph√π h·ª£p"""
        
        df = pd.DataFrame([{
            "H·ªç t√™n": emp['full_name'],
            "ƒê∆°n v·ªã": emp['department'] or 'N/A',
            "Tu·ªïi": f"{emp['current_age']} tu·ªïi",
            "Ng√†y ngh·ªâ h∆∞u": emp['retirement_date'].strftime('%d/%m/%Y'),
            "C√≤n l·∫°i": f"{emp['months_to_retirement']} th√°ng",
            "H√†nh ƒë·ªông": emp['action_required']
        } for emp in retirement_data])
        
        # Styling d·ª±a tr√™n m·ª©c ƒë·ªô kh·∫©n c·∫•p
        if urgency_level == "urgent":
            colors = ['background-color: #ffebee'] * len(df.columns)
        elif urgency_level == "warning":
            colors = ['background-color: #fff3e0'] * len(df.columns)  
        else:
            colors = ['background-color: #f3e5f5'] * len(df.columns)
        
        styled_df = df.style.apply(lambda x: colors, axis=0)
        
        st.dataframe(
            styled_df,
            use_container_width=True,
            hide_index=True
        )
    
    @staticmethod
    def check_early_salary_eligibility(employee: Employee, retirement_data: Dict, session) -> Dict:
        """Ki·ªÉm tra ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n"""
        
        # L·∫•y l·ªãch s·ª≠ l∆∞∆°ng g·∫ßn nh·∫•t
        last_salary = session.query(SalaryHistory).filter_by(
            employee_id=employee.id
        ).order_by(SalaryHistory.effective_date.desc()).first()
        
        # L·∫•y ƒë√°nh gi√° g·∫ßn nh·∫•t
        latest_evaluation = session.query(Evaluation).filter_by(
            employee_id=employee.id
        ).order_by(Evaluation.year.desc()).first()
        
        # T√≠nh th·ªùi gian t·ª´ l·∫ßn n√¢ng l∆∞∆°ng cu·ªëi
        last_increase_date = last_salary.effective_date if last_salary else employee.current_salary_date
        if not last_increase_date:
            last_increase_date = employee.organization_start_date or date.today() - timedelta(days=365*3)
        
        months_since_last = (date.today().year - last_increase_date.year) * 12 + (date.today().month - last_increase_date.month)
        
        # ƒêi·ªÅu ki·ªán n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n:
        # 1. ƒê√£ √≠t nh·∫•t 24 th√°ng t·ª´ l·∫ßn n√¢ng cu·ªëi
        # 2. C√≥ ƒë√°nh gi√° t·ªët (t·ª´ "Ho√†n th√†nh t·ªët" tr·ªü l√™n)
        # 3. S·∫Øp ngh·ªâ h∆∞u (‚â§ 6 th√°ng)
        
        has_time_condition = months_since_last >= 24
        
        performance_condition = False
        latest_performance = "Ch∆∞a c√≥"
        if latest_evaluation:
            latest_performance = latest_evaluation.performance.value
            performance_condition = latest_evaluation.performance in [
                PerformanceEnum.EXCELLENT, 
                PerformanceEnum.GOOD
            ]
        
        retirement_condition = retirement_data['months_to_retirement'] <= 6
        
        is_eligible = has_time_condition and performance_condition and retirement_condition
        
        # D·ª± ki·∫øn m·ª©c tƒÉng (th∆∞·ªùng 0.34 cho n√¢ng b·∫≠c)
        proposed_increase = 0.34 if is_eligible else 0
        
        # Ghi ch√∫
        notes = []
        if not has_time_condition:
            notes.append(f"Ch∆∞a ƒë·ªß 24 th√°ng (c√≤n {24 - months_since_last} th√°ng)")
        if not performance_condition:
            notes.append("C·∫ßn ƒë√°nh gi√° t·ªët tr·ªü l√™n")
        if not retirement_condition:
            notes.append("Ch∆∞a trong th·ªùi gian quy ƒë·ªãnh")
        
        if is_eligible:
            notes.append("ƒê·ªß ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng tr∆∞·ªõc h·∫°n")
        
        return {
            'employee_id': employee.id,
            'full_name': employee.full_name,
            'department': employee.department or 'N/A',
            'current_coefficient': employee.current_salary_coefficient or 0,
            'months_since_last_increase': months_since_last,
            'latest_performance': latest_performance,
            'is_eligible': is_eligible,
            'proposed_increase': proposed_increase,
            'notes': "; ".join(notes) if notes else "N/A"
        }
    
    @staticmethod
    def export_retirement_notifications():
        """Xu·∫•t th√¥ng b√°o ngh·ªâ h∆∞u"""
        try:
            # TODO: Implement Word document generation
            st.success("‚úÖ ƒê√£ xu·∫•t th√¥ng b√°o ngh·ªâ h∆∞u th√†nh c√¥ng!")
            st.info("üìÅ Files ƒë∆∞·ª£c l∆∞u t·∫°i: exports/thong_bao_nghi_huu_*.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t th√¥ng b√°o: {str(e)}")
    
    @staticmethod
    def export_retirement_decisions():
        """Xu·∫•t quy·∫øt ƒë·ªãnh ngh·ªâ h∆∞u"""
        try:
            # TODO: Implement decision documents
            st.success("‚úÖ ƒê√£ xu·∫•t quy·∫øt ƒë·ªãnh ngh·ªâ h∆∞u th√†nh c√¥ng!")
            st.info("üìÅ Files ƒë∆∞·ª£c l∆∞u t·∫°i: exports/quyet_dinh_nghi_huu_*.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t quy·∫øt ƒë·ªãnh: {str(e)}")
    
    @staticmethod
    def export_early_salary_proposals():
        """Xu·∫•t ƒë·ªÅ xu·∫•t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n"""
        try:
            # TODO: Implement salary proposal documents
            st.success("‚úÖ ƒê√£ xu·∫•t ƒë·ªÅ xu·∫•t n√¢ng l∆∞∆°ng tr∆∞·ªõc th·ªùi h·∫°n th√†nh c√¥ng!")
            st.info("üìÅ Files ƒë∆∞·ª£c l∆∞u t·∫°i: exports/de_xuat_nang_luong_truoc_han_*.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t ƒë·ªÅ xu·∫•t: {str(e)}")
    
    @staticmethod
    def export_all_retirement_documents():
        """Xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n ngh·ªâ h∆∞u"""
        try:
            RetirementManagementSystem.export_retirement_notifications()
            RetirementManagementSystem.export_retirement_decisions()
            if hasattr(st.session_state, 'early_salary_candidates'):
                RetirementManagementSystem.export_early_salary_proposals()
            
            st.success("üéâ ƒê√£ xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n ngh·ªâ h∆∞u th√†nh c√¥ng!")
            st.balloons()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t vƒÉn b·∫£n: {str(e)}")

# Main function to render retirement management page
def render_retirement_management_page():
    """Render trang qu·∫£n l√Ω ngh·ªâ h∆∞u - ƒë∆∞·ª£c g·ªçi t·ª´ main app"""
    RetirementManagementSystem.render_retirement_management_page()
