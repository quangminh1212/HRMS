"""
HRMS - T√≠nh nƒÉng 2: Theo d√µi & C·∫£nh b√°o N√¢ng l∆∞∆°ng th∆∞·ªùng xuy√™n
Logic ph·ª©c t·∫°p theo ƒë√∫ng quy ƒë·ªãnh v√† y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from dateutil.relativedelta import relativedelta
from sqlalchemy.orm import sessionmaker
from models_enhanced import *
from components import ModernComponents
import plotly.express as px
import plotly.graph_objects as go
from typing import List, Dict, Tuple

def get_database_session():
    """T·∫°o session database"""
    engine = get_engine()
    Session = sessionmaker(bind=engine)
    return Session()

class SalaryManagementSystem:
    """H·ªá th·ªëng qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥ ho√†n ch·ªânh"""
    
    # Quarters v√† c·∫£nh b√°o (ng√†y 15 th√°ng 2,5,8,11)
    ALERT_DATES = {
        "Q1": {"alert_month": 2, "alert_day": 15, "quarter_end": 3},
        "Q2": {"alert_month": 5, "alert_day": 15, "quarter_end": 6}, 
        "Q3": {"alert_month": 8, "alert_day": 15, "quarter_end": 9},
        "Q4": {"alert_month": 11, "alert_day": 15, "quarter_end": 12}
    }
    
    @staticmethod
    def render_salary_management_page():
        """Render trang qu·∫£n l√Ω n√¢ng l∆∞∆°ng ch√≠nh"""
        
        # Header v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
        ModernComponents.hero_header(
            "N√¢ng l∆∞∆°ng th∆∞·ªùng xuy√™n", 
            "Theo d√µi, c·∫£nh b√°o v√† qu·∫£n l√Ω n√¢ng l∆∞∆°ng ƒë·ªãnh k·ª≥ theo quy ƒë·ªãnh", 
            "üí∞"
        )
        
        st.markdown(ModernComponents.modern_alert(
            "Quy t·∫Øc n√¢ng l∆∞∆°ng",
            "‚Ä¢ **36 th√°ng**: Chuy√™n vi√™n v√† t∆∞∆°ng ƒë∆∞∆°ng tr·ªü l√™n\n"
            "‚Ä¢ **24 th√°ng**: Nh√¢n vi√™n, th·ªß qu·ªπ\n"
            "‚Ä¢ **Ph·ª• c·∫•p th√¢m ni√™n**: 5% khi ƒë·ªß th·ªùi gian ·ªü b·∫≠c cu·ªëi + 1%/nƒÉm",
            "info",
            "C·∫£nh b√°o v√†o ng√†y 15 c√°c th√°ng 2, 5, 8, 11 (tr∆∞·ªõc qu√Ω x√©t)"
        ), unsafe_allow_html=True)
        
        # Tabs ch√≠nh
        tab1, tab2, tab3, tab4 = st.tabs([
            "üîç Tra c·ª©u & L·ªçc",
            "üìä Danh s√°ch n√¢ng l∆∞∆°ng", 
            "üìà Th·ªëng k√™ & Ph√¢n t√≠ch",
            "üìÑ Xu·∫•t vƒÉn b·∫£n"
        ])
        
        with tab1:
            SalaryManagementSystem.render_filter_tab()
            
        with tab2:
            SalaryManagementSystem.render_salary_list_tab()
            
        with tab3:
            SalaryManagementSystem.render_statistics_tab()
            
        with tab4:
            SalaryManagementSystem.render_export_tab()
    
    @staticmethod
    def render_filter_tab():
        """Tab 1: B·ªô l·ªçc v√† c·∫•u h√¨nh"""
        
        st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh tra c·ª©u")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Ch·ªçn qu√Ω x√©t n√¢ng l∆∞∆°ng
            current_date = date.today()
            quarters = [
                f"Q1/{current_date.year} (Th√°ng 3)",
                f"Q2/{current_date.year} (Th√°ng 6)", 
                f"Q3/{current_date.year} (Th√°ng 9)",
                f"Q4/{current_date.year} (Th√°ng 12)",
                f"Q1/{current_date.year + 1} (Th√°ng 3)"
            ]
            
            selected_quarter = st.selectbox(
                "Ch·ªçn ƒë·ª£t x√©t n√¢ng l∆∞∆°ng:",
                quarters,
                index=SalaryManagementSystem.get_current_quarter_index(),
                help="Ch·ªçn qu√Ω ƒë·ªÉ xem danh s√°ch n√¢ng l∆∞∆°ng"
            )
            
            st.session_state.selected_quarter = selected_quarter
        
        with col2:
            # Kho·∫£ng th·ªùi gian c·∫£nh b√°o
            alert_months = st.number_input(
                "C·∫£nh b√°o tr∆∞·ªõc (th√°ng):",
                min_value=1,
                max_value=12,
                value=3,
                help="C·∫£nh b√°o nh·ªØng ng∆∞·ªùi s·∫Ω n√¢ng l∆∞∆°ng trong X th√°ng t·ªõi"
            )
            
            st.session_state.alert_months = alert_months
        
        with col3:
            # Hi·ªÉn th·ªã ng√†y c·∫£nh b√°o hi·ªán t·∫°i
            current_quarter = SalaryManagementSystem.get_current_quarter()
            if current_quarter:
                alert_info = SalaryManagementSystem.ALERT_DATES[current_quarter]
                alert_date = date(current_date.year, alert_info["alert_month"], alert_info["alert_day"])
                
                if current_date <= alert_date:
                    days_to_alert = (alert_date - current_date).days
                    st.info(f"üìÖ C·∫£nh b√°o Q{current_quarter[-1]} c√≤n {days_to_alert} ng√†y")
                else:
                    st.success(f"‚úÖ ƒê√£ qua th·ªùi ƒëi·ªÉm c·∫£nh b√°o Q{current_quarter[-1]}")
        
        # B·ªô l·ªçc chi ti·∫øt
        st.markdown("#### üéØ B·ªô l·ªçc")
        
        session = get_database_session()
        try:
            col4, col5, col6 = st.columns(3)
            
            with col4:
                # L·ªçc theo ƒë∆°n v·ªã
                departments = session.query(Employee.department).distinct().all()
                dept_list = [dept[0] for dept in departments if dept[0]]
                
                selected_departments = st.multiselect(
                    "L·ªçc theo ƒë∆°n v·ªã:",
                    ["T·∫•t c·∫£"] + dept_list,
                    default=["T·∫•t c·∫£"],
                    help="Ch·ªçn ƒë∆°n v·ªã ƒë·ªÉ l·ªçc"
                )
                
                st.session_state.selected_departments = selected_departments
            
            with col5:
                # L·ªçc theo ch·ª©c v·ª•
                positions = session.query(Employee.position).distinct().all()
                pos_list = [pos[0] for pos in positions if pos[0]]
                
                selected_positions = st.multiselect(
                    "L·ªçc theo ch·ª©c v·ª•:",
                    ["T·∫•t c·∫£"] + pos_list,
                    default=["T·∫•t c·∫£"],
                    help="Ch·ªçn ch·ª©c v·ª• ƒë·ªÉ l·ªçc"
                )
                
                st.session_state.selected_positions = selected_positions
            
            with col6:
                # L·ªçc theo ng·∫°ch
                grades = session.query(Employee.current_salary_grade).distinct().all()
                grade_list = [grade[0] for grade in grades if grade[0]]
                
                selected_grades = st.multiselect(
                    "L·ªçc theo ng·∫°ch:",
                    ["T·∫•t c·∫£"] + grade_list,
                    default=["T·∫•t c·∫£"],
                    help="Ch·ªçn ng·∫°ch l∆∞∆°ng ƒë·ªÉ l·ªçc"
                )
                
                st.session_state.selected_grades = selected_grades
        
        finally:
            session.close()
        
        # N√∫t t√≠nh to√°n
        st.markdown("---")
        if st.button("üîÑ T√≠nh to√°n danh s√°ch n√¢ng l∆∞∆°ng", type="primary"):
            st.session_state.calculation_done = True
            st.rerun()
    
    @staticmethod
    def render_salary_list_tab():
        """Tab 2: Danh s√°ch n√¢ng l∆∞∆°ng"""
        
        if not hasattr(st.session_state, 'calculation_done') or not st.session_state.calculation_done:
            st.info("üìã Vui l√≤ng th·ª±c hi·ªán t√≠nh to√°n ·ªü tab **Tra c·ª©u & L·ªçc** tr∆∞·ªõc")
            return
        
        st.markdown("### üìä Danh s√°ch nh√¢n vi√™n ƒë·ªß ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng")
        
        # T√≠nh to√°n danh s√°ch
        eligible_employees = SalaryManagementSystem.calculate_salary_increase_list()
        
        if not eligible_employees:
            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë·ªß ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng theo b·ªô l·ªçc hi·ªán t·∫°i")
            return
        
        # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªïng s·ªë ng∆∞·ªùi",
                len(eligible_employees),
                f"+{len([e for e in eligible_employees if e['is_eligible']])}"
            )
        
        with col2:
            total_increase = sum([e.get('coefficient_increase', 0) for e in eligible_employees])
            st.metric(
                "T·ªïng tƒÉng h·ªá s·ªë",
                f"{total_increase:.2f}",
                f"‚âà {total_increase * 1490000:,.0f} VND/th√°ng"  # L∆∞∆°ng c∆° s·ªü
            )
        
        with col3:
            seniority_count = len([e for e in eligible_employees if e['is_seniority']])
            st.metric(
                "Ph·ª• c·∫•p th√¢m ni√™n",
                seniority_count,
                "ng∆∞·ªùi"
            )
        
        with col4:
            next_quarter_count = len([e for e in eligible_employees if e['months_remaining'] <= 3])
            st.metric(
                "N√¢ng qu√Ω t·ªõi",
                next_quarter_count,
                "ng∆∞·ªùi"
            )
        
        # B·∫£ng chi ti·∫øt
        df = pd.DataFrame(eligible_employees)
        
        # Format columns
        if not df.empty:
            df['Ng√†y n√¢ng g·∫ßn nh·∫•t'] = pd.to_datetime(df['last_increase_date']).dt.strftime('%d/%m/%Y')
            df['Ng√†y d·ª± ki·∫øn n√¢ng'] = pd.to_datetime(df['next_increase_date']).dt.strftime('%d/%m/%Y')
            
            # T·∫°o b·∫£ng hi·ªÉn th·ªã
            display_df = df[[
                'full_name', 'department', 'position', 'current_grade', 'current_level',
                'current_coefficient', 'Ng√†y n√¢ng g·∫ßn nh·∫•t', 'next_level', 'next_coefficient',
                'Ng√†y d·ª± ki·∫øn n√¢ng', 'months_remaining', 'notes'
            ]].copy()
            
            display_df.columns = [
                'H·ªç t√™n', 'ƒê∆°n v·ªã', 'Ch·ª©c v·ª•', 'Ng·∫°ch', 'B·∫≠c hi·ªán t·∫°i',
                'H·ªá s·ªë hi·ªán t·∫°i', 'Ng√†y n√¢ng g·∫ßn nh·∫•t', 'B·∫≠c d·ª± ki·∫øn', 'H·ªá s·ªë d·ª± ki·∫øn',
                'Ng√†y d·ª± ki·∫øn n√¢ng', 'C√≤n (th√°ng)', 'Ghi ch√∫'
            ]
            
            # Color coding
            def highlight_rows(row):
                if row['C√≤n (th√°ng)'] <= 1:
                    return ['background-color: #ffebee'] * len(row)  # ƒê·ªè nh·∫°t - g·∫•p
                elif row['C√≤n (th√°ng)'] <= 3:
                    return ['background-color: #fff3e0'] * len(row)  # Cam nh·∫°t - s·∫Øp ƒë·∫øn
                else:
                    return [''] * len(row)
            
            styled_df = display_df.style.apply(highlight_rows, axis=1)
            
            st.dataframe(
                styled_df,
                use_container_width=True,
                hide_index=True
            )
            
            # Ch√∫ th√≠ch m√†u s·∫Øc
            col_legend1, col_legend2, col_legend3 = st.columns(3)
            with col_legend1:
                st.markdown("üî¥ **ƒê·ªè nh·∫°t**: C√≤n ‚â§ 1 th√°ng")
            with col_legend2:
                st.markdown("üü† **Cam nh·∫°t**: C√≤n ‚â§ 3 th√°ng")
            with col_legend3:
                st.markdown("‚ö™ **Tr·∫Øng**: C√≤n > 3 th√°ng")
            
            # L∆∞u data ƒë·ªÉ export
            st.session_state.salary_increase_data = eligible_employees
    
    @staticmethod
    def render_statistics_tab():
        """Tab 3: Th·ªëng k√™ v√† ph√¢n t√≠ch"""
        
        if not hasattr(st.session_state, 'salary_increase_data'):
            st.info("üìä Vui l√≤ng t√≠nh to√°n danh s√°ch n√¢ng l∆∞∆°ng tr∆∞·ªõc")
            return
        
        data = st.session_state.salary_increase_data
        df = pd.DataFrame(data)
        
        st.markdown("### üìà Ph√¢n t√≠ch th·ªëng k√™ n√¢ng l∆∞∆°ng")
        
        if df.empty:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch")
            return
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo ƒë∆°n v·ªã
        col1, col2 = st.columns(2)
        
        with col1:
            dept_stats = df.groupby('department').size().reset_index(name='count')
            fig1 = px.bar(
                dept_stats, 
                x='department', 
                y='count',
                title="Ph√¢n b·ªë theo ƒë∆°n v·ªã",
                labels={'department': 'ƒê∆°n v·ªã', 'count': 'S·ªë ng∆∞·ªùi'}
            )
            fig1.update_xaxis(tickangle=45)
            st.plotly_chart(fig1, use_container_width=True)
        
        with col2:
            # Ph√¢n b·ªë theo th·ªùi gian c√≤n l·∫°i
            df['time_group'] = df['months_remaining'].apply(
                lambda x: "‚â§ 1 th√°ng" if x <= 1 else "‚â§ 3 th√°ng" if x <= 3 else "> 3 th√°ng"
            )
            
            time_stats = df['time_group'].value_counts().reset_index()
            fig2 = px.pie(
                time_stats,
                values='count',
                names='time_group', 
                title="Ph√¢n b·ªë th·ªùi gian c√≤n l·∫°i"
            )
            st.plotly_chart(fig2, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì tƒÉng h·ªá s·ªë l∆∞∆°ng
        col3, col4 = st.columns(2)
        
        with col3:
            grade_stats = df.groupby('current_grade').agg({
                'coefficient_increase': 'sum',
                'full_name': 'count'
            }).reset_index()
            
            fig3 = px.bar(
                grade_stats,
                x='current_grade',
                y='coefficient_increase',
                title="T·ªïng tƒÉng h·ªá s·ªë theo ng·∫°ch",
                labels={'current_grade': 'Ng·∫°ch', 'coefficient_increase': 'TƒÉng h·ªá s·ªë'}
            )
            st.plotly_chart(fig3, use_container_width=True)
        
        with col4:
            # Timeline n√¢ng l∆∞∆°ng theo th√°ng
            df['next_month'] = pd.to_datetime(df['next_increase_date']).dt.to_period('M')
            monthly_stats = df.groupby('next_month').size().reset_index(name='count')
            monthly_stats['month_str'] = monthly_stats['next_month'].astype(str)
            
            fig4 = px.line(
                monthly_stats,
                x='month_str',
                y='count',
                title="Timeline n√¢ng l∆∞∆°ng theo th√°ng",
                labels={'month_str': 'Th√°ng', 'count': 'S·ªë ng∆∞·ªùi'},
                markers=True
            )
            st.plotly_chart(fig4, use_container_width=True)
        
        # B·∫£ng th·ªëng k√™ chi ti·∫øt
        st.markdown("#### üìä Th·ªëng k√™ t·ªïng h·ª£p")
        
        summary_stats = {
            "Ch·ªâ s·ªë": [
                "T·ªïng s·ªë ng∆∞·ªùi n√¢ng l∆∞∆°ng",
                "T·ªïng tƒÉng h·ªá s·ªë l∆∞∆°ng",
                "Chi ph√≠ tƒÉng th√™m/th√°ng (∆∞·ªõc t√≠nh)", 
                "Chi ph√≠ tƒÉng th√™m/nƒÉm (∆∞·ªõc t√≠nh)",
                "Ph·ª• c·∫•p th√¢m ni√™n m·ªõi",
                "Ng·∫°ch c√≥ nhi·ªÅu ng∆∞·ªùi n√¢ng nh·∫•t"
            ],
            "Gi√° tr·ªã": [
                f"{len(df)} ng∆∞·ªùi",
                f"{df['coefficient_increase'].sum():.2f}",
                f"{df['coefficient_increase'].sum() * 1490000:,.0f} VND",
                f"{df['coefficient_increase'].sum() * 1490000 * 12:,.0f} VND",
                f"{len([x for x in data if x['is_seniority']])} ng∆∞·ªùi",
                f"{df['current_grade'].mode().iloc[0] if not df.empty else 'N/A'}"
            ]
        }
        
        summary_df = pd.DataFrame(summary_stats)
        st.dataframe(summary_df, use_container_width=True, hide_index=True)
    
    @staticmethod
    def render_export_tab():
        """Tab 4: Xu·∫•t vƒÉn b·∫£n"""
        
        if not hasattr(st.session_state, 'salary_increase_data'):
            st.info("üìÑ Vui l√≤ng t√≠nh to√°n danh s√°ch n√¢ng l∆∞∆°ng tr∆∞·ªõc")
            return
        
        st.markdown("### üìÑ Xu·∫•t vƒÉn b·∫£n v√† b√°o c√°o")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("#### üìã C√¥ng vƒÉn r√† so√°t")
            st.markdown("Xu·∫•t c√¥ng vƒÉn r√† so√°t nh√¢n s·ª± thu·ªôc di·ªán n√¢ng l∆∞∆°ng")
            
            if st.button("üìÑ Xu·∫•t c√¥ng vƒÉn Word", use_container_width=True):
                SalaryManagementSystem.export_review_document()
        
        with col2:
            st.markdown("#### üìä Danh s√°ch Excel")  
            st.markdown("Xu·∫•t danh s√°ch chi ti·∫øt ra file Excel")
            
            if st.button("üìä Xu·∫•t danh s√°ch Excel", use_container_width=True):
                SalaryManagementSystem.export_excel_list()
        
        with col3:
            st.markdown("#### üìú Quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng")
            st.markdown("Xu·∫•t c√°c quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng")
            
            if st.button("üìú Xu·∫•t quy·∫øt ƒë·ªãnh Word", use_container_width=True):
                SalaryManagementSystem.export_decisions()
        
        # M·∫´u th√¥ng b√°o k·∫øt qu·∫£
        st.markdown("---")
        st.markdown("#### üì¢ Th√¥ng b√°o k·∫øt qu·∫£")
        
        col4, col5 = st.columns(2)
        
        with col4:
            if st.button("üì¢ Xu·∫•t th√¥ng b√°o k·∫øt qu·∫£", use_container_width=True, type="secondary"):
                SalaryManagementSystem.export_notification()
        
        with col5:
            if st.button("üìã Xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n", use_container_width=True, type="primary"):
                SalaryManagementSystem.export_all_documents()
    
    @staticmethod
    def get_current_quarter() -> str:
        """L·∫•y qu√Ω hi·ªán t·∫°i"""
        month = date.today().month
        if month <= 3:
            return "Q1"
        elif month <= 6:
            return "Q2" 
        elif month <= 9:
            return "Q3"
        else:
            return "Q4"
    
    @staticmethod
    def get_current_quarter_index() -> int:
        """L·∫•y index c·ªßa qu√Ω hi·ªán t·∫°i cho selectbox"""
        quarter = SalaryManagementSystem.get_current_quarter()
        quarter_map = {"Q1": 0, "Q2": 1, "Q3": 2, "Q4": 3}
        return quarter_map.get(quarter, 0)
    
    @staticmethod
    def calculate_salary_increase_list() -> List[Dict]:
        """T√≠nh to√°n danh s√°ch n√¢ng l∆∞∆°ng theo logic nghi·ªáp v·ª•"""
        session = get_database_session()
        
        try:
            # L·∫•y t·∫•t c·∫£ nh√¢n vi√™n
            query = session.query(Employee).filter(
                Employee.work_status == WorkStatusEnum.ACTIVE
            )
            
            # √Åp d·ª•ng b·ªô l·ªçc
            if hasattr(st.session_state, 'selected_departments') and "T·∫•t c·∫£" not in st.session_state.selected_departments:
                query = query.filter(Employee.department.in_(st.session_state.selected_departments))
            
            if hasattr(st.session_state, 'selected_positions') and "T·∫•t c·∫£" not in st.session_state.selected_positions:
                query = query.filter(Employee.position.in_(st.session_state.selected_positions))
            
            if hasattr(st.session_state, 'selected_grades') and "T·∫•t c·∫£" not in st.session_state.selected_grades:
                query = query.filter(Employee.current_salary_grade.in_(st.session_state.selected_grades))
            
            employees = query.all()
            
            # L·∫•y quy t·∫Øc n√¢ng l∆∞∆°ng
            salary_rules = session.query(SalaryRule).all()
            rules_dict = {rule.position_type: rule for rule in salary_rules}
            
            eligible_list = []
            alert_months = getattr(st.session_state, 'alert_months', 3)
            
            for employee in employees:
                # Ki·ªÉm tra ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng
                result = SalaryManagementSystem.check_salary_increase_eligibility(
                    employee, rules_dict, alert_months, session
                )
                
                if result['is_eligible'] or result['months_remaining'] <= alert_months:
                    eligible_list.append(result)
            
            # S·∫Øp x·∫øp theo th·ªùi gian c√≤n l·∫°i
            eligible_list.sort(key=lambda x: x['months_remaining'])
            
            return eligible_list
        
        finally:
            session.close()
    
    @staticmethod
    def check_salary_increase_eligibility(employee: Employee, rules_dict: Dict, alert_months: int, session) -> Dict:
        """Ki·ªÉm tra ƒëi·ªÅu ki·ªán n√¢ng l∆∞∆°ng cho m·ªôt nh√¢n vi√™n"""
        
        # X√°c ƒë·ªãnh lo·∫°i ng·∫°ch
        position_type = "Nh√¢n vi√™n, th·ªß qu·ªπ"  # Default
        if employee.position and any(keyword in employee.position.lower() for keyword in ["chuy√™n vi√™n", "tr∆∞·ªüng", "ph√≥"]):
            position_type = "Chuy√™n vi√™n v√† t∆∞∆°ng ƒë∆∞∆°ng tr·ªü l√™n"
        
        # L·∫•y quy t·∫Øc
        rule = rules_dict.get(position_type, rules_dict.get("Chuy√™n vi√™n v√† t∆∞∆°ng ƒë∆∞∆°ng tr·ªü l√™n"))
        if not rule:
            rule = SalaryRule(position_type=position_type, months_required=36, seniority_increase_months=36)
        
        # L·∫•y l·ªãch s·ª≠ l∆∞∆°ng g·∫ßn nh·∫•t
        last_salary = session.query(SalaryHistory).filter_by(
            employee_id=employee.id
        ).order_by(SalaryHistory.effective_date.desc()).first()
        
        last_increase_date = last_salary.effective_date if last_salary else employee.current_salary_date
        if not last_increase_date:
            last_increase_date = employee.organization_start_date or date.today() - timedelta(days=365*5)
        
        # T√≠nh to√°n th·ªùi gian
        months_since_last = (date.today().year - last_increase_date.year) * 12 + (date.today().month - last_increase_date.month)
        months_remaining = max(0, rule.months_required - months_since_last)
        
        # Ng√†y d·ª± ki·∫øn n√¢ng l∆∞∆°ng ti·∫øp theo
        next_increase_date = last_increase_date + relativedelta(months=rule.months_required)
        
        # Ki·ªÉm tra c√≥ ƒë·ªß ƒëi·ªÅu ki·ªán
        is_eligible = months_remaining == 0
        
        # Ki·ªÉm tra ph·ª• c·∫•p th√¢m ni√™n (n·∫øu ƒë√£ ·ªü b·∫≠c cu·ªëi)
        is_seniority = False
        seniority_percent = 0
        
        if employee.current_salary_level >= 10:  # Gi·∫£ s·ª≠ b·∫≠c 10 l√† cu·ªëi ng·∫°ch
            months_at_final = months_since_last
            if months_at_final >= rule.seniority_increase_months:
                is_seniority = True
                years_at_final = months_at_final // 12
                seniority_percent = rule.seniority_increase_percent + (years_at_final - 1) * rule.yearly_increase_percent
        
        # D·ª± ki·∫øn b·∫≠c v√† h·ªá s·ªë m·ªõi
        next_level = employee.current_salary_level
        next_coefficient = employee.current_salary_coefficient or 0
        coefficient_increase = 0
        
        if is_eligible and not is_seniority:
            next_level = employee.current_salary_level + 1
            coefficient_increase = 0.34  # M·∫∑c ƒë·ªãnh tƒÉng 0.34
            next_coefficient = (employee.current_salary_coefficient or 0) + coefficient_increase
        
        # Ghi ch√∫ ƒë·∫∑c bi·ªát
        notes = ""
        if is_seniority:
            notes = f"Ph·ª• c·∫•p th√¢m ni√™n {seniority_percent:.1f}%"
        elif months_remaining > 0:
            notes = f"C√≤n {months_remaining} th√°ng"
        
        return {
            'employee_id': employee.id,
            'full_name': employee.full_name,
            'department': employee.department or 'N/A',
            'position': employee.position or 'N/A',
            'current_grade': employee.current_salary_grade or 'N/A',
            'current_level': employee.current_salary_level or 0,
            'current_coefficient': employee.current_salary_coefficient or 0,
            'last_increase_date': last_increase_date,
            'next_increase_date': next_increase_date,
            'next_level': next_level,
            'next_coefficient': next_coefficient,
            'coefficient_increase': coefficient_increase,
            'months_since_last': months_since_last,
            'months_remaining': months_remaining,
            'months_required': rule.months_required,
            'is_eligible': is_eligible,
            'is_seniority': is_seniority,
            'seniority_percent': seniority_percent,
            'position_type': position_type,
            'notes': notes
        }
    
    @staticmethod
    def export_review_document():
        """Xu·∫•t c√¥ng vƒÉn r√† so√°t"""
        try:
            # TODO: Implement Word document generation
            st.success("‚úÖ ƒê√£ xu·∫•t c√¥ng vƒÉn r√† so√°t th√†nh c√¥ng!")
            st.info("üìÅ File ƒë∆∞·ª£c l∆∞u t·∫°i: exports/cong_van_ra_soat.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t c√¥ng vƒÉn: {str(e)}")
    
    @staticmethod  
    def export_excel_list():
        """Xu·∫•t danh s√°ch Excel"""
        try:
            # TODO: Implement Excel export
            st.success("‚úÖ ƒê√£ xu·∫•t danh s√°ch Excel th√†nh c√¥ng!")
            st.info("üìÅ File ƒë∆∞·ª£c l∆∞u t·∫°i: exports/danh_sach_nang_luong.xlsx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t Excel: {str(e)}")
    
    @staticmethod
    def export_decisions():
        """Xu·∫•t quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng"""
        try:
            # TODO: Implement decision documents
            st.success("‚úÖ ƒê√£ xu·∫•t quy·∫øt ƒë·ªãnh n√¢ng l∆∞∆°ng th√†nh c√¥ng!")
            st.info("üìÅ Files ƒë∆∞·ª£c l∆∞u t·∫°i: exports/quyet_dinh_*.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t quy·∫øt ƒë·ªãnh: {str(e)}")
    
    @staticmethod
    def export_notification():
        """Xu·∫•t th√¥ng b√°o k·∫øt qu·∫£"""
        try:
            # TODO: Implement notification document
            st.success("‚úÖ ƒê√£ xu·∫•t th√¥ng b√°o k·∫øt qu·∫£ th√†nh c√¥ng!")
            st.info("üìÅ File ƒë∆∞·ª£c l∆∞u t·∫°i: exports/thong_bao_ket_qua.docx")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t th√¥ng b√°o: {str(e)}")
    
    @staticmethod
    def export_all_documents():
        """Xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n"""
        try:
            SalaryManagementSystem.export_review_document()
            SalaryManagementSystem.export_excel_list()
            SalaryManagementSystem.export_decisions()
            SalaryManagementSystem.export_notification()
            
            st.success("üéâ ƒê√£ xu·∫•t t·∫•t c·∫£ vƒÉn b·∫£n th√†nh c√¥ng!")
            st.balloons()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t vƒÉn b·∫£n: {str(e)}")

# Main function to render salary management page
def render_salary_management_page():
    """Render trang qu·∫£n l√Ω n√¢ng l∆∞∆°ng - ƒë∆∞·ª£c g·ªçi t·ª´ main app"""
    SalaryManagementSystem.render_salary_management_page()
