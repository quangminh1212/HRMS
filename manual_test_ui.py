#!/usr/bin/env python3
"""
Manual UI Testing Script for HRMS

Script h∆∞·ªõng d·∫´n test th·ªß c√¥ng t·∫•t c·∫£ c√°c l·ª±a ch·ªçn UI
"""

import time
import requests
import subprocess
from pathlib import Path

def test_option(option_num: str, option_name: str, port: int, timeout: int = 30):
    """Test a single UI option manually."""
    print(f"\n{'='*60}")
    print(f"üß™ TESTING OPTION {option_num}: {option_name}")
    print(f"{'='*60}")
    
    print(f"1. M·ªü Command Prompt m·ªõi")
    print(f"2. Ch·∫°y: run.bat")
    print(f"3. Ch·ªçn option: {option_num}")
    print(f"4. ƒê·ª£i ·ª©ng d·ª•ng kh·ªüi ƒë·ªông...")
    
    input("Nh·∫•n Enter khi ƒë√£ ch·∫°y xong b∆∞·ªõc tr√™n...")
    
    # Check if port is accessible
    print(f"\nüîç Ki·ªÉm tra port {port}...")
    
    for i in range(timeout):
        try:
            response = requests.get(f"http://localhost:{port}", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Port {port} accessible - {option_name} ƒëang ch·∫°y!")
                
                # Open browser
                import webbrowser
                webbrowser.open(f"http://localhost:{port}")
                
                print(f"\nüìã Checklist cho {option_name}:")
                print("  ‚ñ° Giao di·ªán hi·ªÉn th·ªã ƒë√∫ng")
                print("  ‚ñ° C√≥ th·ªÉ ƒëƒÉng nh·∫≠p (admin/admin123)")
                print("  ‚ñ° Menu navigation ho·∫°t ƒë·ªông")
                print("  ‚ñ° D·ªØ li·ªáu hi·ªÉn th·ªã ƒë√∫ng")
                
                result = input("\nOption n√†y c√≥ ho·∫°t ƒë·ªông t·ªët kh√¥ng? (y/n): ").lower()
                
                if result == 'y':
                    print(f"‚úÖ {option_name} - PASS")
                    return True
                else:
                    print(f"‚ùå {option_name} - FAIL")
                    return False
                    
        except requests.exceptions.RequestException:
            print(f"‚è≥ ƒêang ƒë·ª£i... ({i+1}/{timeout})")
            time.sleep(1)
    
    print(f"‚ùå {option_name} - Kh√¥ng th·ªÉ k·∫øt n·ªëi sau {timeout}s")
    return False

def main():
    """Main testing function."""
    print("üè¢ HRMS UI OPTIONS MANUAL TESTING")
    print("="*50)
    print("Script n√†y s·∫Ω h∆∞·ªõng d·∫´n b·∫°n test t·ª´ng option m·ªôt c√°ch th·ªß c√¥ng")
    print("ƒê·∫£m b·∫£o kh√¥ng c√≥ process n√†o ƒëang ch·∫°y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu")
    
    input("\nNh·∫•n Enter ƒë·ªÉ b·∫Øt ƒë·∫ßu...")
    
    # Test configurations
    options = [
        ("1", "HRMS Modern", 3000),
        ("2", "Quick Start", 3000),
        ("3", "Launcher Menu", 8080),
        ("4", "Streamlit Classic", 8501),
        ("5", "Flet (Flutter UI)", 8550),
        ("6", "NiceGUI (Tailwind)", 8080),
        ("7", "Manual Mode", 3000)
    ]
    
    results = []
    
    for option_num, option_name, port in options:
        try:
            result = test_option(option_num, option_name, port)
            results.append((option_num, option_name, result))
            
            # Ask to continue
            if option_num != "7":  # Not the last option
                continue_test = input(f"\nTi·∫øp t·ª•c test option ti·∫øp theo? (y/n): ").lower()
                if continue_test != 'y':
                    break
                    
                print("\n‚ö†Ô∏è H√£y d·ª´ng ·ª©ng d·ª•ng hi·ªán t·∫°i tr∆∞·ªõc khi test option ti·∫øp theo")
                input("Nh·∫•n Enter khi ƒë√£ d·ª´ng...")
                
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Test b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
            break
        except Exception as e:
            print(f"\n‚ùå L·ªói khi test {option_name}: {e}")
            results.append((option_num, option_name, False))
    
    # Print summary
    print(f"\n{'='*60}")
    print("üìä K·∫æT QU·∫¢ TEST T·ªîNG H·ª¢P")
    print(f"{'='*60}")
    
    passed = 0
    total = len(results)
    
    for option_num, option_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"[{option_num}] {option_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà T·ªïng k·∫øt:")
    print(f"  T·ªïng s·ªë test: {total}")
    print(f"  Th√†nh c√¥ng: {passed}")
    print(f"  Th·∫•t b·∫°i: {total - passed}")
    print(f"  T·ª∑ l·ªá th√†nh c√¥ng: {(passed/total)*100:.1f}%" if total > 0 else "0%")
    
    if passed == total:
        print("\nüéâ T·∫•t c·∫£ UI options ƒë·ªÅu ho·∫°t ƒë·ªông t·ªët!")
    elif passed >= total * 0.7:
        print("\nüëç Ph·∫ßn l·ªõn UI options ho·∫°t ƒë·ªông t·ªët!")
    else:
        print("\n‚ö†Ô∏è C·∫ßn ki·ªÉm tra v√† s·ª≠a l·ªói m·ªôt s·ªë UI options.")

if __name__ == "__main__":
    main()
