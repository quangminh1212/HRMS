"""
HRMS - T√≠nh nƒÉng 1: Tra c·ª©u nh√¢n s·ª± ƒë·∫ßy ƒë·ªß
Theo ƒë√∫ng y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v·ªõi 5 tabs th√¥ng tin v√† export Word
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
from sqlalchemy.orm import sessionmaker
from models_enhanced import *
from components import ModernComponents
import plotly.express as px
import plotly.graph_objects as go

def get_database_session():
    """T·∫°o session database"""
    engine = get_engine() 
    Session = sessionmaker(bind=engine)
    return Session()

class EmployeeSearchSystem:
    """H·ªá th·ªëng tra c·ª©u nh√¢n s·ª± ho√†n ch·ªânh"""
    
    @staticmethod
    def render_search_page():
        """Render trang tra c·ª©u nh√¢n s·ª± ch√≠nh"""
        
        # Header v·ªõi h∆∞·ªõng d·∫´n
        ModernComponents.hero_header(
            "Tra c·ª©u th√¥ng tin nh√¢n s·ª±", 
            "T√¨m ki·∫øm v√† xem chi ti·∫øt th√¥ng tin nh√¢n vi√™n - ~150 ng∆∞·ªùi c√≥ th·ªÉ b·ªï sung", 
            "üîç"
        )
        
        st.markdown(ModernComponents.modern_alert(
            "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            "1. G√µ t√™n nh√¢n s·ª± c·∫ßn t√¨m v√†o √¥ t√¨m ki·∫øm\n2. Ch·ªçn nh√¢n vi√™n t·ª´ k·∫øt qu·∫£\n3. Xem th√¥ng tin qua 5 tabs chi ti·∫øt\n4. Xu·∫•t file Word ho·∫∑c chuy·ªÉn sang ch·ª©c nƒÉng kh√°c",
            "info",
            "H·ªó tr·ª£ t√¨m ki·∫øm theo t√™n, ch·ª©c v·ª•, ph√≤ng ban"
        ), unsafe_allow_html=True)
        
        # Search Box
        st.markdown("### üîç T√¨m ki·∫øm nh√¢n s·ª±")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            search_term = st.text_input(
                "Nh·∫≠p t√™n nh√¢n s·ª± c·∫ßn t√¨m:",
                placeholder="VD: Nguy·ªÖn VƒÉn An",
                help="C√≥ th·ªÉ t√¨m theo t√™n, ch·ª©c v·ª•, ho·∫∑c ph√≤ng ban"
            )
            
        with col2:
            search_button = st.button("üîç T√¨m ki·∫øm", type="primary")
        
        # Search Results
        if search_term or search_button:
            EmployeeSearchSystem.show_search_results(search_term)
    
    @staticmethod
    def show_search_results(search_term):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm"""
        session = get_database_session()
        
        try:
            # T√¨m ki·∫øm trong database
            query = session.query(Employee)
            
            if search_term:
                query = query.filter(
                    Employee.full_name.contains(search_term) |
                    Employee.position.contains(search_term) |
                    Employee.department.contains(search_term)
                )
            
            results = query.all()
            
            if not results:
                st.warning(f"Kh√¥ng t√¨m th·∫•y nh√¢n s·ª± v·ªõi t·ª´ kh√≥a '{search_term}'")
                return
            
            # Hi·ªÉn th·ªã danh s√°ch k·∫øt qu·∫£
            st.markdown(f"### üìã K·∫øt qu·∫£ t√¨m ki·∫øm ({len(results)} ng∆∞·ªùi)")
            
            # T·∫°o dataframe cho k·∫øt qu·∫£
            result_data = []
            for emp in results:
                result_data.append({
                    "ID": emp.id,
                    "H·ªç t√™n": emp.full_name,
                    "Ch·ª©c v·ª•": emp.position or "N/A",
                    "Ph√≤ng ban": emp.department or "N/A", 
                    "Ng·∫°ch/B·∫≠c": f"{emp.current_salary_grade or 'N/A'}/{emp.current_salary_level or 'N/A'}",
                    "Tr·∫°ng th√°i": emp.work_status.value if emp.work_status else "N/A"
                })
            
            df = pd.DataFrame(result_data)
            
            # Cho ph√©p ch·ªçn nh√¢n vi√™n
            selected_indices = st.dataframe(
                df,
                use_container_width=True,
                on_select="rerun",
                selection_mode="single-row",
                hide_index=True
            )
            
            if selected_indices.selection.rows:
                selected_index = selected_indices.selection.rows[0]
                selected_employee_id = df.iloc[selected_index]["ID"]
                
                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                EmployeeSearchSystem.show_employee_details(selected_employee_id)
        
        finally:
            session.close()
    
    @staticmethod
    def show_employee_details(employee_id):
        """Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt nh√¢n vi√™n qua 5 tabs"""
        session = get_database_session()
        
        try:
            employee = session.query(Employee).get(employee_id)
            if not employee:
                st.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n")
                return
            
            st.markdown("---")
            st.markdown(f"## üë§ Th√¥ng tin chi ti·∫øt: **{employee.full_name}**")
            
            # T·∫°o 5 tabs theo y√™u c·∫ßu
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "üìã Th√¥ng tin c∆° b·∫£n",
                "üíº C√¥ng t√°c & L∆∞∆°ng",
                "üéì ƒê√†o t·∫°o & Tr√¨nh ƒë·ªô", 
                "üèÜ Th√†nh t√≠ch & ƒê√°nh gi√°",
                "üìä Bi·ªÉu ƒë·ªì & Th·ªëng k√™"
            ])
            
            with tab1:
                EmployeeSearchSystem.render_basic_info_tab(employee)
                
            with tab2:
                EmployeeSearchSystem.render_work_salary_tab(employee, session)
                
            with tab3:
                EmployeeSearchSystem.render_education_tab(employee, session)
                
            with tab4:
                EmployeeSearchSystem.render_achievements_tab(employee, session)
                
            with tab5:
                EmployeeSearchSystem.render_statistics_tab(employee, session)
            
            # Action buttons
            EmployeeSearchSystem.render_action_buttons(employee)
            
        finally:
            session.close()
    
    @staticmethod
    def render_basic_info_tab(employee):
        """Tab 1: Th√¥ng tin c∆° b·∫£n"""
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë§ Th√¥ng tin c√° nh√¢n")
            st.markdown(f"**H·ªç v√† t√™n:** {employee.full_name}")
            st.markdown(f"**Ng√†y sinh:** {employee.date_of_birth.strftime('%d/%m/%Y') if employee.date_of_birth else 'N/A'}")
            st.markdown(f"**Gi·ªõi t√≠nh:** {employee.gender.value if employee.gender else 'N/A'}")
            st.markdown(f"**D√¢n t·ªôc:** {employee.ethnicity or 'N/A'}")
            st.markdown(f"**T√¥n gi√°o:** {employee.religion or 'N/A'}")
            st.markdown(f"**Qu√™ qu√°n:** {employee.hometown or 'N/A'}")
            
            # Tu·ªïi hi·ªán t·∫°i
            if employee.date_of_birth:
                age = (date.today() - employee.date_of_birth).days // 365
                st.markdown(f"**Tu·ªïi hi·ªán t·∫°i:** {age} tu·ªïi")
        
        with col2:
            st.markdown("#### üèõÔ∏è Th√¥ng tin c√¥ng t√°c")
            st.markdown(f"**Ch·ª©c v·ª•/ch·ª©c danh:** {employee.position or 'N/A'}")
            st.markdown(f"**ƒê∆°n v·ªã:** {employee.department or 'N/A'}")
            st.markdown(f"**Ng√†y v√†o ƒê·∫£ng:** {employee.party_join_date.strftime('%d/%m/%Y') if employee.party_join_date else 'N/A'}")
            st.markdown(f"**Tr·∫°ng th√°i c√¥ng t√°c:** {employee.work_status.value if employee.work_status else 'N/A'}")
            
            if employee.work_status_details:
                st.markdown(f"**Chi ti·∫øt tr·∫°ng th√°i:** {employee.work_status_details}")
        
        # Quy ho·∫°ch
        if employee.current_planning:
            st.markdown("#### üìà Quy ho·∫°ch")
            st.info(f"Ch·ª©c danh quy ho·∫°ch hi·ªán nay: **{employee.current_planning}**")
        
        # Li√™n h·ªá
        st.markdown("#### üìû Th√¥ng tin li√™n h·ªá")
        col3, col4 = st.columns(2)
        with col3:
            st.markdown(f"**ƒêi·ªán tho·∫°i:** {employee.phone or 'N/A'}")
        with col4:
            st.markdown(f"**Email:** {employee.email or 'N/A'}")
    
    @staticmethod 
    def render_work_salary_tab(employee, session):
        """Tab 2: C√¥ng t√°c & L∆∞∆°ng"""
        
        # Th√¥ng tin l∆∞∆°ng hi·ªán t·∫°i
        st.markdown("#### üí∞ L∆∞∆°ng hi·ªán h∆∞·ªüng")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                "Ng·∫°ch hi·ªán h∆∞·ªüng",
                employee.current_salary_grade or "N/A"
            )
        with col2:
            st.metric(
                "B·∫≠c l∆∞∆°ng", 
                employee.current_salary_level or "N/A"
            )
        with col3:
            st.metric(
                "H·ªá s·ªë l∆∞∆°ng",
                f"{employee.current_salary_coefficient:.2f}" if employee.current_salary_coefficient else "N/A"
            )
        
        # Th·ªùi ƒëi·ªÉm h∆∞·ªüng l∆∞∆°ng
        if employee.current_salary_date:
            st.markdown(f"**Th·ªùi ƒëi·ªÉm h∆∞·ªüng l∆∞∆°ng hi·ªán nay:** {employee.current_salary_date.strftime('%d/%m/%Y')}")
        
        # Ph·ª• c·∫•p ch·ª©c v·ª•
        if employee.position_allowance:
            st.markdown(f"**Ph·ª• c·∫•p ch·ª©c v·ª•:** {employee.position_allowance}")
            if employee.position_allowance_reserve_until:
                st.warning(f"‚ö†Ô∏è B·∫£o l∆∞u ph·ª• c·∫•p ch·ª©c v·ª• ƒë·∫øn: {employee.position_allowance_reserve_until.strftime('%d/%m/%Y')}")
        
        # Th·ªùi gian c√¥ng t√°c
        st.markdown("#### ‚è∞ Th·ªùi gian c√¥ng t√°c")
        
        col4, col5 = st.columns(2)
        with col4:
            if employee.social_insurance_start_date:
                insurance_years = (date.today() - employee.social_insurance_start_date).days // 365
                st.markdown(f"**Ng√†y b·∫Øt ƒë·∫ßu c√¥ng t√°c (BHXH):** {employee.social_insurance_start_date.strftime('%d/%m/%Y')}")
                st.markdown(f"**Th·ªùi gian c√¥ng t√°c:** {insurance_years} nƒÉm")
        
        with col5:
            if employee.organization_start_date:
                org_years = (date.today() - employee.organization_start_date).days // 365
                st.markdown(f"**Ng√†y v√†o c∆° quan:** {employee.organization_start_date.strftime('%d/%m/%Y')}")
                st.markdown(f"**Th·ªùi gian t·∫°i c∆° quan:** {org_years} nƒÉm")
        
        # L·ªãch s·ª≠ l∆∞∆°ng (c√≥ th·ªÉ m·ªü r·ªông)
        salary_history = session.query(SalaryHistory).filter_by(employee_id=employee.id).order_by(SalaryHistory.effective_date.desc()).all()
        
        if salary_history:
            with st.expander("üìà Xem l·ªãch s·ª≠ l∆∞∆°ng"):
                salary_data = []
                for salary in salary_history:
                    salary_data.append({
                        "Ng√†y hi·ªáu l·ª±c": salary.effective_date.strftime('%d/%m/%Y'),
                        "Ng·∫°ch": salary.salary_grade,
                        "B·∫≠c": salary.salary_level,
                        "H·ªá s·ªë": salary.salary_coefficient,
                        "Ph·ª• c·∫•p CV": salary.position_allowance or 0,
                        "L√Ω do": salary.reason or "N/A"
                    })
                
                df_salary = pd.DataFrame(salary_data)
                st.dataframe(df_salary, use_container_width=True, hide_index=True)
        
        # Qu√° tr√¨nh c√¥ng t√°c 
        work_history = session.query(WorkHistory).filter_by(employee_id=employee.id).order_by(WorkHistory.start_date.desc()).all()
        
        if work_history:
            with st.expander("üíº Xem qu√° tr√¨nh c√¥ng t√°c"):
                for work in work_history:
                    end_date_str = work.end_date.strftime('%d/%m/%Y') if work.end_date else "Hi·ªán t·∫°i"
                    st.markdown(f"""
                    **{work.start_date.strftime('%d/%m/%Y')} - {end_date_str}**  
                    üìç {work.position} - {work.department}  
                    üè¢ {work.organization}  
                    {work.responsibilities or ''}
                    """)
                    st.divider()
    
    @staticmethod
    def render_education_tab(employee, session):
        """Tab 3: ƒê√†o t·∫°o & Tr√¨nh ƒë·ªô"""
        
        # Tr√¨nh ƒë·ªô ch√≠nh
        st.markdown("#### üéì Tr√¨nh ƒë·ªô chuy√™n m√¥n")
        st.markdown(f"**Tr√¨nh ƒë·ªô:** {employee.education_level.value if employee.education_level else 'N/A'}")
        st.markdown(f"**Tr√¨nh ƒë·ªô l√Ω lu·∫≠n ch√≠nh tr·ªã:** {employee.political_theory_level.value if employee.political_theory_level else 'N/A'}")
        
        # Chi ti·∫øt h·ªçc v·∫•n
        education_records = session.query(Education).filter_by(employee_id=employee.id).all()
        
        if education_records:
            st.markdown("#### üìö Chi ti·∫øt h·ªçc v·∫•n")
            for edu in education_records:
                with st.container():
                    st.markdown(f"""
                    **{edu.level.value if edu.level else 'N/A'}** - {edu.field_of_study or 'N/A'}  
                    üè´ Tr∆∞·ªùng: {edu.institution or 'N/A'}  
                    üåç N∆∞·ªõc: {edu.country or 'N/A'}  
                    üìñ H√¨nh th·ª©c: {edu.study_mode or 'N/A'}  
                    üìÖ T·ªët nghi·ªáp: {edu.graduation_date.strftime('%d/%m/%Y') if edu.graduation_date else 'N/A'}
                    """)
                    st.divider()
        
        # Qu√° tr√¨nh ƒë√†o t·∫°o, b·ªìi d∆∞·ª°ng
        training_records = session.query(Training).filter_by(employee_id=employee.id).all()
        
        if training_records:
            with st.expander("üèÜ Xem qu√° tr√¨nh ƒë√†o t·∫°o, b·ªìi d∆∞·ª°ng"):
                training_data = []
                for training in training_records:
                    training_data.append({
                        "Lo·∫°i ƒë√†o t·∫°o": training.training_type,
                        "C·∫•p ƒë·ªô": training.level,
                        "Tr∆∞·ªùng/C∆° quan": training.institution,
                        "Ng√†y ho√†n th√†nh": training.completion_date.strftime('%d/%m/%Y') if training.completion_date else 'N/A',
                        "S·ªë ch·ª©ng ch·ªâ": training.certificate_number or 'N/A'
                    })
                
                df_training = pd.DataFrame(training_data)
                st.dataframe(df_training, use_container_width=True, hide_index=True)
        
        # Tham gia h·ªôi ƒë·ªìng
        councils = session.query(CouncilMembership).filter_by(employee_id=employee.id).all()
        
        if councils:
            with st.expander("üèõÔ∏è Tham gia h·ªôi ƒë·ªìng, ban ch·ªâ ƒë·∫°o"):
                for council in councils:
                    end_date_str = council.end_date.strftime('%d/%m/%Y') if council.end_date else "Hi·ªán t·∫°i"
                    location = "Trong c∆° quan" if council.is_internal else "Ngo√†i c∆° quan"
                    st.markdown(f"""
                    **{council.council_name}**  
                    üë§ Vai tr√≤: {council.role or 'Th√†nh vi√™n'}  
                    üìÖ Th·ªùi gian: {council.start_date.strftime('%d/%m/%Y') if council.start_date else 'N/A'} - {end_date_str}  
                    üìç {location}
                    """)
                    st.divider()
    
    @staticmethod
    def render_achievements_tab(employee, session):
        """Tab 4: Th√†nh t√≠ch & ƒê√°nh gi√°"""
        
        # Th√†nh t√≠ch, khen th∆∞·ªüng
        achievements = session.query(Achievement).filter_by(employee_id=employee.id).order_by(Achievement.award_year.desc()).all()
        
        st.markdown("#### üèÜ Th√†nh t√≠ch, khen th∆∞·ªüng")
        
        if achievements:
            for achievement in achievements:
                award_color = "ü•á" if "nh·∫•t" in (achievement.award_level or "") else "ü•à" if "nh√¨" in (achievement.award_level or "") else "ü•â"
                
                st.markdown(f"""
                {award_color} **{achievement.award_type}** ({achievement.award_year})  
                üèÖ C·∫•p ƒë·ªô: {achievement.award_level or 'N/A'}  
                üè¢ C∆° quan c·∫•p: {achievement.issuing_authority or 'N/A'}  
                {achievement.details or ''}
                """)
                st.divider()
        else:
            st.info("Ch∆∞a c√≥ th√¥ng tin khen th∆∞·ªüng")
        
        # ƒê√°nh gi√° h√†ng nƒÉm
        evaluations = session.query(Evaluation).filter_by(employee_id=employee.id).order_by(Evaluation.year.desc()).all()
        
        st.markdown("#### üìä ƒê√°nh gi√° h√†ng nƒÉm")
        
        if evaluations:
            eval_data = []
            for evaluation in evaluations:
                performance_color = {"Ho√†n th√†nh xu·∫•t s·∫Øc": "üü¢", "Ho√†n th√†nh t·ªët": "üü°", 
                                   "Ho√†n th√†nh": "üü†", "Kh√¥ng ho√†n th√†nh": "üî¥"}
                
                eval_data.append({
                    "NƒÉm": evaluation.year,
                    "K·∫øt qu·∫£": f"{performance_color.get(evaluation.performance.value, '‚ö™')} {evaluation.performance.value}",
                    "Chi ti·∫øt": evaluation.details or 'N/A'
                })
            
            df_eval = pd.DataFrame(eval_data)
            st.dataframe(df_eval, use_container_width=True, hide_index=True)
        else:
            st.info("Ch∆∞a c√≥ ƒë√°nh gi√° h√†ng nƒÉm")
    
    @staticmethod
    def render_statistics_tab(employee, session):
        """Tab 5: Bi·ªÉu ƒë·ªì & Th·ªëng k√™"""
        
        st.markdown("#### üìà Bi·ªÉu ƒë·ªì th·ªëng k√™ c√° nh√¢n")
        
        # Bi·ªÉu ƒë·ªì l·ªãch s·ª≠ l∆∞∆°ng
        salary_history = session.query(SalaryHistory).filter_by(employee_id=employee.id).order_by(SalaryHistory.effective_date).all()
        
        if salary_history and len(salary_history) > 1:
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("##### üí∞ L·ªãch s·ª≠ h·ªá s·ªë l∆∞∆°ng")
                
                dates = [s.effective_date for s in salary_history]
                coefficients = [s.salary_coefficient for s in salary_history]
                
                fig = px.line(
                    x=dates, y=coefficients,
                    title="Ti·∫øn tr√¨nh h·ªá s·ªë l∆∞∆°ng theo th·ªùi gian",
                    labels={'x': 'Th·ªùi gian', 'y': 'H·ªá s·ªë l∆∞∆°ng'}
                )
                fig.update_traces(mode='markers+lines')
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.markdown("##### üìä Ph·ª• c·∫•p ch·ª©c v·ª•")
                
                allowances = [s.position_allowance or 0 for s in salary_history]
                
                fig2 = px.bar(
                    x=dates, y=allowances,
                    title="L·ªãch s·ª≠ ph·ª• c·∫•p ch·ª©c v·ª•",
                    labels={'x': 'Th·ªùi gian', 'y': 'Ph·ª• c·∫•p'}
                )
                st.plotly_chart(fig2, use_container_width=True)
        
        # Th·ªëng k√™ ƒë√°nh gi√°
        evaluations = session.query(Evaluation).filter_by(employee_id=employee.id).all()
        
        if evaluations:
            st.markdown("##### üéØ Ph√¢n b·ªë k·∫øt qu·∫£ ƒë√°nh gi√°")
            
            eval_counts = {}
            for eval in evaluations:
                perf = eval.performance.value
                eval_counts[perf] = eval_counts.get(perf, 0) + 1
            
            fig3 = px.pie(
                values=list(eval_counts.values()),
                names=list(eval_counts.keys()),
                title="T·ª∑ l·ªá c√°c m·ª©c ƒë√°nh gi√°"
            )
            st.plotly_chart(fig3, use_container_width=True)
        
        # Th·ªùi gian l√†m vi·ªác
        if employee.social_insurance_start_date:
            total_days = (date.today() - employee.social_insurance_start_date).days
            total_years = total_days // 365
            remaining_days = total_days % 365
            
            st.markdown("##### ‚è±Ô∏è Th·ªëng k√™ th·ªùi gian")
            
            col3, col4, col5 = st.columns(3)
            with col3:
                st.metric("T·ªïng s·ªë nƒÉm", f"{total_years} nƒÉm")
            with col4:
                st.metric("S·ªë ng√†y th√™m", f"{remaining_days} ng√†y")
            with col5:
                if employee.date_of_birth:
                    retirement_age = 60 if employee.gender == GenderEnum.FEMALE else 62
                    retirement_date = date(employee.date_of_birth.year + retirement_age, employee.date_of_birth.month, employee.date_of_birth.day)
                    days_to_retirement = (retirement_date - date.today()).days
                    
                    if days_to_retirement > 0:
                        years_to_retirement = days_to_retirement // 365
                        st.metric("NƒÉm c√≤n l·∫°i ƒë·∫øn ngh·ªâ h∆∞u", f"{years_to_retirement} nƒÉm")
                    else:
                        st.metric("T√¨nh tr·∫°ng", "ƒê√£ ƒë·∫øn tu·ªïi ngh·ªâ h∆∞u")
    
    @staticmethod
    def render_action_buttons(employee):
        """Render c√°c n√∫t h√†nh ƒë·ªông"""
        
        st.markdown("---")
        st.markdown("### üéØ H√†nh ƒë·ªông")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üìÑ Xu·∫•t file Word", type="primary"):
                EmployeeSearchSystem.export_to_word(employee)
        
        with col2:
            if st.button("üí∞ Ki·ªÉm tra n√¢ng l∆∞∆°ng"):
                st.info("üîÑ Chuy·ªÉn ƒë·∫øn ch·ª©c nƒÉng n√¢ng l∆∞∆°ng...")
                # TODO: Implement chuy·ªÉn ƒë·∫øn t√≠nh nƒÉng n√¢ng l∆∞∆°ng
        
        with col3:
            if st.button("‚è∞ T√≠nh tu·ªïi ngh·ªâ h∆∞u"):
                EmployeeSearchSystem.calculate_retirement_age(employee)
        
        with col4:
            if st.button("üèÜ Ki·ªÉm tra ƒëi·ªÅu ki·ªán b·ªï nhi·ªám"):
                st.info("üîÑ Chuy·ªÉn ƒë·∫øn ch·ª©c nƒÉng b·ªï nhi·ªám...")
                # TODO: Implement chuy·ªÉn ƒë·∫øn t√≠nh nƒÉng b·ªï nhi·ªám
    
    @staticmethod
    def export_to_word(employee):
        """Xu·∫•t th√¥ng tin nh√¢n s·ª± ra file Word"""
        try:
            # TODO: Implement Word export using python-docx
            st.success(f"‚úÖ ƒê√£ xu·∫•t th√¥ng tin {employee.full_name} ra file Word!")
            st.info("üí° File s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c exports/")
            
        except Exception as e:
            st.error(f"‚ùå L·ªói khi xu·∫•t file: {str(e)}")
    
    @staticmethod
    def calculate_retirement_age(employee):
        """T√≠nh to√°n th√¥ng tin ngh·ªâ h∆∞u"""
        if not employee.date_of_birth:
            st.error("Kh√¥ng c√≥ th√¥ng tin ng√†y sinh")
            return
        
        retirement_age = 60 if employee.gender == GenderEnum.FEMALE else 62
        retirement_date = date(
            employee.date_of_birth.year + retirement_age,
            employee.date_of_birth.month, 
            employee.date_of_birth.day
        )
        
        days_remaining = (retirement_date - date.today()).days
        
        if days_remaining > 0:
            years_remaining = days_remaining // 365
            months_remaining = (days_remaining % 365) // 30
            
            st.success(f"""
            **üéÇ Th√¥ng tin ngh·ªâ h∆∞u c·ªßa {employee.full_name}:**
            
            - Tu·ªïi ngh·ªâ h∆∞u: {retirement_age} tu·ªïi
            - Ng√†y ngh·ªâ h∆∞u d·ª± ki·∫øn: {retirement_date.strftime('%d/%m/%Y')}
            - Th·ªùi gian c√≤n l·∫°i: {years_remaining} nƒÉm {months_remaining} th√°ng
            """)
            
            # C·∫£nh b√°o n·∫øu g·∫ßn ngh·ªâ h∆∞u
            if days_remaining <= 180:  # 6 th√°ng
                st.warning("‚ö†Ô∏è G·∫ßn ƒë·∫øn th·ªùi ƒëi·ªÉm ngh·ªâ h∆∞u - c·∫ßn chu·∫©n b·ªã th·ªß t·ª•c!")
        else:
            st.info(f"üë¥ {employee.full_name} ƒë√£ ƒë·∫øn tu·ªïi ngh·ªâ h∆∞u t·ª´ {retirement_date.strftime('%d/%m/%Y')}")

# Main function to render the search page
def render_employee_search_page():
    """Render trang tra c·ª©u nh√¢n s·ª± - ƒë∆∞·ª£c g·ªçi t·ª´ main app"""
    EmployeeSearchSystem.render_search_page()
